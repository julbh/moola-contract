{
	"id": "6c148e9335006630bc078fe0925c8345",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.4",
	"solcLongVersion": "0.8.4+commit.c7e474f2",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/tokens/Moola.sol": {
				"content": "//SPDX-License-Identifier: Unlicense\r\n/**\r\n * Created on 2021-01-10 09:36\r\n * @summary:\r\n * @author: phuong\r\n */\r\npragma solidity 0.8.4;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\r\nimport \"../interfaces/INFTCore.sol\";\r\n\r\n/// @title ERC20MockContract\r\n/// @notice\r\n///\r\n/**\r\n */\r\ncontract Moola is ERC20Upgradeable, OwnableUpgradeable, PausableUpgradeable {\r\n  uint256 internal dailyAllowance;\r\n\r\n  uint256 internal cooldown;\r\n\r\n  IERC721EnumerableUpgradeable internal moolaNFT;\r\n\r\n  mapping(address => bool) internal whitelist;\r\n  mapping(uint256 => uint256) internal nftLastClaimed;\r\n\r\n  modifier onlyWhitelist() {\r\n    require(whitelist[msg.sender], \"Only whitelist\");\r\n    _;\r\n  }\r\n\r\n  event dailyDairyClaimed(address receiver, uint256 amount, uint256 time);\r\n\r\n  function initialize(string memory name_, string memory symbol_)\r\n    external\r\n    initializer\r\n  {\r\n    __ERC20_init(name_, symbol_);\r\n    __Ownable_init();\r\n    __Pausable_init();\r\n\r\n    _mint(msg.sender, 10000000000 * 1e18);\r\n    cooldown = 1 minutes;\r\n  }\r\n\r\n  function setWhitelist(address _whitelist) external onlyOwner {\r\n    whitelist[_whitelist] = true;\r\n  }\r\n\r\n  function setCooldown(uint256 _cooldown) external onlyOwner {\r\n    cooldown = _cooldown;\r\n  }\r\n\r\n  function setMoolaNFTAddress(address _moola) external onlyOwner {\r\n    moolaNFT = IERC721EnumerableUpgradeable(_moola);\r\n  }\r\n\r\n  /// @notice\r\n  ///\r\n  /// @return\r\n  /**\r\n   * :\r\n   */\r\n  function decimals() public view virtual override returns (uint8) {\r\n    return 18;\r\n  }\r\n\r\n  ///\r\n  /// @param to\r\n  /// @param amount\r\n  /// @return\r\n  /**\r\n   * :\r\n   * @param to ??\r\n   * @param amount ??\r\n   */\r\n  function mint(address to, uint256 amount) external onlyWhitelist {\r\n    _mint(to, amount);\r\n  }\r\n\r\n  function claimDairy(uint256 _tokenId) external {\r\n    require(moolaNFT.ownerOf(_tokenId) == msg.sender, \"UNAUTHORIZED\");\r\n    require(\r\n      block.timestamp - nftLastClaimed[_tokenId] >= 1 days,\r\n      \"ON COOLDOWN\"\r\n    );\r\n\r\n    _mint(msg.sender, dailyAllowance);\r\n    nftLastClaimed[_tokenId] = block.timestamp;\r\n\r\n    emit dailyDairyClaimed(msg.sender, dailyAllowance, block.timestamp);\r\n  }\r\n\r\n  function getLastClaimed(uint256 _tokenId) external view returns (uint256) {\r\n    return nftLastClaimed[_tokenId];\r\n  }\r\n}\r\n"
			},
			"contracts/interfaces/INFTCore.sol": {
				"content": "//SPDX-License-Identifier: Unlicense\r\n/**\r\n * Created on 2021-01-10 09:36\r\n * @summary:\r\n * @author: phuong\r\n */\r\n\r\npragma solidity 0.8.4;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\";\r\n\r\n/**\r\n */\r\ninterface INFTCore is IERC721EnumerableUpgradeable {\r\n  function mintNFT(address _recipient, string memory _tokenURI)\r\n    external\r\n    returns (uint256);\r\n\r\n  function setTokenName(uint256 _tokenId, string memory _tokenName) external;\r\n\r\n  function setTokenQuote(uint256 _tokenId, string memory _tokenQuote) external;\r\n\r\n  /*╔══════════════════════════════╗\r\n      ║            GETTERS           ║\r\n      ╚══════════════════════════════╝*/\r\n\r\n  function getTokenName(uint256 _tokenId) external view returns (string memory);\r\n\r\n  function getTokenQuote(uint256 _tokenId)\r\n    external\r\n    view\r\n    returns (string memory);\r\n}\r\n"
			},
			"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized < version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"OwnableUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://98c7bba29bcab7240cdaada7dd7cbe3529fec83314801270c46239e72a9e84d7\",\"dweb:/ipfs/QmfHCc1KMygjXchXVwafWTkFjhbb2SQ3Cu5GzRTdV4CCCh\"]},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6ec10894beb0f7537fba35e501fd1c5d35440e8c8f5ced1b8e57722a1d0879a8\",\"dweb:/ipfs/Qmbc3bNmtDewTGSmrPD93Ubp8saAz8xCxsgTjSmpNTqukz\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://37e4df53c8d2e3c1062c1c7b2c17366db7de03bfd2559d340ca95c588aa49c2f\",\"dweb:/ipfs/QmQ9vsG3o4wED3FRogiSUhdzJvZSjjYFtydzXvFEJtgZk4\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 130,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 133,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 1580,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 10,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_owner",
								"offset": 0,
								"slot": "51",
								"type": "t_address"
							},
							{
								"astId": 122,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "52",
								"type": "t_array(t_uint256)49_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)49_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[49]",
								"numberOfBytes": "1568"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"Initializable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"custom:oz-upgrades-unsafe-allow": "constructor constructor() {     _disableInitializers(); } ``` ====",
						"details": "This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```",
						"events": {
							"Initialized(uint8)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"_initialized": {
								"custom:oz-retyped-from": "bool",
								"details": "Indicates that the contract has been initialized."
							},
							"_initializing": {
								"details": "Indicates that the contract is in the process of being initialized."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6ec10894beb0f7537fba35e501fd1c5d35440e8c8f5ced1b8e57722a1d0879a8\",\"dweb:/ipfs/Qmbc3bNmtDewTGSmrPD93Ubp8saAz8xCxsgTjSmpNTqukz\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://37e4df53c8d2e3c1062c1c7b2c17366db7de03bfd2559d340ca95c588aa49c2f\",\"dweb:/ipfs/QmQ9vsG3o4wED3FRogiSUhdzJvZSjjYFtydzXvFEJtgZk4\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 130,
								"contract": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 133,
								"contract": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							}
						],
						"types": {
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
				"PausableUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Paused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Unpaused",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "paused",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.",
						"events": {
							"Paused(address)": {
								"details": "Emitted when the pause is triggered by `account`."
							},
							"Unpaused(address)": {
								"details": "Emitted when the pause is lifted by `account`."
							}
						},
						"kind": "dev",
						"methods": {
							"paused()": {
								"details": "Returns true if the contract is paused, and false otherwise."
							}
						},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"paused()": "5c975abb"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.\",\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":\"PausableUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6ec10894beb0f7537fba35e501fd1c5d35440e8c8f5ced1b8e57722a1d0879a8\",\"dweb:/ipfs/Qmbc3bNmtDewTGSmrPD93Ubp8saAz8xCxsgTjSmpNTqukz\"]},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a8e235e33979e564ee560e5e7c42f3d4c309698eae7b7035aaf65b0ce6253f9\",\"dweb:/ipfs/QmQKdNPLcgR6LLtS9vDRXy8jeD7gCZDTfctXiTwu6HN7M1\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://37e4df53c8d2e3c1062c1c7b2c17366db7de03bfd2559d340ca95c588aa49c2f\",\"dweb:/ipfs/QmQ9vsG3o4wED3FRogiSUhdzJvZSjjYFtydzXvFEJtgZk4\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 130,
								"contract": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 133,
								"contract": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 1580,
								"contract": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 286,
								"contract": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
								"label": "_paused",
								"offset": 0,
								"slot": "51",
								"type": "t_bool"
							},
							{
								"astId": 375,
								"contract": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:PausableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "52",
								"type": "t_array(t_uint256)49_storage"
							}
						],
						"types": {
							"t_array(t_uint256)49_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[49]",
								"numberOfBytes": "1568"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
				"ReentrancyGuardUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":\"ReentrancyGuardUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6ec10894beb0f7537fba35e501fd1c5d35440e8c8f5ced1b8e57722a1d0879a8\",\"dweb:/ipfs/Qmbc3bNmtDewTGSmrPD93Ubp8saAz8xCxsgTjSmpNTqukz\"]},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://607818f1b44548c2d8268176f73cdb290e1faed971b1061930d92698366e2a11\",\"dweb:/ipfs/QmQibMe3r5no95b6q7isGT5R75V8xSofWEDLXzp95b7LgZ\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://37e4df53c8d2e3c1062c1c7b2c17366db7de03bfd2559d340ca95c588aa49c2f\",\"dweb:/ipfs/QmQ9vsG3o4wED3FRogiSUhdzJvZSjjYFtydzXvFEJtgZk4\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 130,
								"contract": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 133,
								"contract": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 390,
								"contract": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
								"label": "_status",
								"offset": 0,
								"slot": "1",
								"type": "t_uint256"
							},
							{
								"astId": 434,
								"contract": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "2",
								"type": "t_array(t_uint256)49_storage"
							}
						],
						"types": {
							"t_array(t_uint256)49_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[49]",
								"numberOfBytes": "1568"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
				"ERC20Upgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							}
						},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":1482:13254  contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":1482:13254  contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x39509351\n      gt\n      tag_14\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_13\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_14:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2493:2591  function name() public view virtual override returns (string memory) {... */\n    tag_3:\n      tag_15\n      tag_16\n      jump\t// in\n    tag_15:\n      mload(0x40)\n      tag_17\n      swap2\n      swap1\n      tag_18\n      jump\t// in\n    tag_17:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4770:4967  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_4:\n      tag_19\n      tag_20\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_20:\n      tag_22\n      jump\t// in\n    tag_19:\n      mload(0x40)\n        /* \"#utility.yul\":1445:1459   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1438:1460   */\n      iszero\n        /* \"#utility.yul\":1420:1461   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1408:1410   */\n      0x20\n        /* \"#utility.yul\":1393:1411   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4770:4967  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      tag_17\n        /* \"#utility.yul\":1375:1467   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3581:3687  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_5:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3668:3680  _totalSupply */\n      sload(0x35)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3581:3687  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_25:\n      mload(0x40)\n        /* \"#utility.yul\":5015:5040   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":5003:5005   */\n      0x20\n        /* \"#utility.yul\":4988:5006   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3581:3687  function totalSupply() public view virtual override returns (uint256) {... */\n      tag_17\n        /* \"#utility.yul\":4970:5046   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5529:5815  function transferFrom(... */\n    tag_6:\n      tag_19\n      tag_30\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_30:\n      tag_32\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3430:3521  function decimals() public view virtual override returns (uint8) {... */\n    tag_7:\n      mload(0x40)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3512:3514  18 */\n      0x12\n        /* \"#utility.yul\":5193:5229   */\n      dup2\n      mstore\n        /* \"#utility.yul\":5181:5183   */\n      0x20\n        /* \"#utility.yul\":5166:5184   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3430:3521  function decimals() public view virtual override returns (uint8) {... */\n      tag_17\n        /* \"#utility.yul\":5148:5235   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6210:6444  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_8:\n      tag_19\n      tag_39\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_39:\n      tag_40\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3745:3870  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_9:\n      tag_25\n      tag_43\n      calldatasize\n      0x04\n      tag_44\n      jump\t// in\n    tag_43:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3845:3863  _balances[account] */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3819:3826  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3845:3863  _balances[account] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3845:3854  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3845:3863  _balances[account] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3745:3870  function balanceOf(address account) public view virtual override returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2704:2806  function symbol() public view virtual override returns (string memory) {... */\n    tag_10:\n      tag_15\n      tag_48\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6931:7358  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_11:\n      tag_19\n      tag_51\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_51:\n      tag_52\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4066:4255  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_12:\n      tag_19\n      tag_55\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_55:\n      tag_56\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4313:4462  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_13:\n      tag_25\n      tag_59\n      calldatasize\n      0x04\n      tag_60\n      jump\t// in\n    tag_59:\n      tag_61\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2493:2591  function name() public view virtual override returns (string memory) {... */\n    tag_16:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2547:2560  string memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2579:2584  _name */\n      0x36\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2572:2584  return _name */\n      dup1\n      sload\n      tag_64\n      swap1\n      tag_65\n      jump\t// in\n    tag_64:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_66\n      swap1\n      tag_65\n      jump\t// in\n    tag_66:\n      dup1\n      iszero\n      tag_67\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_68\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_67)\n    tag_68:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_69:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_69\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_67:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2493:2591  function name() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4770:4967  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_22:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4853:4857  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4907:4939  _approve(owner, spender, amount) */\n      tag_73\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4923:4930  spender */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4932:4938  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4907:4915  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4907:4939  _approve(owner, spender, amount) */\n      jump\t// in\n    tag_73:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4956:4960  true */\n      0x01\n      swap4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4770:4967  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5529:5815  function transferFrom(... */\n    tag_32:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5656:5660  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5712:5750  _spendAllowance(from, spender, amount) */\n      tag_78\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5728:5732  from */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5743:5749  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5712:5727  _spendAllowance */\n      tag_79\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5712:5750  _spendAllowance(from, spender, amount) */\n      jump\t// in\n    tag_78:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5760:5787  _transfer(from, to, amount) */\n      tag_80\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5770:5774  from */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5776:5778  to */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5780:5786  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5760:5769  _transfer */\n      tag_81\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5760:5787  _transfer(from, to, amount) */\n      jump\t// in\n    tag_80:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5804:5808  true */\n      0x01\n      swap5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5529:5815  function transferFrom(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6210:6444  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_40:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6298:6302  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6352:6416  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      tag_73\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6368:6375  spender */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6405:6415  addedValue */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6377:6402  allowance(owner, spender) */\n      tag_86\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6368:6375  spender */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6377:6386  allowance */\n      tag_61\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6377:6402  allowance(owner, spender) */\n      jump\t// in\n    tag_86:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6377:6415  allowance(owner, spender) + addedValue */\n      tag_87\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n    tag_87:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6352:6360  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6352:6416  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2704:2806  function symbol() public view virtual override returns (string memory) {... */\n    tag_48:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2760:2773  string memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2792:2799  _symbol */\n      0x37\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2785:2799  return _symbol */\n      dup1\n      sload\n      tag_64\n      swap1\n      tag_65\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6931:7358  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_52:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7024:7028  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7024:7028  bool */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7105:7130  allowance(owner, spender) */\n      tag_98\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7122:7129  spender */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7105:7114  allowance */\n      tag_61\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7105:7130  allowance(owner, spender) */\n      jump\t// in\n    tag_98:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7078:7130  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7168:7183  subtractedValue */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7148:7164  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7148:7183  currentAllowance >= subtractedValue */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7140:7225  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_99\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4665:4667   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7140:7225  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4647:4668   */\n      mstore\n        /* \"#utility.yul\":4704:4706   */\n      0x25\n        /* \"#utility.yul\":4684:4702   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4677:4707   */\n      mstore\n        /* \"#utility.yul\":4743:4777   */\n      0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77\n        /* \"#utility.yul\":4723:4741   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4716:4778   */\n      mstore\n      shl(0xd8, 0x207a65726f)\n        /* \"#utility.yul\":4794:4812   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4787:4822   */\n      mstore\n        /* \"#utility.yul\":4839:4858   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7140:7225  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n    tag_100:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_99:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7259:7319  _approve(owner, spender, currentAllowance - subtractedValue) */\n      tag_80\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7268:7273  owner */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7275:7282  spender */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7303:7318  subtractedValue */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7284:7300  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7284:7318  currentAllowance - subtractedValue */\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7259:7267  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7259:7319  _approve(owner, spender, currentAllowance - subtractedValue) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4066:4255  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_56:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4145:4149  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4199:4227  _transfer(owner, to, amount) */\n      tag_73\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4216:4218  to */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4220:4226  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4199:4208  _transfer */\n      tag_81\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4199:4227  _transfer(owner, to, amount) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4313:4462  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_61:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4428:4446  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4402:4409  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4428:4446  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4428:4439  _allowances */\n      0x34\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4428:4446  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4428:4455  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4313:4462  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10456:10826  function _approve(... */\n    tag_74:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10587:10606  owner != address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10579:10647  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_109\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4260:4262   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10579:10647  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4242:4263   */\n      mstore\n        /* \"#utility.yul\":4299:4301   */\n      0x24\n        /* \"#utility.yul\":4279:4297   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":4272:4302   */\n      mstore\n        /* \"#utility.yul\":4338:4372   */\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n        /* \"#utility.yul\":4318:4336   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4311:4373   */\n      mstore\n      shl(0xe0, 0x72657373)\n        /* \"#utility.yul\":4389:4407   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4382:4416   */\n      mstore\n        /* \"#utility.yul\":4433:4452   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10579:10647  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_100\n        /* \"#utility.yul\":4232:4458   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10579:10647  require(owner != address(0), \"ERC20: approve from the zero address\") */\n    tag_109:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10665:10686  spender != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10657:10725  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_112\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2686:2688   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10657:10725  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2668:2689   */\n      mstore\n        /* \"#utility.yul\":2725:2727   */\n      0x22\n        /* \"#utility.yul\":2705:2723   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2698:2728   */\n      mstore\n        /* \"#utility.yul\":2764:2798   */\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n        /* \"#utility.yul\":2744:2762   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2737:2799   */\n      mstore\n      shl(0xf0, 0x7373)\n        /* \"#utility.yul\":2815:2833   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":2808:2840   */\n      mstore\n        /* \"#utility.yul\":2857:2876   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10657:10725  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_100\n        /* \"#utility.yul\":2658:2882   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10657:10725  require(spender != address(0), \"ERC20: approve to the zero address\") */\n    tag_112:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10736:10754  _allowances[owner] */\n      dup4\n      dup2\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10736:10747  _allowances */\n      0x34\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10736:10754  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10736:10763  _allowances[owner][spender] */\n      swap5\n      dup8\n      and\n      dup1\n      dup5\n      mstore\n      swap5\n      dup3\n      mstore\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10736:10772  _allowances[owner][spender] = amount */\n      dup6\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10787:10819  Approval(owner, spender, amount) */\n      swap1\n      mload\n        /* \"#utility.yul\":5015:5040   */\n      dup5\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10787:10819  Approval(owner, spender, amount) */\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      swap2\n        /* \"#utility.yul\":4988:5006   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10787:10819  Approval(owner, spender, amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10456:10826  function _approve(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11107:11548  function _spendAllowance(... */\n    tag_79:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11237:11261  uint256 currentAllowance */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11264:11289  allowance(owner, spender) */\n      tag_117\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11274:11279  owner */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11281:11288  spender */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11264:11273  allowance */\n      tag_61\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11264:11289  allowance(owner, spender) */\n      jump\t// in\n    tag_117:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11237:11289  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n      not(0x00)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11303:11319  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11303:11340  currentAllowance != type(uint256).max */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11299:11542  if (currentAllowance != type(uint256).max) {... */\n      tag_122\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11384:11390  amount */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11364:11380  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11364:11390  currentAllowance >= amount */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11356:11424  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_119\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3089:3091   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11356:11424  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3071:3092   */\n      mstore\n        /* \"#utility.yul\":3128:3130   */\n      0x1d\n        /* \"#utility.yul\":3108:3126   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3101:3131   */\n      mstore\n        /* \"#utility.yul\":3167:3198   */\n      0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000\n        /* \"#utility.yul\":3147:3165   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3140:3199   */\n      mstore\n        /* \"#utility.yul\":3216:3234   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11356:11424  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_100\n        /* \"#utility.yul\":3061:3240   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11356:11424  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n    tag_119:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11466:11517  _approve(owner, spender, currentAllowance - amount) */\n      tag_122\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11475:11480  owner */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11482:11489  spender */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11510:11516  amount */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11491:11507  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11491:11516  currentAllowance - amount */\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11466:11474  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11466:11517  _approve(owner, spender, currentAllowance - amount) */\n      jump\t// in\n    tag_122:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11107:11548  function _spendAllowance(... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7821:8472  function _transfer(... */\n    tag_81:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7947:7965  from != address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7939:8007  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_124\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3854:3856   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7939:8007  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3836:3857   */\n      mstore\n        /* \"#utility.yul\":3893:3895   */\n      0x25\n        /* \"#utility.yul\":3873:3891   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3866:3896   */\n      mstore\n        /* \"#utility.yul\":3932:3966   */\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n        /* \"#utility.yul\":3912:3930   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3905:3967   */\n      mstore\n      shl(0xd8, 0x6472657373)\n        /* \"#utility.yul\":3983:4001   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":3976:4011   */\n      mstore\n        /* \"#utility.yul\":4028:4047   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7939:8007  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_100\n        /* \"#utility.yul\":3826:4053   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7939:8007  require(from != address(0), \"ERC20: transfer from the zero address\") */\n    tag_124:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8025:8041  to != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8017:8081  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_127\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2282:2284   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8017:8081  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2264:2285   */\n      mstore\n        /* \"#utility.yul\":2321:2323   */\n      0x23\n        /* \"#utility.yul\":2301:2319   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2294:2324   */\n      mstore\n        /* \"#utility.yul\":2360:2394   */\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n        /* \"#utility.yul\":2340:2358   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2333:2395   */\n      mstore\n      shl(0xe8, 0x657373)\n        /* \"#utility.yul\":2411:2429   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":2404:2437   */\n      mstore\n        /* \"#utility.yul\":2454:2473   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8017:8081  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_100\n        /* \"#utility.yul\":2254:2479   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8017:8081  require(to != address(0), \"ERC20: transfer to the zero address\") */\n    tag_127:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8163:8178  _balances[from] */\n      dup4\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8141:8160  uint256 fromBalance */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8163:8178  _balances[from] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8163:8172  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8163:8178  _balances[from] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8196:8217  fromBalance >= amount */\n      dup2\n      dup2\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8188:8260  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_132\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3447:3449   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8188:8260  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3429:3450   */\n      mstore\n        /* \"#utility.yul\":3486:3488   */\n      0x26\n        /* \"#utility.yul\":3466:3484   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3459:3489   */\n      mstore\n        /* \"#utility.yul\":3525:3559   */\n      0x45524332303a207472616e7366657220616d6f756e7420657863656564732062\n        /* \"#utility.yul\":3505:3523   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3498:3560   */\n      mstore\n      shl(0xd0, 0x616c616e6365)\n        /* \"#utility.yul\":3576:3594   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":3569:3605   */\n      mstore\n        /* \"#utility.yul\":3622:3641   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8188:8260  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_100\n        /* \"#utility.yul\":3419:3647   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8188:8260  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n    tag_132:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8294:8309  _balances[from] */\n      dup1\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8294:8303  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8294:8309  _balances[from] */\n      0x20\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8312:8332  fromBalance - amount */\n      dup6\n      dup6\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8294:8332  _balances[from] = fromBalance - amount */\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8352:8365  _balances[to] */\n      swap2\n      dup6\n      and\n      dup2\n      mstore\n      swap1\n      dup2\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8352:8375  _balances[to] += amount */\n      dup1\n      sload\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8326:8332  amount */\n      dup5\n      swap3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8294:8309  _balances[from] */\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8352:8375  _balances[to] += amount */\n      tag_135\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8326:8332  amount */\n      dup5\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8352:8375  _balances[to] += amount */\n      tag_88\n      jump\t// in\n    tag_135:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8406:8408  to */\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8391:8417  Transfer(from, to, amount) */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8400:8404  from */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8391:8417  Transfer(from, to, amount) */\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8410:8416  amount */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8391:8417  Transfer(from, to, amount) */\n      mload(0x40)\n      tag_136\n      swap2\n        /* \"#utility.yul\":5015:5040   */\n      dup2\n      mstore\n        /* \"#utility.yul\":5003:5005   */\n      0x20\n        /* \"#utility.yul\":4988:5006   */\n      add\n      swap1\n        /* \"#utility.yul\":4970:5046   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8391:8417  Transfer(from, to, amount) */\n    tag_136:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8428:8465  _afterTokenTransfer(from, to, amount) */\n      tag_122\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12132:12253  function _beforeTokenTransfer(... */\n      jump\n        /* \"#utility.yul\":14:187   */\n    tag_142:\n        /* \"#utility.yul\":82:102   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":131:162   */\n      dup2\n      and\n        /* \"#utility.yul\":121:163   */\n      dup2\n      eq\n        /* \"#utility.yul\":111:113   */\n      tag_144\n      jumpi\n        /* \"#utility.yul\":177:178   */\n      0x00\n        /* \"#utility.yul\":174:175   */\n      dup1\n        /* \"#utility.yul\":167:179   */\n      revert\n        /* \"#utility.yul\":111:113   */\n    tag_144:\n        /* \"#utility.yul\":63:187   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":192:388   */\n    tag_44:\n        /* \"#utility.yul\":251:257   */\n      0x00\n        /* \"#utility.yul\":304:306   */\n      0x20\n        /* \"#utility.yul\":292:301   */\n      dup3\n        /* \"#utility.yul\":283:290   */\n      dup5\n        /* \"#utility.yul\":279:302   */\n      sub\n        /* \"#utility.yul\":275:307   */\n      slt\n        /* \"#utility.yul\":272:274   */\n      iszero\n      tag_146\n      jumpi\n        /* \"#utility.yul\":325:331   */\n      dup1\n        /* \"#utility.yul\":317:323   */\n      dup2\n        /* \"#utility.yul\":310:332   */\n      revert\n        /* \"#utility.yul\":272:274   */\n    tag_146:\n        /* \"#utility.yul\":353:382   */\n      tag_147\n        /* \"#utility.yul\":372:381   */\n      dup3\n        /* \"#utility.yul\":353:382   */\n      tag_142\n      jump\t// in\n    tag_147:\n        /* \"#utility.yul\":343:382   */\n      swap4\n        /* \"#utility.yul\":262:388   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":393:663   */\n    tag_60:\n        /* \"#utility.yul\":461:467   */\n      0x00\n        /* \"#utility.yul\":469:475   */\n      dup1\n        /* \"#utility.yul\":522:524   */\n      0x40\n        /* \"#utility.yul\":510:519   */\n      dup4\n        /* \"#utility.yul\":501:508   */\n      dup6\n        /* \"#utility.yul\":497:520   */\n      sub\n        /* \"#utility.yul\":493:525   */\n      slt\n        /* \"#utility.yul\":490:492   */\n      iszero\n      tag_149\n      jumpi\n        /* \"#utility.yul\":543:549   */\n      dup1\n        /* \"#utility.yul\":535:541   */\n      dup2\n        /* \"#utility.yul\":528:550   */\n      revert\n        /* \"#utility.yul\":490:492   */\n    tag_149:\n        /* \"#utility.yul\":571:600   */\n      tag_150\n        /* \"#utility.yul\":590:599   */\n      dup4\n        /* \"#utility.yul\":571:600   */\n      tag_142\n      jump\t// in\n    tag_150:\n        /* \"#utility.yul\":561:600   */\n      swap2\n      pop\n        /* \"#utility.yul\":619:657   */\n      tag_151\n        /* \"#utility.yul\":653:655   */\n      0x20\n        /* \"#utility.yul\":642:651   */\n      dup5\n        /* \"#utility.yul\":638:656   */\n      add\n        /* \"#utility.yul\":619:657   */\n      tag_142\n      jump\t// in\n    tag_151:\n        /* \"#utility.yul\":609:657   */\n      swap1\n      pop\n        /* \"#utility.yul\":480:663   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":668:1006   */\n    tag_31:\n        /* \"#utility.yul\":745:751   */\n      0x00\n        /* \"#utility.yul\":753:759   */\n      dup1\n        /* \"#utility.yul\":761:767   */\n      0x00\n        /* \"#utility.yul\":814:816   */\n      0x60\n        /* \"#utility.yul\":802:811   */\n      dup5\n        /* \"#utility.yul\":793:800   */\n      dup7\n        /* \"#utility.yul\":789:812   */\n      sub\n        /* \"#utility.yul\":785:817   */\n      slt\n        /* \"#utility.yul\":782:784   */\n      iszero\n      tag_153\n      jumpi\n        /* \"#utility.yul\":835:841   */\n      dup1\n        /* \"#utility.yul\":827:833   */\n      dup2\n        /* \"#utility.yul\":820:842   */\n      revert\n        /* \"#utility.yul\":782:784   */\n    tag_153:\n        /* \"#utility.yul\":863:892   */\n      tag_154\n        /* \"#utility.yul\":882:891   */\n      dup5\n        /* \"#utility.yul\":863:892   */\n      tag_142\n      jump\t// in\n    tag_154:\n        /* \"#utility.yul\":853:892   */\n      swap3\n      pop\n        /* \"#utility.yul\":911:949   */\n      tag_155\n        /* \"#utility.yul\":945:947   */\n      0x20\n        /* \"#utility.yul\":934:943   */\n      dup6\n        /* \"#utility.yul\":930:948   */\n      add\n        /* \"#utility.yul\":911:949   */\n      tag_142\n      jump\t// in\n    tag_155:\n        /* \"#utility.yul\":901:949   */\n      swap2\n      pop\n        /* \"#utility.yul\":996:998   */\n      0x40\n        /* \"#utility.yul\":985:994   */\n      dup5\n        /* \"#utility.yul\":981:999   */\n      add\n        /* \"#utility.yul\":968:1000   */\n      calldataload\n        /* \"#utility.yul\":958:1000   */\n      swap1\n      pop\n        /* \"#utility.yul\":772:1006   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":1011:1275   */\n    tag_21:\n        /* \"#utility.yul\":1079:1085   */\n      0x00\n        /* \"#utility.yul\":1087:1093   */\n      dup1\n        /* \"#utility.yul\":1140:1142   */\n      0x40\n        /* \"#utility.yul\":1128:1137   */\n      dup4\n        /* \"#utility.yul\":1119:1126   */\n      dup6\n        /* \"#utility.yul\":1115:1138   */\n      sub\n        /* \"#utility.yul\":1111:1143   */\n      slt\n        /* \"#utility.yul\":1108:1110   */\n      iszero\n      tag_157\n      jumpi\n        /* \"#utility.yul\":1161:1167   */\n      dup2\n        /* \"#utility.yul\":1153:1159   */\n      dup3\n        /* \"#utility.yul\":1146:1168   */\n      revert\n        /* \"#utility.yul\":1108:1110   */\n    tag_157:\n        /* \"#utility.yul\":1189:1218   */\n      tag_158\n        /* \"#utility.yul\":1208:1217   */\n      dup4\n        /* \"#utility.yul\":1189:1218   */\n      tag_142\n      jump\t// in\n    tag_158:\n        /* \"#utility.yul\":1179:1218   */\n      swap5\n        /* \"#utility.yul\":1265:1267   */\n      0x20\n        /* \"#utility.yul\":1250:1268   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":1237:1269   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":1098:1275   */\n      jump\t// out\n        /* \"#utility.yul\":1472:2075   */\n    tag_18:\n        /* \"#utility.yul\":1584:1588   */\n      0x00\n        /* \"#utility.yul\":1613:1615   */\n      0x20\n        /* \"#utility.yul\":1642:1644   */\n      dup1\n        /* \"#utility.yul\":1631:1640   */\n      dup4\n        /* \"#utility.yul\":1624:1645   */\n      mstore\n        /* \"#utility.yul\":1674:1680   */\n      dup4\n        /* \"#utility.yul\":1668:1681   */\n      mload\n        /* \"#utility.yul\":1717:1723   */\n      dup1\n        /* \"#utility.yul\":1712:1714   */\n      dup3\n        /* \"#utility.yul\":1701:1710   */\n      dup6\n        /* \"#utility.yul\":1697:1715   */\n      add\n        /* \"#utility.yul\":1690:1724   */\n      mstore\n        /* \"#utility.yul\":1742:1746   */\n      dup3\n        /* \"#utility.yul\":1755:1895   */\n    tag_161:\n        /* \"#utility.yul\":1769:1775   */\n      dup2\n        /* \"#utility.yul\":1766:1767   */\n      dup2\n        /* \"#utility.yul\":1763:1776   */\n      lt\n        /* \"#utility.yul\":1755:1895   */\n      iszero\n      tag_163\n      jumpi\n        /* \"#utility.yul\":1864:1878   */\n      dup6\n      dup2\n      add\n        /* \"#utility.yul\":1860:1883   */\n      dup4\n      add\n        /* \"#utility.yul\":1854:1884   */\n      mload\n        /* \"#utility.yul\":1830:1847   */\n      dup6\n      dup3\n      add\n        /* \"#utility.yul\":1849:1851   */\n      0x40\n        /* \"#utility.yul\":1826:1852   */\n      add\n        /* \"#utility.yul\":1819:1885   */\n      mstore\n        /* \"#utility.yul\":1784:1794   */\n      dup3\n      add\n        /* \"#utility.yul\":1755:1895   */\n      jump(tag_161)\n    tag_163:\n        /* \"#utility.yul\":1913:1919   */\n      dup2\n        /* \"#utility.yul\":1910:1911   */\n      dup2\n        /* \"#utility.yul\":1907:1920   */\n      gt\n        /* \"#utility.yul\":1904:1906   */\n      iszero\n      tag_164\n      jumpi\n        /* \"#utility.yul\":1983:1987   */\n      dup4\n        /* \"#utility.yul\":1978:1980   */\n      0x40\n        /* \"#utility.yul\":1969:1975   */\n      dup4\n        /* \"#utility.yul\":1958:1967   */\n      dup8\n        /* \"#utility.yul\":1954:1976   */\n      add\n        /* \"#utility.yul\":1950:1981   */\n      add\n        /* \"#utility.yul\":1943:1988   */\n      mstore\n        /* \"#utility.yul\":1904:1906   */\n    tag_164:\n      pop\n        /* \"#utility.yul\":2059:2061   */\n      0x1f\n        /* \"#utility.yul\":2038:2053   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":2034:2063   */\n      and\n        /* \"#utility.yul\":2019:2064   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":2066:2068   */\n      0x40\n        /* \"#utility.yul\":2015:2069   */\n      add\n      swap4\n        /* \"#utility.yul\":1593:2075   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5240:5469   */\n    tag_88:\n        /* \"#utility.yul\":5280:5283   */\n      0x00\n        /* \"#utility.yul\":5311:5312   */\n      dup3\n        /* \"#utility.yul\":5307:5313   */\n      not\n        /* \"#utility.yul\":5304:5305   */\n      dup3\n        /* \"#utility.yul\":5301:5314   */\n      gt\n        /* \"#utility.yul\":5298:5300   */\n      iszero\n      tag_175\n      jumpi\n      shl(0xe0, 0x4e487b71)\n        /* \"#utility.yul\":5337:5370   */\n      dup2\n      mstore\n        /* \"#utility.yul\":5393:5397   */\n      0x11\n        /* \"#utility.yul\":5390:5391   */\n      0x04\n        /* \"#utility.yul\":5383:5398   */\n      mstore\n        /* \"#utility.yul\":5423:5427   */\n      0x24\n        /* \"#utility.yul\":5344:5347   */\n      dup2\n        /* \"#utility.yul\":5411:5428   */\n      revert\n        /* \"#utility.yul\":5298:5300   */\n    tag_175:\n      pop\n        /* \"#utility.yul\":5454:5463   */\n      add\n      swap1\n        /* \"#utility.yul\":5288:5469   */\n      jump\t// out\n        /* \"#utility.yul\":5474:5854   */\n    tag_65:\n        /* \"#utility.yul\":5553:5554   */\n      0x01\n        /* \"#utility.yul\":5549:5561   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":5596:5608   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":5617:5619   */\n      tag_177\n      jumpi\n        /* \"#utility.yul\":5671:5675   */\n      0x7f\n        /* \"#utility.yul\":5663:5669   */\n      dup3\n        /* \"#utility.yul\":5659:5676   */\n      and\n        /* \"#utility.yul\":5649:5676   */\n      swap2\n      pop\n        /* \"#utility.yul\":5617:5619   */\n    tag_177:\n        /* \"#utility.yul\":5724:5726   */\n      0x20\n        /* \"#utility.yul\":5716:5722   */\n      dup3\n        /* \"#utility.yul\":5713:5727   */\n      lt\n        /* \"#utility.yul\":5693:5711   */\n      dup2\n        /* \"#utility.yul\":5690:5728   */\n      eq\n        /* \"#utility.yul\":5687:5689   */\n      iszero\n      tag_178\n      jumpi\n        /* \"#utility.yul\":5770:5780   */\n      0x4e487b71\n        /* \"#utility.yul\":5765:5768   */\n      0xe0\n        /* \"#utility.yul\":5761:5781   */\n      shl\n        /* \"#utility.yul\":5758:5759   */\n      0x00\n        /* \"#utility.yul\":5751:5782   */\n      mstore\n        /* \"#utility.yul\":5805:5809   */\n      0x22\n        /* \"#utility.yul\":5802:5803   */\n      0x04\n        /* \"#utility.yul\":5795:5810   */\n      mstore\n        /* \"#utility.yul\":5833:5837   */\n      0x24\n        /* \"#utility.yul\":5830:5831   */\n      0x00\n        /* \"#utility.yul\":5823:5838   */\n      revert\n        /* \"#utility.yul\":5687:5689   */\n    tag_178:\n      pop\n        /* \"#utility.yul\":5529:5854   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n\n    auxdata: 0xa26469706673582212200e2a7ded71efe6c7633c4842780d082e316a7e7f6ede0e8a829f7d81230aa5e564736f6c63430008040033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b5061087f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101a0565b6040516100c39190610797565b60405180910390f35b6100df6100da36600461076e565b610232565b60405190151581526020016100c3565b6035545b6040519081526020016100c3565b6100df61010f366004610733565b61024a565b604051601281526020016100c3565b6100df61013136600461076e565b61026e565b6100f36101443660046106e0565b6001600160a01b031660009081526033602052604090205490565b6100b6610290565b6100df61017536600461076e565b61029f565b6100df61018836600461076e565b61031f565b6100f361019b366004610701565b61032d565b6060603680546101af9061080e565b80601f01602080910402602001604051908101604052809291908181526020018280546101db9061080e565b80156102285780601f106101fd57610100808354040283529160200191610228565b820191906000526020600020905b81548152906001019060200180831161020b57829003601f168201915b5050505050905090565b600033610240818585610358565b5060019392505050565b60003361025885828561047c565b6102638585856104f6565b506001949350505050565b600033610240818585610281838361032d565b61028b91906107ea565b610358565b6060603780546101af9061080e565b600033816102ad828661032d565b9050838110156103125760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102638286868403610358565b6000336102408185856104f6565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6001600160a01b0383166103ba5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610309565b6001600160a01b03821661041b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610309565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610488848461032d565b905060001981146104f057818110156104e35760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610309565b6104f08484848403610358565b50505050565b6001600160a01b03831661055a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610309565b6001600160a01b0382166105bc5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610309565b6001600160a01b038316600090815260336020526040902054818110156106345760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610309565b6001600160a01b0380851660009081526033602052604080822085850390559185168152908120805484929061066b9084906107ea565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106b791815260200190565b60405180910390a36104f0565b80356001600160a01b03811681146106db57600080fd5b919050565b6000602082840312156106f1578081fd5b6106fa826106c4565b9392505050565b60008060408385031215610713578081fd5b61071c836106c4565b915061072a602084016106c4565b90509250929050565b600080600060608486031215610747578081fd5b610750846106c4565b925061075e602085016106c4565b9150604084013590509250925092565b60008060408385031215610780578182fd5b610789836106c4565b946020939093013593505050565b6000602080835283518082850152825b818110156107c3578581018301518582016040015282016107a7565b818111156107d45783604083870101525b50601f01601f1916929092016040019392505050565b6000821982111561080957634e487b7160e01b81526011600452602481fd5b500190565b600181811c9082168061082257607f821691505b6020821081141561084357634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212200e2a7ded71efe6c7633c4842780d082e316a7e7f6ede0e8a829f7d81230aa5e564736f6c63430008040033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x87F DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x1A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x797 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x76E JUMP JUMPDEST PUSH2 0x232 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x35 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x733 JUMP JUMPDEST PUSH2 0x24A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x131 CALLDATASIZE PUSH1 0x4 PUSH2 0x76E JUMP JUMPDEST PUSH2 0x26E JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x144 CALLDATASIZE PUSH1 0x4 PUSH2 0x6E0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x290 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x76E JUMP JUMPDEST PUSH2 0x29F JUMP JUMPDEST PUSH2 0xDF PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0x76E JUMP JUMPDEST PUSH2 0x31F JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x19B CALLDATASIZE PUSH1 0x4 PUSH2 0x701 JUMP JUMPDEST PUSH2 0x32D JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x80E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1DB SWAP1 PUSH2 0x80E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x228 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1FD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x228 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x20B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x358 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x258 DUP6 DUP3 DUP6 PUSH2 0x47C JUMP JUMPDEST PUSH2 0x263 DUP6 DUP6 DUP6 PUSH2 0x4F6 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x281 DUP4 DUP4 PUSH2 0x32D JUMP JUMPDEST PUSH2 0x28B SWAP2 SWAP1 PUSH2 0x7EA JUMP JUMPDEST PUSH2 0x358 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x80E JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x2AD DUP3 DUP7 PUSH2 0x32D JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x312 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x263 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x358 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x4F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3BA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x41B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x488 DUP5 DUP5 PUSH2 0x32D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x4F0 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x4E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x309 JUMP JUMPDEST PUSH2 0x4F0 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x358 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x55A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x634 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x66B SWAP1 DUP5 SWAP1 PUSH2 0x7EA JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x6B7 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x4F0 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x6DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6F1 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x6FA DUP3 PUSH2 0x6C4 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x713 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x71C DUP4 PUSH2 0x6C4 JUMP JUMPDEST SWAP2 POP PUSH2 0x72A PUSH1 0x20 DUP5 ADD PUSH2 0x6C4 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x747 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x750 DUP5 PUSH2 0x6C4 JUMP JUMPDEST SWAP3 POP PUSH2 0x75E PUSH1 0x20 DUP6 ADD PUSH2 0x6C4 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x780 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x789 DUP4 PUSH2 0x6C4 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x7C3 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x7A7 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x7D4 JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x809 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x822 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x843 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE 0x2A PUSH30 0xED71EFE6C7633C4842780D082E316A7E7F6EDE0E8A829F7D81230AA5E564 PUSH20 0x6F6C634300080400330000000000000000000000 ",
							"sourceMap": "1482:11772:4:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:5856:14",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:14",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "63:124:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "73:29:14",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "95:6:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "82:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "82:20:14"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "73:5:14"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "165:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "174:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "177:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "167:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "167:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "167:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "124:5:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "135:5:14"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "150:3:14",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "155:1:14",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "146:3:14"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "146:11:14"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "159:1:14",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "142:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "142:19:14"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "131:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "131:31:14"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "121:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "121:42:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "114:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "114:50:14"
															},
															"nodeType": "YulIf",
															"src": "111:2:14"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "42:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "53:5:14",
														"type": ""
													}
												],
												"src": "14:173:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "262:126:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "308:26:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "317:6:14"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "325:6:14"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "310:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "310:22:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "310:22:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "283:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "292:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "279:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "279:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "304:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "275:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "275:32:14"
															},
															"nodeType": "YulIf",
															"src": "272:2:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "343:39:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "372:9:14"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "353:18:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "353:29:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "343:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "228:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "239:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "251:6:14",
														"type": ""
													}
												],
												"src": "192:196:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "480:183:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "526:26:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "535:6:14"
																				},
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "543:6:14"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "528:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "528:22:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "528:22:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "501:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "510:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "497:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "497:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "522:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "493:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "493:32:14"
															},
															"nodeType": "YulIf",
															"src": "490:2:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "561:39:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "590:9:14"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "571:18:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "571:29:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "561:6:14"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "609:48:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "642:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "653:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "638:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "638:18:14"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "619:18:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "619:38:14"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "609:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "438:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "449:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "461:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "469:6:14",
														"type": ""
													}
												],
												"src": "393:270:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "772:234:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "818:26:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "827:6:14"
																				},
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "835:6:14"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "820:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "820:22:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "820:22:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "793:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "802:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "789:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "789:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "814:2:14",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "785:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "785:32:14"
															},
															"nodeType": "YulIf",
															"src": "782:2:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "853:39:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "882:9:14"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "863:18:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "863:29:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "853:6:14"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "901:48:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "934:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "945:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "930:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "930:18:14"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "911:18:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "911:38:14"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "901:6:14"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "958:42:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "985:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "996:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "981:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "981:18:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "968:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "968:32:14"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "958:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "722:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "733:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "745:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "753:6:14",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "761:6:14",
														"type": ""
													}
												],
												"src": "668:338:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1098:177:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1144:26:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1153:6:14"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1161:6:14"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1146:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1146:22:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1146:22:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1119:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1128:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1115:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1115:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1140:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1111:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1111:32:14"
															},
															"nodeType": "YulIf",
															"src": "1108:2:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1179:39:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1208:9:14"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1189:18:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1189:29:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1179:6:14"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1227:42:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1254:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1265:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1250:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1250:18:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1237:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1237:32:14"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1227:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1056:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1067:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1079:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1087:6:14",
														"type": ""
													}
												],
												"src": "1011:264:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1375:92:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1385:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1397:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1408:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1393:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1393:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1385:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1427:9:14"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "1452:6:14"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1445:6:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1445:14:14"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1438:6:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1438:22:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1420:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1420:41:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1420:41:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1344:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1355:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1366:4:14",
														"type": ""
													}
												],
												"src": "1280:187:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1593:482:14",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1603:12:14",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1613:2:14",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "1607:2:14",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1631:9:14"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1642:2:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1624:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1624:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1624:21:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1654:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1674:6:14"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1668:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1668:13:14"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "1658:6:14",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1701:9:14"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "1712:2:14"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1697:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1697:18:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1717:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1690:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1690:34:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1690:34:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1733:13:14",
															"value": {
																"name": "tail",
																"nodeType": "YulIdentifier",
																"src": "1742:4:14"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "1737:1:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1805:90:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "1834:9:14"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "1845:1:14"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1830:3:14"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1830:17:14"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1849:2:14",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "1826:3:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1826:26:14"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value0",
																											"nodeType": "YulIdentifier",
																											"src": "1868:6:14"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "1876:1:14"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "1864:3:14"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "1864:14:14"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "1880:2:14"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1860:3:14"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1860:23:14"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "1854:5:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1854:30:14"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1819:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1819:66:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1819:66:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "1766:1:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1769:6:14"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "1763:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1763:13:14"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "1777:19:14",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1779:15:14",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "1788:1:14"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "1791:2:14"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1784:3:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1784:10:14"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "1779:1:14"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "1759:3:14",
																"statements": []
															},
															"src": "1755:140:14"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1929:69:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "1958:9:14"
																								},
																								{
																									"name": "length",
																									"nodeType": "YulIdentifier",
																									"src": "1969:6:14"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1954:3:14"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1954:22:14"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1978:2:14",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "1950:3:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1950:31:14"
																				},
																				{
																					"name": "tail",
																					"nodeType": "YulIdentifier",
																					"src": "1983:4:14"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1943:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1943:45:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1943:45:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "1910:1:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1913:6:14"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1907:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1907:13:14"
															},
															"nodeType": "YulIf",
															"src": "1904:2:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2007:62:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2023:9:14"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "2042:6:14"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2050:2:14",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "2038:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2038:15:14"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2059:2:14",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "2055:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2055:7:14"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "2034:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2034:29:14"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2019:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2019:45:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2066:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2015:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2015:54:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2007:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1562:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1573:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1584:4:14",
														"type": ""
													}
												],
												"src": "1472:603:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2254:225:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2271:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2282:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2264:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2264:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2264:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2305:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2316:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2301:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2301:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2321:2:14",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2294:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2294:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2294:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2344:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2355:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2340:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2340:18:14"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2360:34:14",
																		"type": "",
																		"value": "ERC20: transfer to the zero addr"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2333:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2333:62:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2333:62:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2415:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2426:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2411:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2411:18:14"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2431:5:14",
																		"type": "",
																		"value": "ess"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2404:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2404:33:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2404:33:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2446:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2458:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2469:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2454:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2454:19:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2446:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2231:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2245:4:14",
														"type": ""
													}
												],
												"src": "2080:399:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2658:224:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2675:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2686:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2668:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2668:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2668:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2709:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2720:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2705:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2705:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2725:2:14",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2698:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2698:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2698:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2748:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2759:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2744:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2744:18:14"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2764:34:14",
																		"type": "",
																		"value": "ERC20: approve to the zero addre"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2737:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2737:62:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2737:62:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2819:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2830:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2815:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2815:18:14"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2835:4:14",
																		"type": "",
																		"value": "ss"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2808:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2808:32:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2808:32:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2849:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2861:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2872:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2857:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2857:19:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2849:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2635:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2649:4:14",
														"type": ""
													}
												],
												"src": "2484:398:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3061:179:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3078:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3089:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3071:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3071:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3071:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3112:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3123:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3108:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3108:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3128:2:14",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3101:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3101:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3101:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3151:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3162:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3147:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3147:18:14"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3167:31:14",
																		"type": "",
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3140:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3140:59:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3140:59:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3208:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3220:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3231:2:14",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3216:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3216:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3208:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3038:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3052:4:14",
														"type": ""
													}
												],
												"src": "2887:353:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3419:228:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3436:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3447:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3429:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3429:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3429:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3470:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3481:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3466:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3466:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3486:2:14",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3459:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3459:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3459:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3509:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3520:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3505:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3505:18:14"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3525:34:14",
																		"type": "",
																		"value": "ERC20: transfer amount exceeds b"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3498:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3498:62:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3498:62:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3580:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3591:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3576:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3576:18:14"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3596:8:14",
																		"type": "",
																		"value": "alance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3569:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3569:36:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3569:36:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3614:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3626:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3637:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3622:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3622:19:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3614:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3396:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3410:4:14",
														"type": ""
													}
												],
												"src": "3245:402:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3826:227:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3843:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3854:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3836:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3836:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3836:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3877:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3888:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3873:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3873:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3893:2:14",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3866:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3866:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3866:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3916:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3927:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3912:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3912:18:14"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3932:34:14",
																		"type": "",
																		"value": "ERC20: transfer from the zero ad"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3905:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3905:62:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3905:62:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3987:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3998:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3983:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3983:18:14"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4003:7:14",
																		"type": "",
																		"value": "dress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3976:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3976:35:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3976:35:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4020:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4032:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4043:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4028:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4028:19:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4020:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3803:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3817:4:14",
														"type": ""
													}
												],
												"src": "3652:401:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4232:226:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4249:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4260:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4242:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4242:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4242:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4283:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4294:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4279:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4279:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4299:2:14",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4272:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4272:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4272:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4322:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4333:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4318:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4318:18:14"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4338:34:14",
																		"type": "",
																		"value": "ERC20: approve from the zero add"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4311:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4311:62:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4311:62:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4393:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4404:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4389:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4389:18:14"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4409:6:14",
																		"type": "",
																		"value": "ress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4382:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4382:34:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4382:34:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4425:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4437:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4448:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4433:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4433:19:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4425:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4209:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4223:4:14",
														"type": ""
													}
												],
												"src": "4058:400:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4637:227:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4654:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4665:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4647:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4647:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4647:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4688:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4699:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4684:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4684:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4704:2:14",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4677:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4677:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4677:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4727:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4738:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4723:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4723:18:14"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4743:34:14",
																		"type": "",
																		"value": "ERC20: decreased allowance below"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4716:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4716:62:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4716:62:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4798:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4809:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4794:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4794:18:14"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4814:7:14",
																		"type": "",
																		"value": " zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4787:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4787:35:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4787:35:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4831:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4843:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4854:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4839:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4839:19:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4831:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4614:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4628:4:14",
														"type": ""
													}
												],
												"src": "4463:401:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4970:76:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4980:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4992:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5003:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4988:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4988:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4980:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5022:9:14"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5033:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5015:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5015:25:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5015:25:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4939:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4950:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4961:4:14",
														"type": ""
													}
												],
												"src": "4869:177:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5148:87:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5158:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5170:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5181:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5166:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5166:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5158:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5200:9:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "5215:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5223:4:14",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5211:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5211:17:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5193:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5193:36:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5193:36:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5117:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5128:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5139:4:14",
														"type": ""
													}
												],
												"src": "5051:184:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5288:181:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5323:115:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "sum",
																					"nodeType": "YulIdentifier",
																					"src": "5344:3:14"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5353:3:14",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5358:10:14",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "5349:3:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5349:20:14"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5337:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5337:33:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5337:33:14"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5390:1:14",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5393:4:14",
																					"type": "",
																					"value": "0x11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5383:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5383:15:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5383:15:14"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "sum",
																					"nodeType": "YulIdentifier",
																					"src": "5418:3:14"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5423:4:14",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5411:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5411:17:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5411:17:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "5304:1:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "5311:1:14"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "5307:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5307:6:14"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5301:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5301:13:14"
															},
															"nodeType": "YulIf",
															"src": "5298:2:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5447:16:14",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "5458:1:14"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "5461:1:14"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5454:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5454:9:14"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "5447:3:14"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "5271:1:14",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "5274:1:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "5280:3:14",
														"type": ""
													}
												],
												"src": "5240:229:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5529:325:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5539:22:14",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5553:1:14",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "5556:4:14"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5549:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5549:12:14"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "5539:6:14"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5570:38:14",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "5600:4:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5606:1:14",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "5596:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5596:12:14"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "5574:18:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5647:31:14",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "5649:27:14",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "5663:6:14"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5671:4:14",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "5659:3:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5659:17:14"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "5649:6:14"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "5627:18:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "5620:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5620:26:14"
															},
															"nodeType": "YulIf",
															"src": "5617:2:14"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5737:111:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5758:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5765:3:14",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5770:10:14",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "5761:3:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5761:20:14"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5751:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5751:31:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5751:31:14"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5802:1:14",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5805:4:14",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5795:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5795:15:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5795:15:14"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5830:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5833:4:14",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5823:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5823:15:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5823:15:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "5693:18:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "5716:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5724:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "5713:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5713:14:14"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "5690:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5690:38:14"
															},
															"nodeType": "YulIf",
															"src": "5687:2:14"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "5509:4:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "5518:6:14",
														"type": ""
													}
												],
												"src": "5474:380:14"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value1, value1) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value2, value2) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := tail\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 64), tail)\n        }\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y))\n        {\n            mstore(sum, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(sum, 0x24)\n        }\n        sum := add(x, y)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}",
									"id": 14,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101a0565b6040516100c39190610797565b60405180910390f35b6100df6100da36600461076e565b610232565b60405190151581526020016100c3565b6035545b6040519081526020016100c3565b6100df61010f366004610733565b61024a565b604051601281526020016100c3565b6100df61013136600461076e565b61026e565b6100f36101443660046106e0565b6001600160a01b031660009081526033602052604090205490565b6100b6610290565b6100df61017536600461076e565b61029f565b6100df61018836600461076e565b61031f565b6100f361019b366004610701565b61032d565b6060603680546101af9061080e565b80601f01602080910402602001604051908101604052809291908181526020018280546101db9061080e565b80156102285780601f106101fd57610100808354040283529160200191610228565b820191906000526020600020905b81548152906001019060200180831161020b57829003601f168201915b5050505050905090565b600033610240818585610358565b5060019392505050565b60003361025885828561047c565b6102638585856104f6565b506001949350505050565b600033610240818585610281838361032d565b61028b91906107ea565b610358565b6060603780546101af9061080e565b600033816102ad828661032d565b9050838110156103125760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102638286868403610358565b6000336102408185856104f6565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6001600160a01b0383166103ba5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610309565b6001600160a01b03821661041b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610309565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610488848461032d565b905060001981146104f057818110156104e35760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610309565b6104f08484848403610358565b50505050565b6001600160a01b03831661055a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610309565b6001600160a01b0382166105bc5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610309565b6001600160a01b038316600090815260336020526040902054818110156106345760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610309565b6001600160a01b0380851660009081526033602052604080822085850390559185168152908120805484929061066b9084906107ea565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106b791815260200190565b60405180910390a36104f0565b80356001600160a01b03811681146106db57600080fd5b919050565b6000602082840312156106f1578081fd5b6106fa826106c4565b9392505050565b60008060408385031215610713578081fd5b61071c836106c4565b915061072a602084016106c4565b90509250929050565b600080600060608486031215610747578081fd5b610750846106c4565b925061075e602085016106c4565b9150604084013590509250925092565b60008060408385031215610780578182fd5b610789836106c4565b946020939093013593505050565b6000602080835283518082850152825b818110156107c3578581018301518582016040015282016107a7565b818111156107d45783604083870101525b50601f01601f1916929092016040019392505050565b6000821982111561080957634e487b7160e01b81526011600452602481fd5b500190565b600181811c9082168061082257607f821691505b6020821081141561084357634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212200e2a7ded71efe6c7633c4842780d082e316a7e7f6ede0e8a829f7d81230aa5e564736f6c63430008040033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x1A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x797 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x76E JUMP JUMPDEST PUSH2 0x232 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x35 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x733 JUMP JUMPDEST PUSH2 0x24A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x131 CALLDATASIZE PUSH1 0x4 PUSH2 0x76E JUMP JUMPDEST PUSH2 0x26E JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x144 CALLDATASIZE PUSH1 0x4 PUSH2 0x6E0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x290 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x76E JUMP JUMPDEST PUSH2 0x29F JUMP JUMPDEST PUSH2 0xDF PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0x76E JUMP JUMPDEST PUSH2 0x31F JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x19B CALLDATASIZE PUSH1 0x4 PUSH2 0x701 JUMP JUMPDEST PUSH2 0x32D JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x80E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1DB SWAP1 PUSH2 0x80E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x228 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1FD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x228 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x20B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x358 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x258 DUP6 DUP3 DUP6 PUSH2 0x47C JUMP JUMPDEST PUSH2 0x263 DUP6 DUP6 DUP6 PUSH2 0x4F6 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x281 DUP4 DUP4 PUSH2 0x32D JUMP JUMPDEST PUSH2 0x28B SWAP2 SWAP1 PUSH2 0x7EA JUMP JUMPDEST PUSH2 0x358 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x80E JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x2AD DUP3 DUP7 PUSH2 0x32D JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x312 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x263 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x358 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x4F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3BA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x41B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x488 DUP5 DUP5 PUSH2 0x32D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x4F0 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x4E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x309 JUMP JUMPDEST PUSH2 0x4F0 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x358 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x55A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x634 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x66B SWAP1 DUP5 SWAP1 PUSH2 0x7EA JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x6B7 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x4F0 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x6DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6F1 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x6FA DUP3 PUSH2 0x6C4 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x713 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x71C DUP4 PUSH2 0x6C4 JUMP JUMPDEST SWAP2 POP PUSH2 0x72A PUSH1 0x20 DUP5 ADD PUSH2 0x6C4 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x747 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x750 DUP5 PUSH2 0x6C4 JUMP JUMPDEST SWAP3 POP PUSH2 0x75E PUSH1 0x20 DUP6 ADD PUSH2 0x6C4 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x780 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x789 DUP4 PUSH2 0x6C4 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x7C3 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x7A7 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x7D4 JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x809 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x822 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x843 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE 0x2A PUSH30 0xED71EFE6C7633C4842780D082E316A7E7F6EDE0E8A829F7D81230AA5E564 PUSH20 0x6F6C634300080400330000000000000000000000 ",
							"sourceMap": "1482:11772:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2493:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4770:197;;;;;;:::i;:::-;;:::i;:::-;;;1445:14:14;;1438:22;1420:41;;1408:2;1393:18;4770:197:4;1375:92:14;3581:106:4;3668:12;;3581:106;;;5015:25:14;;;5003:2;4988:18;3581:106:4;4970:76:14;5529:286:4;;;;;;:::i;:::-;;:::i;3430:91::-;;;3512:2;5193:36:14;;5181:2;5166:18;3430:91:4;5148:87:14;6210:234:4;;;;;;:::i;:::-;;:::i;3745:125::-;;;;;;:::i;:::-;-1:-1:-1;;;;;3845:18:4;3819:7;3845:18;;;:9;:18;;;;;;;3745:125;2704:102;;;:::i;6931:427::-;;;;;;:::i;:::-;;:::i;4066:189::-;;;;;;:::i;:::-;;:::i;4313:149::-;;;;;;:::i;:::-;;:::i;2493:98::-;2547:13;2579:5;2572:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2493:98;:::o;4770:197::-;4853:4;929:10:10;4907:32:4;929:10:10;4923:7:4;4932:6;4907:8;:32::i;:::-;-1:-1:-1;4956:4:4;;4770:197;-1:-1:-1;;;4770:197:4:o;5529:286::-;5656:4;929:10:10;5712:38:4;5728:4;929:10:10;5743:6:4;5712:15;:38::i;:::-;5760:27;5770:4;5776:2;5780:6;5760:9;:27::i;:::-;-1:-1:-1;5804:4:4;;5529:286;-1:-1:-1;;;;5529:286:4:o;6210:234::-;6298:4;929:10:10;6352:64:4;929:10:10;6368:7:4;6405:10;6377:25;929:10:10;6368:7:4;6377:9;:25::i;:::-;:38;;;;:::i;:::-;6352:8;:64::i;2704:102::-;2760:13;2792:7;2785:14;;;;;:::i;6931:427::-;7024:4;929:10:10;7024:4:4;7105:25;929:10:10;7122:7:4;7105:9;:25::i;:::-;7078:52;;7168:15;7148:16;:35;;7140:85;;;;-1:-1:-1;;;7140:85:4;;4665:2:14;7140:85:4;;;4647:21:14;4704:2;4684:18;;;4677:30;4743:34;4723:18;;;4716:62;-1:-1:-1;;;4794:18:14;;;4787:35;4839:19;;7140:85:4;;;;;;;;;7259:60;7268:5;7275:7;7303:15;7284:16;:34;7259:8;:60::i;4066:189::-;4145:4;929:10:10;4199:28:4;929:10:10;4216:2:4;4220:6;4199:9;:28::i;4313:149::-;-1:-1:-1;;;;;4428:18:4;;;4402:7;4428:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;4313:149::o;10456:370::-;-1:-1:-1;;;;;10587:19:4;;10579:68;;;;-1:-1:-1;;;10579:68:4;;4260:2:14;10579:68:4;;;4242:21:14;4299:2;4279:18;;;4272:30;4338:34;4318:18;;;4311:62;-1:-1:-1;;;4389:18:14;;;4382:34;4433:19;;10579:68:4;4232:226:14;10579:68:4;-1:-1:-1;;;;;10665:21:4;;10657:68;;;;-1:-1:-1;;;10657:68:4;;2686:2:14;10657:68:4;;;2668:21:14;2725:2;2705:18;;;2698:30;2764:34;2744:18;;;2737:62;-1:-1:-1;;;2815:18:14;;;2808:32;2857:19;;10657:68:4;2658:224:14;10657:68:4;-1:-1:-1;;;;;10736:18:4;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10787:32;;5015:25:14;;;10787:32:4;;4988:18:14;10787:32:4;;;;;;;10456:370;;;:::o;11107:441::-;11237:24;11264:25;11274:5;11281:7;11264:9;:25::i;:::-;11237:52;;-1:-1:-1;;11303:16:4;:37;11299:243;;11384:6;11364:16;:26;;11356:68;;;;-1:-1:-1;;;11356:68:4;;3089:2:14;11356:68:4;;;3071:21:14;3128:2;3108:18;;;3101:30;3167:31;3147:18;;;3140:59;3216:18;;11356:68:4;3061:179:14;11356:68:4;11466:51;11475:5;11482:7;11510:6;11491:16;:25;11466:8;:51::i;:::-;11107:441;;;;:::o;7821:651::-;-1:-1:-1;;;;;7947:18:4;;7939:68;;;;-1:-1:-1;;;7939:68:4;;3854:2:14;7939:68:4;;;3836:21:14;3893:2;3873:18;;;3866:30;3932:34;3912:18;;;3905:62;-1:-1:-1;;;3983:18:14;;;3976:35;4028:19;;7939:68:4;3826:227:14;7939:68:4;-1:-1:-1;;;;;8025:16:4;;8017:64;;;;-1:-1:-1;;;8017:64:4;;2282:2:14;8017:64:4;;;2264:21:14;2321:2;2301:18;;;2294:30;2360:34;2340:18;;;2333:62;-1:-1:-1;;;2411:18:14;;;2404:33;2454:19;;8017:64:4;2254:225:14;8017:64:4;-1:-1:-1;;;;;8163:15:4;;8141:19;8163:15;;;:9;:15;;;;;;8196:21;;;;8188:72;;;;-1:-1:-1;;;8188:72:4;;3447:2:14;8188:72:4;;;3429:21:14;3486:2;3466:18;;;3459:30;3525:34;3505:18;;;3498:62;-1:-1:-1;;;3576:18:14;;;3569:36;3622:19;;8188:72:4;3419:228:14;8188:72:4;-1:-1:-1;;;;;8294:15:4;;;;;;;:9;:15;;;;;;8312:20;;;8294:38;;8352:13;;;;;;;;:23;;8326:6;;8294:15;8352:23;;8326:6;;8352:23;:::i;:::-;;;;;;;;8406:2;-1:-1:-1;;;;;8391:26:4;8400:4;-1:-1:-1;;;;;8391:26:4;;8410:6;8391:26;;;;5015:25:14;;5003:2;4988:18;;4970:76;8391:26:4;;;;;;;;8428:37;12132:121;14:173:14;82:20;;-1:-1:-1;;;;;131:31:14;;121:42;;111:2;;177:1;174;167:12;111:2;63:124;;;:::o;192:196::-;251:6;304:2;292:9;283:7;279:23;275:32;272:2;;;325:6;317;310:22;272:2;353:29;372:9;353:29;:::i;:::-;343:39;262:126;-1:-1:-1;;;262:126:14:o;393:270::-;461:6;469;522:2;510:9;501:7;497:23;493:32;490:2;;;543:6;535;528:22;490:2;571:29;590:9;571:29;:::i;:::-;561:39;;619:38;653:2;642:9;638:18;619:38;:::i;:::-;609:48;;480:183;;;;;:::o;668:338::-;745:6;753;761;814:2;802:9;793:7;789:23;785:32;782:2;;;835:6;827;820:22;782:2;863:29;882:9;863:29;:::i;:::-;853:39;;911:38;945:2;934:9;930:18;911:38;:::i;:::-;901:48;;996:2;985:9;981:18;968:32;958:42;;772:234;;;;;:::o;1011:264::-;1079:6;1087;1140:2;1128:9;1119:7;1115:23;1111:32;1108:2;;;1161:6;1153;1146:22;1108:2;1189:29;1208:9;1189:29;:::i;:::-;1179:39;1265:2;1250:18;;;;1237:32;;-1:-1:-1;;;1098:177:14:o;1472:603::-;1584:4;1613:2;1642;1631:9;1624:21;1674:6;1668:13;1717:6;1712:2;1701:9;1697:18;1690:34;1742:4;1755:140;1769:6;1766:1;1763:13;1755:140;;;1864:14;;;1860:23;;1854:30;1830:17;;;1849:2;1826:26;1819:66;1784:10;;1755:140;;;1913:6;1910:1;1907:13;1904:2;;;1983:4;1978:2;1969:6;1958:9;1954:22;1950:31;1943:45;1904:2;-1:-1:-1;2059:2:14;2038:15;-1:-1:-1;;2034:29:14;2019:45;;;;2066:2;2015:54;;1593:482;-1:-1:-1;;;1593:482:14:o;5240:229::-;5280:3;5311:1;5307:6;5304:1;5301:13;5298:2;;;-1:-1:-1;;;5337:33:14;;5393:4;5390:1;5383:15;5423:4;5344:3;5411:17;5298:2;-1:-1:-1;5454:9:14;;5288:181::o;5474:380::-;5553:1;5549:12;;;;5596;;;5617:2;;5671:4;5663:6;5659:17;5649:27;;5617:2;5724;5716:6;5713:14;5693:18;5690:38;5687:2;;;5770:10;5765:3;5761:20;5758:1;5751:31;5805:4;5802:1;5795:15;5833:4;5830:1;5823:15;5687:2;;5529:325;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "435000",
								"executionCost": "468",
								"totalCost": "435468"
							},
							"external": {
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "22524",
								"balanceOf(address)": "1259",
								"decimals()": "266",
								"decreaseAllowance(address,uint256)": "23616",
								"increaseAllowance(address,uint256)": "23578",
								"name()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "1026",
								"transfer(address,uint256)": "44464",
								"transferFrom(address,address,uint256)": "infinite"
							},
							"internal": {
								"__ERC20_init(string memory,string memory)": "infinite",
								"__ERC20_init_unchained(string memory,string memory)": "infinite",
								"_afterTokenTransfer(address,address,uint256)": "infinite",
								"_approve(address,address,uint256)": "infinite",
								"_beforeTokenTransfer(address,address,uint256)": "infinite",
								"_burn(address,uint256)": "infinite",
								"_mint(address,uint256)": "infinite",
								"_spendAllowance(address,address,uint256)": "infinite",
								"_transfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1482,
									"end": 13254,
									"name": "PUSH",
									"source": 4,
									"value": "80"
								},
								{
									"begin": 1482,
									"end": 13254,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 1482,
									"end": 13254,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 1482,
									"end": 13254,
									"name": "CALLVALUE",
									"source": 4
								},
								{
									"begin": 1482,
									"end": 13254,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 1482,
									"end": 13254,
									"name": "ISZERO",
									"source": 4
								},
								{
									"begin": 1482,
									"end": 13254,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 1482,
									"end": 13254,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 1482,
									"end": 13254,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 1482,
									"end": 13254,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 1482,
									"end": 13254,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 1482,
									"end": 13254,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 1482,
									"end": 13254,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 1482,
									"end": 13254,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 1482,
									"end": 13254,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1482,
									"end": 13254,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 1482,
									"end": 13254,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1482,
									"end": 13254,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 1482,
									"end": 13254,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 1482,
									"end": 13254,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 1482,
									"end": 13254,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212200e2a7ded71efe6c7633c4842780d082e316a7e7f6ede0e8a829f7d81230aa5e564736f6c63430008040033",
									".code": [
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "CALLVALUE",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "tag",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "CALLDATALOAD",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH",
											"source": 4,
											"value": "E0"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "SHR",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH",
											"source": 4,
											"value": "39509351"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "14"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH",
											"source": 4,
											"value": "39509351"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "8"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH",
											"source": 4,
											"value": "70A08231"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "9"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH",
											"source": 4,
											"value": "95D89B41"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "10"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH",
											"source": 4,
											"value": "A457C2D7"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "11"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH",
											"source": 4,
											"value": "A9059CBB"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "12"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH",
											"source": 4,
											"value": "DD62ED3E"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "13"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "tag",
											"source": 4,
											"value": "14"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH",
											"source": 4,
											"value": "6FDDE03"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH",
											"source": 4,
											"value": "95EA7B3"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH",
											"source": 4,
											"value": "18160DDD"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "5"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH",
											"source": 4,
											"value": "23B872DD"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "6"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH",
											"source": 4,
											"value": "313CE567"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "7"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "tag",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1482,
											"end": 13254,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "tag",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "15"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "16"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "tag",
											"source": 4,
											"value": "15"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "17"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "18"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "tag",
											"source": 4,
											"value": "17"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "RETURN",
											"source": 4
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "tag",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "19"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "21"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "tag",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "22"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "tag",
											"source": 4,
											"value": "19"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 1445,
											"end": 1459,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1445,
											"end": 1459,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1438,
											"end": 1460,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1420,
											"end": 1461,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1420,
											"end": 1461,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1408,
											"end": 1410,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1393,
											"end": 1411,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "17"
										},
										{
											"begin": 1375,
											"end": 1467,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "tag",
											"source": 4,
											"value": "5"
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3668,
											"end": 3680,
											"name": "PUSH",
											"source": 4,
											"value": "35"
										},
										{
											"begin": 3668,
											"end": 3680,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "tag",
											"source": 4,
											"value": "25"
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5015,
											"end": 5040,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5015,
											"end": 5040,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5015,
											"end": 5040,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5003,
											"end": 5005,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4988,
											"end": 5006,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "17"
										},
										{
											"begin": 4970,
											"end": 5046,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "tag",
											"source": 4,
											"value": "6"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "19"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "30"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "31"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "tag",
											"source": 4,
											"value": "30"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "32"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 3430,
											"end": 3521,
											"name": "tag",
											"source": 4,
											"value": "7"
										},
										{
											"begin": 3430,
											"end": 3521,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3430,
											"end": 3521,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3430,
											"end": 3521,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 3512,
											"end": 3514,
											"name": "PUSH",
											"source": 4,
											"value": "12"
										},
										{
											"begin": 5193,
											"end": 5229,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5193,
											"end": 5229,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5181,
											"end": 5183,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 5166,
											"end": 5184,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3430,
											"end": 3521,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "17"
										},
										{
											"begin": 5148,
											"end": 5235,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "tag",
											"source": 4,
											"value": "8"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "19"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "39"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "21"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "tag",
											"source": 4,
											"value": "39"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "tag",
											"source": 4,
											"value": "9"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "25"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "43"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "44"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "tag",
											"source": 4,
											"value": "43"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3819,
											"end": 3826,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3845,
											"end": 3854,
											"name": "PUSH",
											"source": 4,
											"value": "33"
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "tag",
											"source": 4,
											"value": "10"
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "15"
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "48"
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "tag",
											"source": 4,
											"value": "11"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "19"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "51"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "21"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "tag",
											"source": 4,
											"value": "51"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "52"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "tag",
											"source": 4,
											"value": "12"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "19"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "55"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "21"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "tag",
											"source": 4,
											"value": "55"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "56"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "tag",
											"source": 4,
											"value": "13"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "25"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "59"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "tag",
											"source": 4,
											"value": "59"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "61"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "tag",
											"source": 4,
											"value": "16"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2547,
											"end": 2560,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 2579,
											"end": 2584,
											"name": "PUSH",
											"source": 4,
											"value": "36"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "64"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "65"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "tag",
											"source": 4,
											"value": "64"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "66"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "65"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "tag",
											"source": 4,
											"value": "66"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "67"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "68"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "67"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "tag",
											"source": 4,
											"value": "68"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "tag",
											"source": 4,
											"value": "69"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "69"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "tag",
											"source": 4,
											"value": "67"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "tag",
											"source": 4,
											"value": "22"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4853,
											"end": 4857,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 4907,
											"end": 4939,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "73"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4923,
											"end": 4930,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 4932,
											"end": 4938,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 4907,
											"end": 4915,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "74"
										},
										{
											"begin": 4907,
											"end": 4939,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4907,
											"end": 4939,
											"name": "tag",
											"source": 4,
											"value": "73"
										},
										{
											"begin": 4907,
											"end": 4939,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4956,
											"end": 4960,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 4956,
											"end": 4960,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "tag",
											"source": 4,
											"value": "32"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5656,
											"end": 5660,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 5712,
											"end": 5750,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "78"
										},
										{
											"begin": 5728,
											"end": 5732,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5743,
											"end": 5749,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 5712,
											"end": 5727,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "79"
										},
										{
											"begin": 5712,
											"end": 5750,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 5712,
											"end": 5750,
											"name": "tag",
											"source": 4,
											"value": "78"
										},
										{
											"begin": 5712,
											"end": 5750,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5760,
											"end": 5787,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 5770,
											"end": 5774,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 5776,
											"end": 5778,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 5780,
											"end": 5786,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 5760,
											"end": 5769,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "81"
										},
										{
											"begin": 5760,
											"end": 5787,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 5760,
											"end": 5787,
											"name": "tag",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 5760,
											"end": 5787,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5804,
											"end": 5808,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 5804,
											"end": 5808,
											"name": "SWAP5",
											"source": 4
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "tag",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6298,
											"end": 6302,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 6352,
											"end": 6416,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "73"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6368,
											"end": 6375,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 6405,
											"end": 6415,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 6377,
											"end": 6402,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "86"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 6368,
											"end": 6375,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 6377,
											"end": 6386,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "61"
										},
										{
											"begin": 6377,
											"end": 6402,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 6377,
											"end": 6402,
											"name": "tag",
											"source": 4,
											"value": "86"
										},
										{
											"begin": 6377,
											"end": 6402,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6377,
											"end": 6415,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "87"
										},
										{
											"begin": 6377,
											"end": 6415,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6377,
											"end": 6415,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6377,
											"end": 6415,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "88"
										},
										{
											"begin": 6377,
											"end": 6415,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 6377,
											"end": 6415,
											"name": "tag",
											"source": 4,
											"value": "87"
										},
										{
											"begin": 6377,
											"end": 6415,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6352,
											"end": 6360,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "74"
										},
										{
											"begin": 6352,
											"end": 6416,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "tag",
											"source": 4,
											"value": "48"
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2760,
											"end": 2773,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 2792,
											"end": 2799,
											"name": "PUSH",
											"source": 4,
											"value": "37"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "64"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "65"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "tag",
											"source": 4,
											"value": "52"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7024,
											"end": 7028,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 7024,
											"end": 7028,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7105,
											"end": 7130,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "98"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7122,
											"end": 7129,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 7105,
											"end": 7114,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "61"
										},
										{
											"begin": 7105,
											"end": 7130,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 7105,
											"end": 7130,
											"name": "tag",
											"source": 4,
											"value": "98"
										},
										{
											"begin": 7105,
											"end": 7130,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7078,
											"end": 7130,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7078,
											"end": 7130,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7168,
											"end": 7183,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 7148,
											"end": 7164,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7148,
											"end": 7183,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 7148,
											"end": 7183,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "99"
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4665,
											"end": 4667,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4647,
											"end": 4668,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4704,
											"end": 4706,
											"name": "PUSH",
											"source": 14,
											"value": "25"
										},
										{
											"begin": 4684,
											"end": 4702,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 4684,
											"end": 4702,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4684,
											"end": 4702,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4677,
											"end": 4707,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4743,
											"end": 4777,
											"name": "PUSH",
											"source": 14,
											"value": "45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
										},
										{
											"begin": 4723,
											"end": 4741,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 4723,
											"end": 4741,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4723,
											"end": 4741,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4716,
											"end": 4778,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "207A65726F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4794,
											"end": 4812,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 4794,
											"end": 4812,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4794,
											"end": 4812,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4787,
											"end": 4822,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4839,
											"end": 4858,
											"name": "PUSH",
											"source": 14,
											"value": "84"
										},
										{
											"begin": 4839,
											"end": 4858,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "tag",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "tag",
											"source": 4,
											"value": "99"
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7259,
											"end": 7319,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 7268,
											"end": 7273,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7275,
											"end": 7282,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 7303,
											"end": 7318,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 7284,
											"end": 7300,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 7284,
											"end": 7318,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 7259,
											"end": 7267,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "74"
										},
										{
											"begin": 7259,
											"end": 7319,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "tag",
											"source": 4,
											"value": "56"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4145,
											"end": 4149,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 4199,
											"end": 4227,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "73"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4216,
											"end": 4218,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 4220,
											"end": 4226,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 4199,
											"end": 4208,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "81"
										},
										{
											"begin": 4199,
											"end": 4227,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "tag",
											"source": 4,
											"value": "61"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 4402,
											"end": 4409,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4439,
											"name": "PUSH",
											"source": 4,
											"value": "34"
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "SWAP5",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 10456,
											"end": 10826,
											"name": "tag",
											"source": 4,
											"value": "74"
										},
										{
											"begin": 10456,
											"end": 10826,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10587,
											"end": 10606,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 10587,
											"end": 10606,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "109"
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4260,
											"end": 4262,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4242,
											"end": 4263,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4299,
											"end": 4301,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 4279,
											"end": 4297,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 4279,
											"end": 4297,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4279,
											"end": 4297,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4272,
											"end": 4302,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4338,
											"end": 4372,
											"name": "PUSH",
											"source": 14,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 4318,
											"end": 4336,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 4318,
											"end": 4336,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4318,
											"end": 4336,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4311,
											"end": 4373,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "72657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4389,
											"end": 4407,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 4389,
											"end": 4407,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4389,
											"end": 4407,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4382,
											"end": 4416,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4433,
											"end": 4452,
											"name": "PUSH",
											"source": 14,
											"value": "84"
										},
										{
											"begin": 4433,
											"end": 4452,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 4232,
											"end": 4458,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "tag",
											"source": 4,
											"value": "109"
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10665,
											"end": 10686,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 10665,
											"end": 10686,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "112"
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2686,
											"end": 2688,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2668,
											"end": 2689,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 2725,
											"end": 2727,
											"name": "PUSH",
											"source": 14,
											"value": "22"
										},
										{
											"begin": 2705,
											"end": 2723,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 2705,
											"end": 2723,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2705,
											"end": 2723,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2698,
											"end": 2728,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 2764,
											"end": 2798,
											"name": "PUSH",
											"source": 14,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 2744,
											"end": 2762,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 2744,
											"end": 2762,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2744,
											"end": 2762,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2737,
											"end": 2799,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2815,
											"end": 2833,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 2815,
											"end": 2833,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2815,
											"end": 2833,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2808,
											"end": 2840,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 2857,
											"end": 2876,
											"name": "PUSH",
											"source": 14,
											"value": "84"
										},
										{
											"begin": 2857,
											"end": 2876,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 2658,
											"end": 2882,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "tag",
											"source": 4,
											"value": "112"
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10747,
											"name": "PUSH",
											"source": 4,
											"value": "34"
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10763,
											"name": "SWAP5",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10763,
											"name": "DUP8",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10763,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10763,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10763,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10763,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10763,
											"name": "SWAP5",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10763,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10763,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10763,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10763,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10763,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10763,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10772,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10772,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10772,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5015,
											"end": 5040,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 5015,
											"end": 5040,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5015,
											"end": 5040,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "PUSH",
											"source": 4,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 4988,
											"end": 5006,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "LOG3",
											"source": 4
										},
										{
											"begin": 10456,
											"end": 10826,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 10456,
											"end": 10826,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 10456,
											"end": 10826,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 10456,
											"end": 10826,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 11107,
											"end": 11548,
											"name": "tag",
											"source": 4,
											"value": "79"
										},
										{
											"begin": 11107,
											"end": 11548,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 11237,
											"end": 11261,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 11264,
											"end": 11289,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "117"
										},
										{
											"begin": 11274,
											"end": 11279,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 11281,
											"end": 11288,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 11264,
											"end": 11273,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "61"
										},
										{
											"begin": 11264,
											"end": 11289,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 11264,
											"end": 11289,
											"name": "tag",
											"source": 4,
											"value": "117"
										},
										{
											"begin": 11264,
											"end": 11289,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 11237,
											"end": 11289,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 11237,
											"end": 11289,
											"name": "POP",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 11303,
											"end": 11319,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 11303,
											"end": 11340,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 11299,
											"end": 11542,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "122"
										},
										{
											"begin": 11299,
											"end": 11542,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 11384,
											"end": 11390,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 11364,
											"end": 11380,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 11364,
											"end": 11390,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 11364,
											"end": 11390,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "119"
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3089,
											"end": 3091,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3071,
											"end": 3092,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3128,
											"end": 3130,
											"name": "PUSH",
											"source": 14,
											"value": "1D"
										},
										{
											"begin": 3108,
											"end": 3126,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 3108,
											"end": 3126,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3108,
											"end": 3126,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3101,
											"end": 3131,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3167,
											"end": 3198,
											"name": "PUSH",
											"source": 14,
											"value": "45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000"
										},
										{
											"begin": 3147,
											"end": 3165,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 3147,
											"end": 3165,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3147,
											"end": 3165,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3140,
											"end": 3199,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3216,
											"end": 3234,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 3216,
											"end": 3234,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 3061,
											"end": 3240,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "tag",
											"source": 4,
											"value": "119"
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 11466,
											"end": 11517,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "122"
										},
										{
											"begin": 11475,
											"end": 11480,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 11482,
											"end": 11489,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 11510,
											"end": 11516,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 11491,
											"end": 11507,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 11491,
											"end": 11516,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 11466,
											"end": 11474,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "74"
										},
										{
											"begin": 11466,
											"end": 11517,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 11466,
											"end": 11517,
											"name": "tag",
											"source": 4,
											"value": "122"
										},
										{
											"begin": 11466,
											"end": 11517,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 11107,
											"end": 11548,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 11107,
											"end": 11548,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 11107,
											"end": 11548,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 11107,
											"end": 11548,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 11107,
											"end": 11548,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 7821,
											"end": 8472,
											"name": "tag",
											"source": 4,
											"value": "81"
										},
										{
											"begin": 7821,
											"end": 8472,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7947,
											"end": 7965,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 7947,
											"end": 7965,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "124"
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3854,
											"end": 3856,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3836,
											"end": 3857,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3893,
											"end": 3895,
											"name": "PUSH",
											"source": 14,
											"value": "25"
										},
										{
											"begin": 3873,
											"end": 3891,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 3873,
											"end": 3891,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3873,
											"end": 3891,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3866,
											"end": 3896,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3932,
											"end": 3966,
											"name": "PUSH",
											"source": 14,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 3912,
											"end": 3930,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 3912,
											"end": 3930,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3912,
											"end": 3930,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3905,
											"end": 3967,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3983,
											"end": 4001,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 3983,
											"end": 4001,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3983,
											"end": 4001,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3976,
											"end": 4011,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4028,
											"end": 4047,
											"name": "PUSH",
											"source": 14,
											"value": "84"
										},
										{
											"begin": 4028,
											"end": 4047,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 3826,
											"end": 4053,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "tag",
											"source": 4,
											"value": "124"
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8025,
											"end": 8041,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8041,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "127"
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2282,
											"end": 2284,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2264,
											"end": 2285,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 2321,
											"end": 2323,
											"name": "PUSH",
											"source": 14,
											"value": "23"
										},
										{
											"begin": 2301,
											"end": 2319,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 2301,
											"end": 2319,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2301,
											"end": 2319,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2294,
											"end": 2324,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 2360,
											"end": 2394,
											"name": "PUSH",
											"source": 14,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 2340,
											"end": 2358,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 2340,
											"end": 2358,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2340,
											"end": 2358,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2333,
											"end": 2395,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2411,
											"end": 2429,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 2411,
											"end": 2429,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2411,
											"end": 2429,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2404,
											"end": 2437,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 2454,
											"end": 2473,
											"name": "PUSH",
											"source": 14,
											"value": "84"
										},
										{
											"begin": 2454,
											"end": 2473,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 2254,
											"end": 2479,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "tag",
											"source": 4,
											"value": "127"
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8163,
											"end": 8178,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 8163,
											"end": 8178,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 8141,
											"end": 8160,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 8163,
											"end": 8178,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8163,
											"end": 8178,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8163,
											"end": 8178,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8163,
											"end": 8172,
											"name": "PUSH",
											"source": 4,
											"value": "33"
										},
										{
											"begin": 8163,
											"end": 8178,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 8163,
											"end": 8178,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8163,
											"end": 8178,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8163,
											"end": 8178,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8163,
											"end": 8178,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 8163,
											"end": 8178,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 8196,
											"end": 8217,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8196,
											"end": 8217,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8196,
											"end": 8217,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 8196,
											"end": 8217,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "132"
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3447,
											"end": 3449,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3429,
											"end": 3450,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3486,
											"end": 3488,
											"name": "PUSH",
											"source": 14,
											"value": "26"
										},
										{
											"begin": 3466,
											"end": 3484,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 3466,
											"end": 3484,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3466,
											"end": 3484,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3459,
											"end": 3489,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3525,
											"end": 3559,
											"name": "PUSH",
											"source": 14,
											"value": "45524332303A207472616E7366657220616D6F756E7420657863656564732062"
										},
										{
											"begin": 3505,
											"end": 3523,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 3505,
											"end": 3523,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3505,
											"end": 3523,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3498,
											"end": 3560,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "616C616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3576,
											"end": 3594,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 3576,
											"end": 3594,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3576,
											"end": 3594,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3569,
											"end": 3605,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3622,
											"end": 3641,
											"name": "PUSH",
											"source": 14,
											"value": "84"
										},
										{
											"begin": 3622,
											"end": 3641,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 3419,
											"end": 3647,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "tag",
											"source": 4,
											"value": "132"
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8294,
											"end": 8303,
											"name": "PUSH",
											"source": 4,
											"value": "33"
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 8312,
											"end": 8332,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 8312,
											"end": 8332,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 8312,
											"end": 8332,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 8294,
											"end": 8332,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8294,
											"end": 8332,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 8352,
											"end": 8365,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8352,
											"end": 8365,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 8352,
											"end": 8365,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 8352,
											"end": 8365,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8352,
											"end": 8365,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8352,
											"end": 8365,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8352,
											"end": 8365,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8352,
											"end": 8365,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 8326,
											"end": 8332,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 8326,
											"end": 8332,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "135"
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8326,
											"end": 8332,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 8326,
											"end": 8332,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "88"
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "tag",
											"source": 4,
											"value": "135"
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8406,
											"end": 8408,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 8400,
											"end": 8404,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "PUSH",
											"source": 4,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 8410,
											"end": 8416,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "136"
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5015,
											"end": 5040,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5015,
											"end": 5040,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5003,
											"end": 5005,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4988,
											"end": 5006,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4988,
											"end": 5006,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4970,
											"end": 5046,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "tag",
											"source": 4,
											"value": "136"
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "LOG3",
											"source": 4
										},
										{
											"begin": 8428,
											"end": 8465,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "122"
										},
										{
											"begin": 12132,
											"end": 12253,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 14,
											"end": 187,
											"name": "tag",
											"source": 14,
											"value": "142"
										},
										{
											"begin": 14,
											"end": 187,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 82,
											"end": 102,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 82,
											"end": 102,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 131,
											"end": 162,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 131,
											"end": 162,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 121,
											"end": 163,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 121,
											"end": 163,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 111,
											"end": 113,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "144"
										},
										{
											"begin": 111,
											"end": 113,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 177,
											"end": 178,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 174,
											"end": 175,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 167,
											"end": 179,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 111,
											"end": 113,
											"name": "tag",
											"source": 14,
											"value": "144"
										},
										{
											"begin": 111,
											"end": 113,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 63,
											"end": 187,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 63,
											"end": 187,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 63,
											"end": 187,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 63,
											"end": 187,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 192,
											"end": 388,
											"name": "tag",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 192,
											"end": 388,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 251,
											"end": 257,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 304,
											"end": 306,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 292,
											"end": 301,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 283,
											"end": 290,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 279,
											"end": 302,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 275,
											"end": 307,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 272,
											"end": 274,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 272,
											"end": 274,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "146"
										},
										{
											"begin": 272,
											"end": 274,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 325,
											"end": 331,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 317,
											"end": 323,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 310,
											"end": 332,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 272,
											"end": 274,
											"name": "tag",
											"source": 14,
											"value": "146"
										},
										{
											"begin": 272,
											"end": 274,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 353,
											"end": 382,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "147"
										},
										{
											"begin": 372,
											"end": 381,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 353,
											"end": 382,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "142"
										},
										{
											"begin": 353,
											"end": 382,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 353,
											"end": 382,
											"name": "tag",
											"source": 14,
											"value": "147"
										},
										{
											"begin": 353,
											"end": 382,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 343,
											"end": 382,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 262,
											"end": 388,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 262,
											"end": 388,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 393,
											"end": 663,
											"name": "tag",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 393,
											"end": 663,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 461,
											"end": 467,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 469,
											"end": 475,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 522,
											"end": 524,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 510,
											"end": 519,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 501,
											"end": 508,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 497,
											"end": 520,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 493,
											"end": 525,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 490,
											"end": 492,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 490,
											"end": 492,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "149"
										},
										{
											"begin": 490,
											"end": 492,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 543,
											"end": 549,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 535,
											"end": 541,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 528,
											"end": 550,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 490,
											"end": 492,
											"name": "tag",
											"source": 14,
											"value": "149"
										},
										{
											"begin": 490,
											"end": 492,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 571,
											"end": 600,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "150"
										},
										{
											"begin": 590,
											"end": 599,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 571,
											"end": 600,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "142"
										},
										{
											"begin": 571,
											"end": 600,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 571,
											"end": 600,
											"name": "tag",
											"source": 14,
											"value": "150"
										},
										{
											"begin": 571,
											"end": 600,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 561,
											"end": 600,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 561,
											"end": 600,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 619,
											"end": 657,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "151"
										},
										{
											"begin": 653,
											"end": 655,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 642,
											"end": 651,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 638,
											"end": 656,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 619,
											"end": 657,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "142"
										},
										{
											"begin": 619,
											"end": 657,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 619,
											"end": 657,
											"name": "tag",
											"source": 14,
											"value": "151"
										},
										{
											"begin": 619,
											"end": 657,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 609,
											"end": 657,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 609,
											"end": 657,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 480,
											"end": 663,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 480,
											"end": 663,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 480,
											"end": 663,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 480,
											"end": 663,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 480,
											"end": 663,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 480,
											"end": 663,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 668,
											"end": 1006,
											"name": "tag",
											"source": 14,
											"value": "31"
										},
										{
											"begin": 668,
											"end": 1006,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 745,
											"end": 751,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 753,
											"end": 759,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 761,
											"end": 767,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 814,
											"end": 816,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 802,
											"end": 811,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 793,
											"end": 800,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 789,
											"end": 812,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 785,
											"end": 817,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 782,
											"end": 784,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 782,
											"end": 784,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "153"
										},
										{
											"begin": 782,
											"end": 784,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 835,
											"end": 841,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 827,
											"end": 833,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 820,
											"end": 842,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 782,
											"end": 784,
											"name": "tag",
											"source": 14,
											"value": "153"
										},
										{
											"begin": 782,
											"end": 784,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 863,
											"end": 892,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "154"
										},
										{
											"begin": 882,
											"end": 891,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 863,
											"end": 892,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "142"
										},
										{
											"begin": 863,
											"end": 892,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 863,
											"end": 892,
											"name": "tag",
											"source": 14,
											"value": "154"
										},
										{
											"begin": 863,
											"end": 892,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 853,
											"end": 892,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 853,
											"end": 892,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 911,
											"end": 949,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "155"
										},
										{
											"begin": 945,
											"end": 947,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 934,
											"end": 943,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 930,
											"end": 948,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 911,
											"end": 949,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "142"
										},
										{
											"begin": 911,
											"end": 949,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 911,
											"end": 949,
											"name": "tag",
											"source": 14,
											"value": "155"
										},
										{
											"begin": 911,
											"end": 949,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 901,
											"end": 949,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 901,
											"end": 949,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 996,
											"end": 998,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 985,
											"end": 994,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 981,
											"end": 999,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 968,
											"end": 1000,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 958,
											"end": 1000,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 958,
											"end": 1000,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 772,
											"end": 1006,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 772,
											"end": 1006,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 772,
											"end": 1006,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 772,
											"end": 1006,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 772,
											"end": 1006,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 772,
											"end": 1006,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 1011,
											"end": 1275,
											"name": "tag",
											"source": 14,
											"value": "21"
										},
										{
											"begin": 1011,
											"end": 1275,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1079,
											"end": 1085,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1087,
											"end": 1093,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1140,
											"end": 1142,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 1128,
											"end": 1137,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 1119,
											"end": 1126,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 1115,
											"end": 1138,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 1111,
											"end": 1143,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 1108,
											"end": 1110,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1108,
											"end": 1110,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "157"
										},
										{
											"begin": 1108,
											"end": 1110,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1161,
											"end": 1167,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1153,
											"end": 1159,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 1146,
											"end": 1168,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 1108,
											"end": 1110,
											"name": "tag",
											"source": 14,
											"value": "157"
										},
										{
											"begin": 1108,
											"end": 1110,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1189,
											"end": 1218,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "158"
										},
										{
											"begin": 1208,
											"end": 1217,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 1189,
											"end": 1218,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "142"
										},
										{
											"begin": 1189,
											"end": 1218,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 1189,
											"end": 1218,
											"name": "tag",
											"source": 14,
											"value": "158"
										},
										{
											"begin": 1189,
											"end": 1218,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1179,
											"end": 1218,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 1265,
											"end": 1267,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1250,
											"end": 1268,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 1250,
											"end": 1268,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1250,
											"end": 1268,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 1250,
											"end": 1268,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1237,
											"end": 1269,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 1237,
											"end": 1269,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1098,
											"end": 1275,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 1472,
											"end": 2075,
											"name": "tag",
											"source": 14,
											"value": "18"
										},
										{
											"begin": 1472,
											"end": 2075,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1584,
											"end": 1588,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1613,
											"end": 1615,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1642,
											"end": 1644,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1631,
											"end": 1640,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 1624,
											"end": 1645,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1674,
											"end": 1680,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 1668,
											"end": 1681,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 1717,
											"end": 1723,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1712,
											"end": 1714,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 1701,
											"end": 1710,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 1697,
											"end": 1715,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1690,
											"end": 1724,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1742,
											"end": 1746,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "tag",
											"source": 14,
											"value": "161"
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1769,
											"end": 1775,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1766,
											"end": 1767,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1763,
											"end": 1776,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "163"
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1864,
											"end": 1878,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 1864,
											"end": 1878,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1864,
											"end": 1878,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1860,
											"end": 1883,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 1860,
											"end": 1883,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1854,
											"end": 1884,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 1830,
											"end": 1847,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 1830,
											"end": 1847,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 1830,
											"end": 1847,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1849,
											"end": 1851,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 1826,
											"end": 1852,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1819,
											"end": 1885,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1784,
											"end": 1794,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 1784,
											"end": 1794,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "161"
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "tag",
											"source": 14,
											"value": "163"
										},
										{
											"begin": 1755,
											"end": 1895,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1913,
											"end": 1919,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1910,
											"end": 1911,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1907,
											"end": 1920,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 1904,
											"end": 1906,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1904,
											"end": 1906,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "164"
										},
										{
											"begin": 1904,
											"end": 1906,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1983,
											"end": 1987,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 1978,
											"end": 1980,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 1969,
											"end": 1975,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 1958,
											"end": 1967,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 1954,
											"end": 1976,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1950,
											"end": 1981,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1943,
											"end": 1988,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1904,
											"end": 1906,
											"name": "tag",
											"source": 14,
											"value": "164"
										},
										{
											"begin": 1904,
											"end": 1906,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2059,
											"end": 2061,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 2038,
											"end": 2053,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2034,
											"end": 2063,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 2019,
											"end": 2064,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 2019,
											"end": 2064,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 2019,
											"end": 2064,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 2019,
											"end": 2064,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2066,
											"end": 2068,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 2015,
											"end": 2069,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2015,
											"end": 2069,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 1593,
											"end": 2075,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1593,
											"end": 2075,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 5240,
											"end": 5469,
											"name": "tag",
											"source": 14,
											"value": "88"
										},
										{
											"begin": 5240,
											"end": 5469,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5280,
											"end": 5283,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5311,
											"end": 5312,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5307,
											"end": 5313,
											"name": "NOT",
											"source": 14
										},
										{
											"begin": 5304,
											"end": 5305,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5301,
											"end": 5314,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 5298,
											"end": 5300,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 5298,
											"end": 5300,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "175"
										},
										{
											"begin": 5298,
											"end": 5300,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5337,
											"end": 5370,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5337,
											"end": 5370,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5393,
											"end": 5397,
											"name": "PUSH",
											"source": 14,
											"value": "11"
										},
										{
											"begin": 5390,
											"end": 5391,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 5383,
											"end": 5398,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5423,
											"end": 5427,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 5344,
											"end": 5347,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5411,
											"end": 5428,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 5298,
											"end": 5300,
											"name": "tag",
											"source": 14,
											"value": "175"
										},
										{
											"begin": 5298,
											"end": 5300,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5454,
											"end": 5463,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5454,
											"end": 5463,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5288,
											"end": 5469,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 5474,
											"end": 5854,
											"name": "tag",
											"source": 14,
											"value": "65"
										},
										{
											"begin": 5474,
											"end": 5854,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5553,
											"end": 5554,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 5549,
											"end": 5561,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5549,
											"end": 5561,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5549,
											"end": 5561,
											"name": "SHR",
											"source": 14
										},
										{
											"begin": 5549,
											"end": 5561,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5596,
											"end": 5608,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5596,
											"end": 5608,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 5596,
											"end": 5608,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 5617,
											"end": 5619,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "177"
										},
										{
											"begin": 5617,
											"end": 5619,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 5671,
											"end": 5675,
											"name": "PUSH",
											"source": 14,
											"value": "7F"
										},
										{
											"begin": 5663,
											"end": 5669,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5659,
											"end": 5676,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 5649,
											"end": 5676,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 5649,
											"end": 5676,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 5617,
											"end": 5619,
											"name": "tag",
											"source": 14,
											"value": "177"
										},
										{
											"begin": 5617,
											"end": 5619,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5724,
											"end": 5726,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 5716,
											"end": 5722,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5713,
											"end": 5727,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 5693,
											"end": 5711,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5690,
											"end": 5728,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 5687,
											"end": 5689,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 5687,
											"end": 5689,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "178"
										},
										{
											"begin": 5687,
											"end": 5689,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 5770,
											"end": 5780,
											"name": "PUSH",
											"source": 14,
											"value": "4E487B71"
										},
										{
											"begin": 5765,
											"end": 5768,
											"name": "PUSH",
											"source": 14,
											"value": "E0"
										},
										{
											"begin": 5761,
											"end": 5781,
											"name": "SHL",
											"source": 14
										},
										{
											"begin": 5758,
											"end": 5759,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5751,
											"end": 5782,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5805,
											"end": 5809,
											"name": "PUSH",
											"source": 14,
											"value": "22"
										},
										{
											"begin": 5802,
											"end": 5803,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 5795,
											"end": 5810,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5833,
											"end": 5837,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 5830,
											"end": 5831,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5823,
											"end": 5838,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 5687,
											"end": 5689,
											"name": "tag",
											"source": 14,
											"value": "178"
										},
										{
											"begin": 5687,
											"end": 5689,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5687,
											"end": 5689,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 5529,
											"end": 5854,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 5529,
											"end": 5854,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5529,
											"end": 5854,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 5529,
											"end": 5854,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":\"ERC20Upgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6ec10894beb0f7537fba35e501fd1c5d35440e8c8f5ced1b8e57722a1d0879a8\",\"dweb:/ipfs/Qmbc3bNmtDewTGSmrPD93Ubp8saAz8xCxsgTjSmpNTqukz\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"keccak256\":\"0xb71b875e7f1b8ad082eb6ff83bca4bfa7d050476cc98fd39295826b654edfb46\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bcec0617473fa22a0866d7daf25bf4d664a62902e49c4a158aef54c1e4348e8a\",\"dweb:/ipfs/QmPQetTKnLJBAQQrLKUWGVZwfp3VGmBhnqqJvmJTycM1jR\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75b47c3aeca7b66ea6752f8be020ec5c1c502de6ec9065272dae23d3a52196e2\",\"dweb:/ipfs/QmUebPMHv16tYKFh5BmBQkMfRFb5b8UZ2RgVwdjxCeufVF\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c9c634f99dd02d73ce7498b03a6305e251c05eeebb71457306561c1fab0fa7d\",\"dweb:/ipfs/QmbYRBbZHy8YoaQKXdPryiL3CSS7uUaRfRYi1TUj9cTqJQ\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://37e4df53c8d2e3c1062c1c7b2c17366db7de03bfd2559d340ca95c588aa49c2f\",\"dweb:/ipfs/QmQ9vsG3o4wED3FRogiSUhdzJvZSjjYFtydzXvFEJtgZk4\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 130,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 133,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 1580,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 454,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_balances",
								"offset": 0,
								"slot": "51",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 460,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_allowances",
								"offset": 0,
								"slot": "52",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 462,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "53",
								"type": "t_uint256"
							},
							{
								"astId": 464,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_name",
								"offset": 0,
								"slot": "54",
								"type": "t_string_storage"
							},
							{
								"astId": 466,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_symbol",
								"offset": 0,
								"slot": "55",
								"type": "t_string_storage"
							},
							{
								"astId": 1045,
								"contract": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "56",
								"type": "t_array(t_uint256)45_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)45_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[45]",
								"numberOfBytes": "1440"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
				"IERC20Upgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":\"IERC20Upgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75b47c3aeca7b66ea6752f8be020ec5c1c502de6ec9065272dae23d3a52196e2\",\"dweb:/ipfs/QmUebPMHv16tYKFh5BmBQkMfRFb5b8UZ2RgVwdjxCeufVF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
				"IERC20MetadataUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":\"IERC20MetadataUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75b47c3aeca7b66ea6752f8be020ec5c1c502de6ec9065272dae23d3a52196e2\",\"dweb:/ipfs/QmUebPMHv16tYKFh5BmBQkMfRFb5b8UZ2RgVwdjxCeufVF\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c9c634f99dd02d73ce7498b03a6305e251c05eeebb71457306561c1fab0fa7d\",\"dweb:/ipfs/QmbYRBbZHy8YoaQKXdPryiL3CSS7uUaRfRYi1TUj9cTqJQ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
				"IERC721Upgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required interface of an ERC721 compliant contract.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":\"IERC721Upgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"keccak256\":\"0x5d3b80a09c746aed89446a14d0e8f5ba5212520360d00a495a2156a7a51497e5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dfaceeb9548fa36e2af1e69cbc2bd5a8ba2b06ec62accba64fc123e1e0f120a1\",\"dweb:/ipfs/QmcF1kFRotifj9QBqhqNATaRQhQ6aoDAhSEEoKMc9VdKu3\"]},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://92ad7e572cf44e6b4b37631b44b62f9eb9fb1cf14d9ce51c1504d5dc7ccaf758\",\"dweb:/ipfs/QmcnbqX85tsWnUXPmtuPLE4SczME2sJaTfmqEFkuAJvWhy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol": {
				"IERC721EnumerableUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenOfOwnerByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://eips.ethereum.org/EIPS/eip-721",
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"tokenByIndex(uint256)": {
								"details": "Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."
							},
							"tokenOfOwnerByIndex(address,uint256)": {
								"details": "Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
							},
							"totalSupply()": {
								"details": "Returns the total amount of tokens stored by the contract."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard, optional enumeration extension",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"tokenByIndex(uint256)": "4f6ccce7",
							"tokenOfOwnerByIndex(address,uint256)": "2f745c59",
							"totalSupply()": "18160ddd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional enumeration extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":\"IERC721EnumerableUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"keccak256\":\"0x5d3b80a09c746aed89446a14d0e8f5ba5212520360d00a495a2156a7a51497e5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dfaceeb9548fa36e2af1e69cbc2bd5a8ba2b06ec62accba64fc123e1e0f120a1\",\"dweb:/ipfs/QmcF1kFRotifj9QBqhqNATaRQhQ6aoDAhSEEoKMc9VdKu3\"]},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"keccak256\":\"0xf1870306db8391db9cf14b41be0da76857a88df0e5c623d2b2338fb30a3bd5ff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://466149e3f8e96b81781b18dbb7b00a20d7172ddee599ef9d51b64c7e78ddfb1d\",\"dweb:/ipfs/QmTvLPy7ZF2Vm7JLSrknWm1Z2fyVaNhoXY2RFcRkmSKFAe\"]},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://92ad7e572cf44e6b4b37631b44b62f9eb9fb1cf14d9ce51c1504d5dc7ccaf758\",\"dweb:/ipfs/QmcnbqX85tsWnUXPmtuPLE4SczME2sJaTfmqEFkuAJvWhy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
				"AddressUpgradeable": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":194:7316  library AddressUpgradeable {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":194:7316  library AddressUpgradeable {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220a7a984763e847cdcde6bdd1bc2ac452821c1a12e69a92de01a629eba88b3488264736f6c63430008040033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a7a984763e847cdcde6bdd1bc2ac452821c1a12e69a92de01a629eba88b3488264736f6c63430008040033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA7 0xA9 DUP5 PUSH23 0x3E847CDCDE6BDD1BC2AC452821C1A12E69A92DE01A629E 0xBA DUP9 0xB3 0x48 DUP3 PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ",
							"sourceMap": "194:7122:9:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:7122:9;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a7a984763e847cdcde6bdd1bc2ac452821c1a12e69a92de01a629eba88b3488264736f6c63430008040033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA7 0xA9 DUP5 PUSH23 0x3E847CDCDE6BDD1BC2AC452821C1A12E69A92DE01A629E 0xBA DUP9 0xB3 0x48 DUP3 PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ",
							"sourceMap": "194:7122:9:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH",
									"source": 9,
									"value": "B"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "BYTE",
									"source": 9
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH",
									"source": 9,
									"value": "4"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "ADDRESS",
									"source": 9
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "PUSH",
									"source": 9,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "MSTORE8",
									"source": 9
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 194,
									"end": 7316,
									"name": "RETURN",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220a7a984763e847cdcde6bdd1bc2ac452821c1a12e69a92de01a629eba88b3488264736f6c63430008040033",
									".code": [
										{
											"begin": 194,
											"end": 7316,
											"name": "PUSHDEPLOYADDRESS",
											"source": 9
										},
										{
											"begin": 194,
											"end": 7316,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 194,
											"end": 7316,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 194,
											"end": 7316,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 194,
											"end": 7316,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 194,
											"end": 7316,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 194,
											"end": 7316,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 7316,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 194,
											"end": 7316,
											"name": "REVERT",
											"source": 9
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://37e4df53c8d2e3c1062c1c7b2c17366db7de03bfd2559d340ca95c588aa49c2f\",\"dweb:/ipfs/QmQ9vsG3o4wED3FRogiSUhdzJvZSjjYFtydzXvFEJtgZk4\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"ContextUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6ec10894beb0f7537fba35e501fd1c5d35440e8c8f5ced1b8e57722a1d0879a8\",\"dweb:/ipfs/Qmbc3bNmtDewTGSmrPD93Ubp8saAz8xCxsgTjSmpNTqukz\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://37e4df53c8d2e3c1062c1c7b2c17366db7de03bfd2559d340ca95c588aa49c2f\",\"dweb:/ipfs/QmQ9vsG3o4wED3FRogiSUhdzJvZSjjYFtydzXvFEJtgZk4\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 130,
								"contract": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 133,
								"contract": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 1580,
								"contract": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							}
						],
						"types": {
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
				"IERC165Upgradeable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":\"IERC165Upgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://92ad7e572cf44e6b4b37631b44b62f9eb9fb1cf14d9ce51c1504d5dc7ccaf758\",\"dweb:/ipfs/QmcnbqX85tsWnUXPmtuPLE4SczME2sJaTfmqEFkuAJvWhy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/interfaces/INFTCore.sol": {
				"INFTCore": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_tokenId",
									"type": "uint256"
								}
							],
							"name": "getTokenName",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_tokenId",
									"type": "uint256"
								}
							],
							"name": "getTokenQuote",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_recipient",
									"type": "address"
								},
								{
									"internalType": "string",
									"name": "_tokenURI",
									"type": "string"
								}
							],
							"name": "mintNFT",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_tokenId",
									"type": "uint256"
								},
								{
									"internalType": "string",
									"name": "_tokenName",
									"type": "string"
								}
							],
							"name": "setTokenName",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_tokenId",
									"type": "uint256"
								},
								{
									"internalType": "string",
									"name": "_tokenQuote",
									"type": "string"
								}
							],
							"name": "setTokenQuote",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenOfOwnerByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"tokenByIndex(uint256)": {
								"details": "Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."
							},
							"tokenOfOwnerByIndex(address,uint256)": {
								"details": "Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
							},
							"totalSupply()": {
								"details": "Returns the total amount of tokens stored by the contract."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"getTokenName(uint256)": "dbe16c07",
							"getTokenQuote(uint256)": "2a177566",
							"isApprovedForAll(address,address)": "e985e9c5",
							"mintNFT(address,string)": "eacabe14",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"setTokenName(uint256,string)": "cdb0e89e",
							"setTokenQuote(uint256,string)": "cc724ce9",
							"supportsInterface(bytes4)": "01ffc9a7",
							"tokenByIndex(uint256)": "4f6ccce7",
							"tokenOfOwnerByIndex(address,uint256)": "2f745c59",
							"totalSupply()": "18160ddd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenQuote\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"mintNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"}],\"name\":\"setTokenName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenQuote\",\"type\":\"string\"}],\"name\":\"setTokenQuote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/INFTCore.sol\":\"INFTCore\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"keccak256\":\"0x5d3b80a09c746aed89446a14d0e8f5ba5212520360d00a495a2156a7a51497e5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dfaceeb9548fa36e2af1e69cbc2bd5a8ba2b06ec62accba64fc123e1e0f120a1\",\"dweb:/ipfs/QmcF1kFRotifj9QBqhqNATaRQhQ6aoDAhSEEoKMc9VdKu3\"]},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"keccak256\":\"0xf1870306db8391db9cf14b41be0da76857a88df0e5c623d2b2338fb30a3bd5ff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://466149e3f8e96b81781b18dbb7b00a20d7172ddee599ef9d51b64c7e78ddfb1d\",\"dweb:/ipfs/QmTvLPy7ZF2Vm7JLSrknWm1Z2fyVaNhoXY2RFcRkmSKFAe\"]},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://92ad7e572cf44e6b4b37631b44b62f9eb9fb1cf14d9ce51c1504d5dc7ccaf758\",\"dweb:/ipfs/QmcnbqX85tsWnUXPmtuPLE4SczME2sJaTfmqEFkuAJvWhy\"]},\"contracts/interfaces/INFTCore.sol\":{\"keccak256\":\"0x0ef6126f8c0f3b340093f924e4f7ade840eabf31be7db7cdaf430ca30111e02b\",\"license\":\"Unlicense\",\"urls\":[\"bzz-raw://d321227e4dc3dd9ecc1b32573a30cef0a5b521c495da400fcd8a55c4cfff1d37\",\"dweb:/ipfs/QmY4354GiPQdoDPectoFDdKxGE5iSsqoHbywzb3S1N38mE\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/tokens/Moola.sol": {
				"Moola": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Paused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Unpaused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "time",
									"type": "uint256"
								}
							],
							"name": "dailyDairyClaimed",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_tokenId",
									"type": "uint256"
								}
							],
							"name": "claimDairy",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_tokenId",
									"type": "uint256"
								}
							],
							"name": "getLastClaimed",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "name_",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol_",
									"type": "string"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "mint",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "paused",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_cooldown",
									"type": "uint256"
								}
							],
							"name": "setCooldown",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_moola",
									"type": "address"
								}
							],
							"name": "setMoolaNFTAddress",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_whitelist",
									"type": "address"
								}
							],
							"name": "setWhitelist",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"mint(address,uint256)": {
								"params": {
									"amount": "??",
									"to": "??"
								}
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"paused()": {
								"details": "Returns true if the contract is paused, and false otherwise."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/tokens/Moola.sol\":562:2550  contract Moola is ERC20Upgradeable, OwnableUpgradeable, PausableUpgradeable {\r... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/tokens/Moola.sol\":562:2550  contract Moola is ERC20Upgradeable, OwnableUpgradeable, PausableUpgradeable {\r... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x70a08231\n      gt\n      tag_25\n      jumpi\n      dup1\n      0xa457c2d7\n      gt\n      tag_26\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_19\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_20\n      jumpi\n      dup1\n      0xbe023d84\n      eq\n      tag_21\n      jumpi\n      dup1\n      0xd1a20509\n      eq\n      tag_22\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_23\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_24\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_26:\n      dup1\n      0x70a08231\n      eq\n      tag_14\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_15\n      jumpi\n      dup1\n      0x854cff2f\n      eq\n      tag_16\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_17\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_18\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_25:\n      dup1\n      0x39509351\n      gt\n      tag_27\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x40c10f19\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x4cd88b76\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x4fc3f41a\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x59176c8d\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x5c975abb\n      eq\n      tag_13\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_27:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2493:2591  function name() public view virtual override returns (string memory) {... */\n    tag_3:\n      tag_28\n      tag_29\n      jump\t// in\n    tag_28:\n      mload(0x40)\n      tag_30\n      swap2\n      swap1\n      tag_31\n      jump\t// in\n    tag_30:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4770:4967  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_4:\n      tag_32\n      tag_33\n      calldatasize\n      0x04\n      tag_34\n      jump\t// in\n    tag_33:\n      tag_35\n      jump\t// in\n    tag_32:\n      mload(0x40)\n        /* \"#utility.yul\":3986:4000   */\n      swap1\n      iszero\n        /* \"#utility.yul\":3979:4001   */\n      iszero\n        /* \"#utility.yul\":3961:4002   */\n      dup2\n      mstore\n        /* \"#utility.yul\":3949:3951   */\n      0x20\n        /* \"#utility.yul\":3934:3952   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4770:4967  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      tag_30\n        /* \"#utility.yul\":3916:4008   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3581:3687  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_5:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3668:3680  _totalSupply */\n      sload(0x35)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3581:3687  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_38:\n      mload(0x40)\n        /* \"#utility.yul\":10734:10759   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":10722:10724   */\n      0x20\n        /* \"#utility.yul\":10707:10725   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3581:3687  function totalSupply() public view virtual override returns (uint256) {... */\n      tag_30\n        /* \"#utility.yul\":10689:10765   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5529:5815  function transferFrom(... */\n    tag_6:\n      tag_32\n      tag_43\n      calldatasize\n      0x04\n      tag_44\n      jump\t// in\n    tag_43:\n      tag_45\n      jump\t// in\n        /* \"contracts/tokens/Moola.sol\":1709:1796  function decimals() public view virtual override returns (uint8) {\r... */\n    tag_7:\n      mload(0x40)\n        /* \"contracts/tokens/Moola.sol\":1788:1790  18 */\n      0x12\n        /* \"#utility.yul\":4165:4201   */\n      dup2\n      mstore\n        /* \"#utility.yul\":4153:4155   */\n      0x20\n        /* \"#utility.yul\":4138:4156   */\n      add\n        /* \"contracts/tokens/Moola.sol\":1709:1796  function decimals() public view virtual override returns (uint8) {\r... */\n      tag_30\n        /* \"#utility.yul\":4120:4207   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6210:6444  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_8:\n      tag_32\n      tag_52\n      calldatasize\n      0x04\n      tag_34\n      jump\t// in\n    tag_52:\n      tag_53\n      jump\t// in\n        /* \"contracts/tokens/Moola.sol\":1926:2021  function mint(address to, uint256 amount) external onlyWhitelist {\r... */\n    tag_9:\n      tag_55\n      tag_56\n      calldatasize\n      0x04\n      tag_34\n      jump\t// in\n    tag_56:\n      tag_57\n      jump\t// in\n    tag_55:\n      stop\n        /* \"contracts/tokens/Moola.sol\":1050:1309  function initialize(string memory name_, string memory symbol_)\r... */\n    tag_10:\n      tag_55\n      tag_59\n      calldatasize\n      0x04\n      tag_60\n      jump\t// in\n    tag_59:\n      tag_61\n      jump\t// in\n        /* \"contracts/tokens/Moola.sol\":1423:1515  function setCooldown(uint256 _cooldown) external onlyOwner {\r... */\n    tag_11:\n      tag_55\n      tag_63\n      calldatasize\n      0x04\n      tag_64\n      jump\t// in\n    tag_63:\n      tag_65\n      jump\t// in\n        /* \"contracts/tokens/Moola.sol\":2027:2423  function claimDairy(uint256 _tokenId) external {\r... */\n    tag_12:\n      tag_55\n      tag_67\n      calldatasize\n      0x04\n      tag_64\n      jump\t// in\n    tag_67:\n      tag_68\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":1341:1425  function paused() public view virtual returns (bool) {... */\n    tag_13:\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":1411:1418  _paused */\n      and(0xff, sload(0x97))\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":1341:1425  function paused() public view virtual returns (bool) {... */\n      jump(tag_32)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3745:3870  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_14:\n      tag_38\n      tag_73\n      calldatasize\n      0x04\n      tag_74\n      jump\t// in\n    tag_73:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3845:3863  _balances[account] */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3819:3826  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3845:3863  _balances[account] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3845:3854  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3845:3863  _balances[account] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3745:3870  function balanceOf(address account) public view virtual override returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1908:2009  function renounceOwnership() public virtual onlyOwner {... */\n    tag_15:\n      tag_55\n      tag_78\n      jump\t// in\n        /* \"contracts/tokens/Moola.sol\":1315:1417  function setWhitelist(address _whitelist) external onlyOwner {\r... */\n    tag_16:\n      tag_55\n      tag_80\n      calldatasize\n      0x04\n      tag_74\n      jump\t// in\n    tag_80:\n      tag_81\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1276:1361  function owner() public view virtual returns (address) {... */\n    tag_17:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1348:1354  _owner */\n      sload(0x65)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1276:1361  function owner() public view virtual returns (address) {... */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1348:1354  _owner */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":3409:3460   */\n      dup2\n      mstore\n        /* \"#utility.yul\":3397:3399   */\n      0x20\n        /* \"#utility.yul\":3382:3400   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1276:1361  function owner() public view virtual returns (address) {... */\n      tag_30\n        /* \"#utility.yul\":3364:3466   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2704:2806  function symbol() public view virtual override returns (string memory) {... */\n    tag_18:\n      tag_28\n      tag_87\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6931:7358  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_19:\n      tag_32\n      tag_90\n      calldatasize\n      0x04\n      tag_34\n      jump\t// in\n    tag_90:\n      tag_91\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4066:4255  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_20:\n      tag_32\n      tag_94\n      calldatasize\n      0x04\n      tag_34\n      jump\t// in\n    tag_94:\n      tag_95\n      jump\t// in\n        /* \"contracts/tokens/Moola.sol\":1521:1644  function setMoolaNFTAddress(address _moola) external onlyOwner {\r... */\n    tag_21:\n      tag_55\n      tag_98\n      calldatasize\n      0x04\n      tag_74\n      jump\t// in\n    tag_98:\n      tag_99\n      jump\t// in\n        /* \"contracts/tokens/Moola.sol\":2429:2547  function getLastClaimed(uint256 _tokenId) external view returns (uint256) {\r... */\n    tag_22:\n      tag_38\n      tag_101\n      calldatasize\n      0x04\n      tag_64\n      jump\t// in\n    tag_101:\n        /* \"contracts/tokens/Moola.sol\":2494:2501  uint256 */\n      0x00\n        /* \"contracts/tokens/Moola.sol\":2517:2541  nftLastClaimed[_tokenId] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/tokens/Moola.sol\":2517:2531  nftLastClaimed */\n      0xcd\n        /* \"contracts/tokens/Moola.sol\":2517:2541  nftLastClaimed[_tokenId] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"contracts/tokens/Moola.sol\":2429:2547  function getLastClaimed(uint256 _tokenId) external view returns (uint256) {\r... */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4313:4462  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_23:\n      tag_38\n      tag_105\n      calldatasize\n      0x04\n      tag_106\n      jump\t// in\n    tag_105:\n      tag_107\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2158:2356  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_24:\n      tag_55\n      tag_110\n      calldatasize\n      0x04\n      tag_74\n      jump\t// in\n    tag_110:\n      tag_111\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2493:2591  function name() public view virtual override returns (string memory) {... */\n    tag_29:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2547:2560  string memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2579:2584  _name */\n      0x36\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2572:2584  return _name */\n      dup1\n      sload\n      tag_113\n      swap1\n      tag_114\n      jump\t// in\n    tag_113:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_115\n      swap1\n      tag_114\n      jump\t// in\n    tag_115:\n      dup1\n      iszero\n      tag_116\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_117\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_116)\n    tag_117:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_118:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_118\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_116:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2493:2591  function name() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4770:4967  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_35:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4853:4857  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4907:4939  _approve(owner, spender, amount) */\n      tag_122\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4923:4930  spender */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4932:4938  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4907:4915  _approve */\n      tag_123\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4907:4939  _approve(owner, spender, amount) */\n      jump\t// in\n    tag_122:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4956:4960  true */\n      0x01\n      swap4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4770:4967  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5529:5815  function transferFrom(... */\n    tag_45:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5656:5660  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5712:5750  _spendAllowance(from, spender, amount) */\n      tag_127\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5728:5732  from */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5743:5749  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5712:5727  _spendAllowance */\n      tag_128\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5712:5750  _spendAllowance(from, spender, amount) */\n      jump\t// in\n    tag_127:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5760:5787  _transfer(from, to, amount) */\n      tag_129\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5770:5774  from */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5776:5778  to */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5780:5786  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5760:5769  _transfer */\n      tag_130\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5760:5787  _transfer(from, to, amount) */\n      jump\t// in\n    tag_129:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5804:5808  true */\n      0x01\n      swap5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5529:5815  function transferFrom(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6210:6444  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_53:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6298:6302  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6352:6416  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      tag_122\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6368:6375  spender */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6405:6415  addedValue */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6377:6402  allowance(owner, spender) */\n      tag_135\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6368:6375  spender */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6377:6386  allowance */\n      tag_107\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6377:6402  allowance(owner, spender) */\n      jump\t// in\n    tag_135:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6377:6415  allowance(owner, spender) + addedValue */\n      tag_136\n      swap2\n      swap1\n      tag_137\n      jump\t// in\n    tag_136:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6352:6360  _approve */\n      tag_123\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6352:6416  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      jump\t// in\n        /* \"contracts/tokens/Moola.sol\":1926:2021  function mint(address to, uint256 amount) external onlyWhitelist {\r... */\n    tag_57:\n        /* \"contracts/tokens/Moola.sol\":922:932  msg.sender */\n      caller\n        /* \"contracts/tokens/Moola.sol\":912:933  whitelist[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/tokens/Moola.sol\":912:921  whitelist */\n      0xcc\n        /* \"contracts/tokens/Moola.sol\":912:933  whitelist[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n        /* \"contracts/tokens/Moola.sol\":904:952  require(whitelist[msg.sender], \"Only whitelist\") */\n      tag_139\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":9681:9683   */\n      0x20\n        /* \"contracts/tokens/Moola.sol\":904:952  require(whitelist[msg.sender], \"Only whitelist\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":9663:9684   */\n      mstore\n        /* \"#utility.yul\":9720:9722   */\n      0x0e\n        /* \"#utility.yul\":9700:9718   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":9693:9723   */\n      mstore\n      shl(0x92, 0x13db9b1e481dda1a5d195b1a5cdd)\n        /* \"#utility.yul\":9739:9757   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":9732:9776   */\n      mstore\n        /* \"#utility.yul\":9793:9811   */\n      0x64\n      add\n        /* \"contracts/tokens/Moola.sol\":904:952  require(whitelist[msg.sender], \"Only whitelist\") */\n    tag_140:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_139:\n        /* \"contracts/tokens/Moola.sol\":1998:2015  _mint(to, amount) */\n      tag_143\n        /* \"contracts/tokens/Moola.sol\":2004:2006  to */\n      dup3\n        /* \"contracts/tokens/Moola.sol\":2008:2014  amount */\n      dup3\n        /* \"contracts/tokens/Moola.sol\":1998:2003  _mint */\n      tag_144\n        /* \"contracts/tokens/Moola.sol\":1998:2015  _mint(to, amount) */\n      jump\t// in\n    tag_143:\n        /* \"contracts/tokens/Moola.sol\":1926:2021  function mint(address to, uint256 amount) external onlyWhitelist {\r... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/tokens/Moola.sol\":1050:1309  function initialize(string memory name_, string memory symbol_)\r... */\n    tag_61:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3111:3130  bool isTopLevelCall */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3133:3158  _setInitializedVersion(1) */\n      tag_146\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3156:3157  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3133:3155  _setInitializedVersion */\n      tag_147\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3133:3158  _setInitializedVersion(1) */\n      jump\t// in\n    tag_146:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3111:3158  bool isTopLevelCall = _setInitializedVersion(1) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3172:3186  isTopLevelCall */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3168:3233  if (isTopLevelCall) {... */\n      iszero\n      tag_148\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3202:3215  _initializing */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3202:3222  _initializing = true */\n      dup1\n      sload\n      not(0xff00)\n      and\n      0x0100\n      or\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3168:3233  if (isTopLevelCall) {... */\n    tag_148:\n        /* \"contracts/tokens/Moola.sol\":1155:1183  __ERC20_init(name_, symbol_) */\n      tag_150\n        /* \"contracts/tokens/Moola.sol\":1168:1173  name_ */\n      dup4\n        /* \"contracts/tokens/Moola.sol\":1175:1182  symbol_ */\n      dup4\n        /* \"contracts/tokens/Moola.sol\":1155:1167  __ERC20_init */\n      tag_151\n        /* \"contracts/tokens/Moola.sol\":1155:1183  __ERC20_init(name_, symbol_) */\n      jump\t// in\n    tag_150:\n        /* \"contracts/tokens/Moola.sol\":1190:1206  __Ownable_init() */\n      tag_152\n        /* \"contracts/tokens/Moola.sol\":1190:1204  __Ownable_init */\n      tag_153\n        /* \"contracts/tokens/Moola.sol\":1190:1206  __Ownable_init() */\n      jump\t// in\n    tag_152:\n        /* \"contracts/tokens/Moola.sol\":1213:1230  __Pausable_init() */\n      tag_154\n        /* \"contracts/tokens/Moola.sol\":1213:1228  __Pausable_init */\n      tag_155\n        /* \"contracts/tokens/Moola.sol\":1213:1230  __Pausable_init() */\n      jump\t// in\n    tag_154:\n        /* \"contracts/tokens/Moola.sol\":1239:1276  _mint(msg.sender, 10000000000 * 1e18) */\n      tag_156\n        /* \"contracts/tokens/Moola.sol\":1245:1255  msg.sender */\n      caller\n        /* \"contracts/tokens/Moola.sol\":1257:1275  10000000000 * 1e18 */\n      0x204fce5e3e25026110000000\n        /* \"contracts/tokens/Moola.sol\":1239:1244  _mint */\n      tag_144\n        /* \"contracts/tokens/Moola.sol\":1239:1276  _mint(msg.sender, 10000000000 * 1e18) */\n      jump\t// in\n    tag_156:\n        /* \"contracts/tokens/Moola.sol\":1294:1303  1 minutes */\n      0x3c\n        /* \"contracts/tokens/Moola.sol\":1283:1291  cooldown */\n      0xca\n        /* \"contracts/tokens/Moola.sol\":1283:1303  cooldown = 1 minutes */\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3253:3352  if (isTopLevelCall) {... */\n      dup1\n      iszero\n      tag_157\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3303:3308  false */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3287:3308  _initializing = false */\n      dup1\n      sload\n      not(0xff00)\n      and\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3327:3341  Initialized(1) */\n      mload(0x40)\n      0x01\n        /* \"#utility.yul\":4165:4201   */\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3327:3341  Initialized(1) */\n      0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498\n      swap1\n        /* \"#utility.yul\":4153:4155   */\n      0x20\n        /* \"#utility.yul\":4138:4156   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3327:3341  Initialized(1) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3253:3352  if (isTopLevelCall) {... */\n    tag_157:\n        /* \"contracts/tokens/Moola.sol\":1050:1309  function initialize(string memory name_, string memory symbol_)\r... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/tokens/Moola.sol\":1423:1515  function setCooldown(uint256 _cooldown) external onlyOwner {\r... */\n    tag_65:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1348:1354  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x65))\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1488:1511  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1480:1548  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_163\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_140\n      swap1\n      tag_165\n      jump\t// in\n    tag_163:\n        /* \"contracts/tokens/Moola.sol\":1489:1497  cooldown */\n      0xca\n        /* \"contracts/tokens/Moola.sol\":1489:1509  cooldown = _cooldown */\n      sstore\n        /* \"contracts/tokens/Moola.sol\":1423:1515  function setCooldown(uint256 _cooldown) external onlyOwner {\r... */\n      jump\t// out\n        /* \"contracts/tokens/Moola.sol\":2027:2423  function claimDairy(uint256 _tokenId) external {\r... */\n    tag_68:\n        /* \"contracts/tokens/Moola.sol\":2089:2097  moolaNFT */\n      sload(0xcb)\n        /* \"contracts/tokens/Moola.sol\":2089:2115  moolaNFT.ownerOf(_tokenId) */\n      mload(0x40)\n      shl(0xe1, 0x31a9108f)\n      dup2\n      mstore\n      0x04\n      dup2\n      add\n        /* \"#utility.yul\":10734:10759   */\n      dup4\n      swap1\n      mstore\n        /* \"contracts/tokens/Moola.sol\":2119:2129  msg.sender */\n      caller\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/tokens/Moola.sol\":2089:2097  moolaNFT */\n      and\n      swap1\n        /* \"contracts/tokens/Moola.sol\":2089:2105  moolaNFT.ownerOf */\n      0x6352211e\n      swap1\n        /* \"#utility.yul\":10707:10725   */\n      0x24\n      add\n        /* \"contracts/tokens/Moola.sol\":2089:2115  moolaNFT.ownerOf(_tokenId) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_169\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_169:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_171\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_171:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_172\n      swap2\n      swap1\n      tag_173\n      jump\t// in\n    tag_172:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/tokens/Moola.sol\":2089:2129  moolaNFT.ownerOf(_tokenId) == msg.sender */\n      and\n      eq\n        /* \"contracts/tokens/Moola.sol\":2081:2146  require(moolaNFT.ownerOf(_tokenId) == msg.sender, \"UNAUTHORIZED\") */\n      tag_174\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6236:6238   */\n      0x20\n        /* \"contracts/tokens/Moola.sol\":2081:2146  require(moolaNFT.ownerOf(_tokenId) == msg.sender, \"UNAUTHORIZED\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6218:6239   */\n      mstore\n        /* \"#utility.yul\":6275:6277   */\n      0x0c\n        /* \"#utility.yul\":6255:6273   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6248:6278   */\n      mstore\n      shl(0xa2, 0x15539055551213d492569151)\n        /* \"#utility.yul\":6294:6312   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6287:6329   */\n      mstore\n        /* \"#utility.yul\":6346:6364   */\n      0x64\n      add\n        /* \"contracts/tokens/Moola.sol\":2081:2146  require(moolaNFT.ownerOf(_tokenId) == msg.sender, \"UNAUTHORIZED\") */\n      tag_140\n        /* \"#utility.yul\":6208:6370   */\n      jump\n        /* \"contracts/tokens/Moola.sol\":2081:2146  require(moolaNFT.ownerOf(_tokenId) == msg.sender, \"UNAUTHORIZED\") */\n    tag_174:\n        /* \"contracts/tokens/Moola.sol\":2187:2211  nftLastClaimed[_tokenId] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/tokens/Moola.sol\":2187:2201  nftLastClaimed */\n      0xcd\n        /* \"contracts/tokens/Moola.sol\":2187:2211  nftLastClaimed[_tokenId] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/tokens/Moola.sol\":2215:2221  1 days */\n      0x015180\n      swap1\n        /* \"contracts/tokens/Moola.sol\":2169:2211  block.timestamp - nftLastClaimed[_tokenId] */\n      tag_177\n      swap1\n        /* \"contracts/tokens/Moola.sol\":2169:2184  block.timestamp */\n      timestamp\n        /* \"contracts/tokens/Moola.sol\":2169:2211  block.timestamp - nftLastClaimed[_tokenId] */\n      tag_178\n      jump\t// in\n    tag_177:\n        /* \"contracts/tokens/Moola.sol\":2169:2221  block.timestamp - nftLastClaimed[_tokenId] >= 1 days */\n      lt\n      iszero\n        /* \"contracts/tokens/Moola.sol\":2153:2250  require(\r... */\n      tag_179\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6577:6579   */\n      0x20\n        /* \"contracts/tokens/Moola.sol\":2153:2250  require(\r... */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6559:6580   */\n      mstore\n        /* \"#utility.yul\":6616:6618   */\n      0x0b\n        /* \"#utility.yul\":6596:6614   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6589:6619   */\n      mstore\n      shl(0xa9, 0x27a71021a7a7a62227aba7)\n        /* \"#utility.yul\":6635:6653   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6628:6669   */\n      mstore\n        /* \"#utility.yul\":6686:6704   */\n      0x64\n      add\n        /* \"contracts/tokens/Moola.sol\":2153:2250  require(\r... */\n      tag_140\n        /* \"#utility.yul\":6549:6710   */\n      jump\n        /* \"contracts/tokens/Moola.sol\":2153:2250  require(\r... */\n    tag_179:\n        /* \"contracts/tokens/Moola.sol\":2259:2292  _mint(msg.sender, dailyAllowance) */\n      tag_182\n        /* \"contracts/tokens/Moola.sol\":2265:2275  msg.sender */\n      caller\n        /* \"contracts/tokens/Moola.sol\":2277:2291  dailyAllowance */\n      sload(0xc9)\n        /* \"contracts/tokens/Moola.sol\":2259:2264  _mint */\n      tag_144\n        /* \"contracts/tokens/Moola.sol\":2259:2292  _mint(msg.sender, dailyAllowance) */\n      jump\t// in\n    tag_182:\n        /* \"contracts/tokens/Moola.sol\":2299:2323  nftLastClaimed[_tokenId] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/tokens/Moola.sol\":2299:2313  nftLastClaimed */\n      0xcd\n        /* \"contracts/tokens/Moola.sol\":2299:2323  nftLastClaimed[_tokenId] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"contracts/tokens/Moola.sol\":2326:2341  block.timestamp */\n      timestamp\n        /* \"contracts/tokens/Moola.sol\":2299:2341  nftLastClaimed[_tokenId] = block.timestamp */\n      swap1\n      dup2\n      swap1\n      sstore\n        /* \"contracts/tokens/Moola.sol\":2385:2399  dailyAllowance */\n      sload(0xc9)\n        /* \"contracts/tokens/Moola.sol\":2355:2417  dailyDairyClaimed(msg.sender, dailyAllowance, block.timestamp) */\n      dup4\n      mload\n        /* \"contracts/tokens/Moola.sol\":2373:2383  msg.sender */\n      caller\n        /* \"#utility.yul\":3673:3724   */\n      dup2\n      mstore\n        /* \"#utility.yul\":3740:3758   */\n      swap3\n      dup4\n      add\n        /* \"#utility.yul\":3733:3767   */\n      mstore\n        /* \"#utility.yul\":3783:3801   */\n      dup2\n      dup4\n      add\n        /* \"#utility.yul\":3776:3810   */\n      mstore\n        /* \"contracts/tokens/Moola.sol\":2355:2417  dailyDairyClaimed(msg.sender, dailyAllowance, block.timestamp) */\n      swap1\n      mload\n      0x8dce8756778b482ef8cfef8c65faadc506ce94e081bb6cc3a2d3448d99de9a50\n      swap2\n      dup2\n      swap1\n      sub\n        /* \"#utility.yul\":3661:3663   */\n      0x60\n        /* \"contracts/tokens/Moola.sol\":2355:2417  dailyDairyClaimed(msg.sender, dailyAllowance, block.timestamp) */\n      add\n      swap1\n      log1\n        /* \"contracts/tokens/Moola.sol\":2027:2423  function claimDairy(uint256 _tokenId) external {\r... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1908:2009  function renounceOwnership() public virtual onlyOwner {... */\n    tag_78:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1348:1354  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x65))\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1488:1511  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1480:1548  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_190\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_140\n      swap1\n      tag_165\n      jump\t// in\n    tag_190:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1972:2002  _transferOwnership(address(0)) */\n      tag_193\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1999:2000  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1972:1990  _transferOwnership */\n      tag_194\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1972:2002  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_193:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1908:2009  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"contracts/tokens/Moola.sol\":1315:1417  function setWhitelist(address _whitelist) external onlyOwner {\r... */\n    tag_81:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1348:1354  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x65))\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1488:1511  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1480:1548  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_198\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_140\n      swap1\n      tag_165\n      jump\t// in\n    tag_198:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/tokens/Moola.sol\":1383:1404  whitelist[_whitelist] */\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/tokens/Moola.sol\":1383:1392  whitelist */\n      0xcc\n        /* \"contracts/tokens/Moola.sol\":1383:1404  whitelist[_whitelist] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/tokens/Moola.sol\":1383:1411  whitelist[_whitelist] = true */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"contracts/tokens/Moola.sol\":1407:1411  true */\n      0x01\n        /* \"contracts/tokens/Moola.sol\":1383:1411  whitelist[_whitelist] = true */\n      or\n      swap1\n      sstore\n        /* \"contracts/tokens/Moola.sol\":1315:1417  function setWhitelist(address _whitelist) external onlyOwner {\r... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2704:2806  function symbol() public view virtual override returns (string memory) {... */\n    tag_87:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2760:2773  string memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2792:2799  _symbol */\n      0x37\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2785:2799  return _symbol */\n      dup1\n      sload\n      tag_113\n      swap1\n      tag_114\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6931:7358  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_91:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7024:7028  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7024:7028  bool */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7105:7130  allowance(owner, spender) */\n      tag_210\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7122:7129  spender */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7105:7114  allowance */\n      tag_107\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7105:7130  allowance(owner, spender) */\n      jump\t// in\n    tag_210:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7078:7130  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7168:7183  subtractedValue */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7148:7164  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7148:7183  currentAllowance >= subtractedValue */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7140:7225  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_211\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":10024:10026   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7140:7225  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":10006:10027   */\n      mstore\n        /* \"#utility.yul\":10063:10065   */\n      0x25\n        /* \"#utility.yul\":10043:10061   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":10036:10066   */\n      mstore\n        /* \"#utility.yul\":10102:10136   */\n      0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77\n        /* \"#utility.yul\":10082:10100   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":10075:10137   */\n      mstore\n      shl(0xd8, 0x207a65726f)\n        /* \"#utility.yul\":10153:10171   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":10146:10181   */\n      mstore\n        /* \"#utility.yul\":10198:10217   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7140:7225  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_140\n        /* \"#utility.yul\":9996:10223   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7140:7225  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n    tag_211:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7259:7319  _approve(owner, spender, currentAllowance - subtractedValue) */\n      tag_129\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7268:7273  owner */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7275:7282  spender */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7303:7318  subtractedValue */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7284:7300  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7284:7318  currentAllowance - subtractedValue */\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7259:7267  _approve */\n      tag_123\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7259:7319  _approve(owner, spender, currentAllowance - subtractedValue) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4066:4255  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_95:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4145:4149  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4199:4227  _transfer(owner, to, amount) */\n      tag_122\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4216:4218  to */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4220:4226  amount */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4199:4208  _transfer */\n      tag_130\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4199:4227  _transfer(owner, to, amount) */\n      jump\t// in\n        /* \"contracts/tokens/Moola.sol\":1521:1644  function setMoolaNFTAddress(address _moola) external onlyOwner {\r... */\n    tag_99:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1348:1354  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x65))\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1488:1511  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1480:1548  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_221\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_140\n      swap1\n      tag_165\n      jump\t// in\n    tag_221:\n        /* \"contracts/tokens/Moola.sol\":1591:1599  moolaNFT */\n      0xcb\n        /* \"contracts/tokens/Moola.sol\":1591:1638  moolaNFT = IERC721EnumerableUpgradeable(_moola) */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"contracts/tokens/Moola.sol\":1521:1644  function setMoolaNFTAddress(address _moola) external onlyOwner {\r... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4313:4462  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_107:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4428:4446  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4402:4409  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4428:4446  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4428:4439  _allowances */\n      0x34\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4428:4446  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4428:4455  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4313:4462  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2158:2356  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_111:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1348:1354  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x65))\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1488:1511  owner() == _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1480:1548  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_229\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_140\n      swap1\n      tag_165\n      jump\t// in\n    tag_229:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2246:2268  newOwner != address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2238:2311  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_232\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5426:5428   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2238:2311  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5408:5429   */\n      mstore\n        /* \"#utility.yul\":5465:5467   */\n      0x26\n        /* \"#utility.yul\":5445:5463   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5438:5468   */\n      mstore\n        /* \"#utility.yul\":5504:5538   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":5484:5502   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5477:5539   */\n      mstore\n      shl(0xd0, 0x646472657373)\n        /* \"#utility.yul\":5555:5573   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":5548:5584   */\n      mstore\n        /* \"#utility.yul\":5601:5620   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2238:2311  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_140\n        /* \"#utility.yul\":5398:5626   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2238:2311  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n    tag_232:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2321:2349  _transferOwnership(newOwner) */\n      tag_235\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2340:2348  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2321:2339  _transferOwnership */\n      tag_194\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2321:2349  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_235:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2158:2356  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10456:10826  function _approve(... */\n    tag_123:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10587:10606  owner != address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10579:10647  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_238\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":8864:8866   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10579:10647  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":8846:8867   */\n      mstore\n        /* \"#utility.yul\":8903:8905   */\n      0x24\n        /* \"#utility.yul\":8883:8901   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":8876:8906   */\n      mstore\n        /* \"#utility.yul\":8942:8976   */\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n        /* \"#utility.yul\":8922:8940   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":8915:8977   */\n      mstore\n      shl(0xe0, 0x72657373)\n        /* \"#utility.yul\":8993:9011   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":8986:9020   */\n      mstore\n        /* \"#utility.yul\":9037:9056   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10579:10647  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_140\n        /* \"#utility.yul\":8836:9062   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10579:10647  require(owner != address(0), \"ERC20: approve from the zero address\") */\n    tag_238:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10665:10686  spender != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10657:10725  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_241\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5833:5835   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10657:10725  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5815:5836   */\n      mstore\n        /* \"#utility.yul\":5872:5874   */\n      0x22\n        /* \"#utility.yul\":5852:5870   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5845:5875   */\n      mstore\n        /* \"#utility.yul\":5911:5945   */\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n        /* \"#utility.yul\":5891:5909   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5884:5946   */\n      mstore\n      shl(0xf0, 0x7373)\n        /* \"#utility.yul\":5962:5980   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":5955:5987   */\n      mstore\n        /* \"#utility.yul\":6004:6023   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10657:10725  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_140\n        /* \"#utility.yul\":5805:6029   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10657:10725  require(spender != address(0), \"ERC20: approve to the zero address\") */\n    tag_241:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10736:10754  _allowances[owner] */\n      dup4\n      dup2\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10736:10747  _allowances */\n      0x34\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10736:10754  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10736:10763  _allowances[owner][spender] */\n      swap5\n      dup8\n      and\n      dup1\n      dup5\n      mstore\n      swap5\n      dup3\n      mstore\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10736:10772  _allowances[owner][spender] = amount */\n      dup6\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10787:10819  Approval(owner, spender, amount) */\n      swap1\n      mload\n        /* \"#utility.yul\":10734:10759   */\n      dup5\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10787:10819  Approval(owner, spender, amount) */\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      swap2\n        /* \"#utility.yul\":10707:10725   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10787:10819  Approval(owner, spender, amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10456:10826  function _approve(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11107:11548  function _spendAllowance(... */\n    tag_128:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11237:11261  uint256 currentAllowance */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11264:11289  allowance(owner, spender) */\n      tag_246\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11274:11279  owner */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11281:11288  spender */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11264:11273  allowance */\n      tag_107\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11264:11289  allowance(owner, spender) */\n      jump\t// in\n    tag_246:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11237:11289  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n      not(0x00)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11303:11319  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11303:11340  currentAllowance != type(uint256).max */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11299:11542  if (currentAllowance != type(uint256).max) {... */\n      tag_251\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11384:11390  amount */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11364:11380  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11364:11390  currentAllowance >= amount */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11356:11424  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_248\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6917:6919   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11356:11424  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6899:6920   */\n      mstore\n        /* \"#utility.yul\":6956:6958   */\n      0x1d\n        /* \"#utility.yul\":6936:6954   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6929:6959   */\n      mstore\n        /* \"#utility.yul\":6995:7026   */\n      0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000\n        /* \"#utility.yul\":6975:6993   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6968:7027   */\n      mstore\n        /* \"#utility.yul\":7044:7062   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11356:11424  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_140\n        /* \"#utility.yul\":6889:7068   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11356:11424  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n    tag_248:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11466:11517  _approve(owner, spender, currentAllowance - amount) */\n      tag_251\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11475:11480  owner */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11482:11489  spender */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11510:11516  amount */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11491:11507  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11491:11516  currentAllowance - amount */\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11466:11474  _approve */\n      tag_123\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11466:11517  _approve(owner, spender, currentAllowance - amount) */\n      jump\t// in\n    tag_251:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11107:11548  function _spendAllowance(... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7821:8472  function _transfer(... */\n    tag_130:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7947:7965  from != address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7939:8007  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_253\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":8458:8460   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7939:8007  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":8440:8461   */\n      mstore\n        /* \"#utility.yul\":8497:8499   */\n      0x25\n        /* \"#utility.yul\":8477:8495   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":8470:8500   */\n      mstore\n        /* \"#utility.yul\":8536:8570   */\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n        /* \"#utility.yul\":8516:8534   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":8509:8571   */\n      mstore\n      shl(0xd8, 0x6472657373)\n        /* \"#utility.yul\":8587:8605   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":8580:8615   */\n      mstore\n        /* \"#utility.yul\":8632:8651   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7939:8007  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_140\n        /* \"#utility.yul\":8430:8657   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7939:8007  require(from != address(0), \"ERC20: transfer from the zero address\") */\n    tag_253:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8025:8041  to != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8017:8081  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_256\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5022:5024   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8017:8081  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5004:5025   */\n      mstore\n        /* \"#utility.yul\":5061:5063   */\n      0x23\n        /* \"#utility.yul\":5041:5059   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5034:5064   */\n      mstore\n        /* \"#utility.yul\":5100:5134   */\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n        /* \"#utility.yul\":5080:5098   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5073:5135   */\n      mstore\n      shl(0xe8, 0x657373)\n        /* \"#utility.yul\":5151:5169   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":5144:5177   */\n      mstore\n        /* \"#utility.yul\":5194:5213   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8017:8081  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_140\n        /* \"#utility.yul\":4994:5219   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8017:8081  require(to != address(0), \"ERC20: transfer to the zero address\") */\n    tag_256:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8163:8178  _balances[from] */\n      dup4\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8141:8160  uint256 fromBalance */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8163:8178  _balances[from] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8163:8172  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8163:8178  _balances[from] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8196:8217  fromBalance >= amount */\n      dup2\n      dup2\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8188:8260  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_261\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":7275:7277   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8188:8260  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7257:7278   */\n      mstore\n        /* \"#utility.yul\":7314:7316   */\n      0x26\n        /* \"#utility.yul\":7294:7312   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7287:7317   */\n      mstore\n        /* \"#utility.yul\":7353:7387   */\n      0x45524332303a207472616e7366657220616d6f756e7420657863656564732062\n        /* \"#utility.yul\":7333:7351   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7326:7388   */\n      mstore\n      shl(0xd0, 0x616c616e6365)\n        /* \"#utility.yul\":7404:7422   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":7397:7433   */\n      mstore\n        /* \"#utility.yul\":7450:7469   */\n      0x84\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8188:8260  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_140\n        /* \"#utility.yul\":7247:7475   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8188:8260  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n    tag_261:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8294:8309  _balances[from] */\n      dup1\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8294:8303  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8294:8309  _balances[from] */\n      0x20\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8312:8332  fromBalance - amount */\n      dup6\n      dup6\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8294:8332  _balances[from] = fromBalance - amount */\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8352:8365  _balances[to] */\n      swap2\n      dup6\n      and\n      dup2\n      mstore\n      swap1\n      dup2\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8352:8375  _balances[to] += amount */\n      dup1\n      sload\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8326:8332  amount */\n      dup5\n      swap3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8294:8309  _balances[from] */\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8352:8375  _balances[to] += amount */\n      tag_264\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8326:8332  amount */\n      dup5\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8352:8375  _balances[to] += amount */\n      tag_137\n      jump\t// in\n    tag_264:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8406:8408  to */\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8391:8417  Transfer(from, to, amount) */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8400:8404  from */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8391:8417  Transfer(from, to, amount) */\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8410:8416  amount */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8391:8417  Transfer(from, to, amount) */\n      mload(0x40)\n      tag_265\n      swap2\n        /* \"#utility.yul\":10734:10759   */\n      dup2\n      mstore\n        /* \"#utility.yul\":10722:10724   */\n      0x20\n        /* \"#utility.yul\":10707:10725   */\n      add\n      swap1\n        /* \"#utility.yul\":10689:10765   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8391:8417  Transfer(from, to, amount) */\n    tag_265:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8428:8465  _afterTokenTransfer(from, to, amount) */\n      tag_251\n        /* \"contracts/tokens/Moola.sol\":1050:1309  function initialize(string memory name_, string memory symbol_)\r... */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8748:9137  function _mint(address account, uint256 amount) internal virtual {... */\n    tag_144:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8831:8852  account != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8823:8888  require(account != address(0), \"ERC20: mint to the zero address\") */\n      tag_269\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":10430:10432   */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8823:8888  require(account != address(0), \"ERC20: mint to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":10412:10433   */\n      mstore\n        /* \"#utility.yul\":10469:10471   */\n      0x1f\n        /* \"#utility.yul\":10449:10467   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":10442:10472   */\n      mstore\n        /* \"#utility.yul\":10508:10541   */\n      0x45524332303a206d696e7420746f20746865207a65726f206164647265737300\n        /* \"#utility.yul\":10488:10506   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":10481:10542   */\n      mstore\n        /* \"#utility.yul\":10559:10577   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8823:8888  require(account != address(0), \"ERC20: mint to the zero address\") */\n      tag_140\n        /* \"#utility.yul\":10402:10583   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8823:8888  require(account != address(0), \"ERC20: mint to the zero address\") */\n    tag_269:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8975:8981  amount */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8959:8971  _totalSupply */\n      0x35\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8959:8981  _totalSupply += amount */\n      dup3\n      dup3\n      sload\n      tag_273\n      swap2\n      swap1\n      tag_137\n      jump\t// in\n    tag_273:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8991:9009  _balances[account] */\n      dup3\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8991:9000  _balances */\n      0x33\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8991:9009  _balances[account] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8991:9019  _balances[account] += amount */\n      dup1\n      sload\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9013:9019  amount */\n      dup4\n      swap3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8991:9009  _balances[account] */\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8991:9019  _balances[account] += amount */\n      tag_274\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9013:9019  amount */\n      dup5\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8991:9019  _balances[account] += amount */\n      tag_137\n      jump\t// in\n    tag_274:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9034:9071  Transfer(address(0), account, amount) */\n      mload(0x40)\n        /* \"#utility.yul\":10734:10759   */\n      dup2\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9034:9071  Transfer(address(0), account, amount) */\n      dup4\n      and\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9051:9052  0 */\n      0x00\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9034:9071  Transfer(address(0), account, amount) */\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      swap1\n        /* \"#utility.yul\":10722:10724   */\n      0x20\n        /* \"#utility.yul\":10707:10725   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9034:9071  Transfer(address(0), account, amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"contracts/tokens/Moola.sol\":1926:2021  function mint(address to, uint256 amount) external onlyWhitelist {\r... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5287:6095  function _setInitializedVersion(uint8 version) private returns (bool) {... */\n    tag_147:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5351:5355  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5684:5697  _initializing */\n      dup1\n      sload\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5680:6089  if (_initializing) {... */\n      iszero\n      tag_278\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5738:5745  version */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5738:5750  version == 1 */\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5749:5750  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5738:5750  version == 1 */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5738:5799  version == 1 && !AddressUpgradeable.isContract(address(this)) */\n      dup1\n      iszero\n      tag_279\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5793:5797  this */\n      address\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1476:1495  account.code.length */\n      extcodesize\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1476:1499  account.code.length > 0 */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5738:5799  version == 1 && !AddressUpgradeable.isContract(address(this)) */\n    tag_279:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5713:5879  require(... */\n      tag_282\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_140\n      swap1\n      tag_284\n      jump\t// in\n    tag_282:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5900:5905  false */\n      0x00\n      swap2\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5287:6095  function _setInitializedVersion(uint8 version) private returns (bool) {... */\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5680:6089  if (_initializing) {... */\n    tag_278:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5944:5956  _initialized */\n      sload(0x00)\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5944:5966  _initialized < version */\n      0xff\n      dup1\n      dup5\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5944:5956  _initialized */\n      swap2\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5944:5966  _initialized < version */\n      lt\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5936:6017  require(_initialized < version, \"Initializable: contract is already initialized\") */\n      tag_286\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_140\n      swap1\n      tag_284\n      jump\t// in\n    tag_286:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6031:6043  _initialized */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6031:6053  _initialized = version */\n      dup1\n      sload\n      not(0xff)\n      and\n      0xff\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n      0x01\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5287:6095  function _setInitializedVersion(uint8 version) private returns (bool) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2116:2263  function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {... */\n    tag_151:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4698:4711  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4690:4759  require(_initializing, \"Initializable: contract is not initializing\") */\n      tag_289\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_140\n      swap1\n      tag_291\n      jump\t// in\n    tag_289:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2218:2256  __ERC20_init_unchained(name_, symbol_) */\n      tag_143\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2241:2246  name_ */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2248:2255  symbol_ */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2218:2240  __ERC20_init_unchained */\n      tag_294\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2218:2256  __ERC20_init_unchained(name_, symbol_) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":988:1083  function __Ownable_init() internal onlyInitializing {... */\n    tag_153:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4698:4711  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4690:4759  require(_initializing, \"Initializable: contract is not initializing\") */\n      tag_296\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_140\n      swap1\n      tag_291\n      jump\t// in\n    tag_296:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1050:1076  __Ownable_init_unchained() */\n      tag_193\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1050:1074  __Ownable_init_unchained */\n      tag_300\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1050:1076  __Ownable_init_unchained() */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":1048:1145  function __Pausable_init() internal onlyInitializing {... */\n    tag_155:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4698:4711  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4690:4759  require(_initializing, \"Initializable: contract is not initializing\") */\n      tag_302\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_140\n      swap1\n      tag_291\n      jump\t// in\n    tag_302:\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":1111:1138  __Pausable_init_unchained() */\n      tag_193\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":1111:1136  __Pausable_init_unchained */\n      tag_306\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":1111:1138  __Pausable_init_unchained() */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2510:2697  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_194:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2602:2608  _owner */\n      0x65\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2618:2635  _owner = newOwner */\n      dup4\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      swap1\n      swap4\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2650:2690  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2602:2608  _owner */\n      swap2\n      and\n      swap2\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2618:2635  _owner = newOwner */\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2602:2608  _owner */\n      dup3\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2650:2690  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2583:2599  address oldOwner */\n      0x00\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2650:2690  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2510:2697  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2269:2428  function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {... */\n    tag_294:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4698:4711  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4690:4759  require(_initializing, \"Initializable: contract is not initializing\") */\n      tag_312\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_140\n      swap1\n      tag_291\n      jump\t// in\n    tag_312:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2381:2394  _name = name_ */\n      dup2\n      mload\n      tag_315\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2381:2386  _name */\n      0x36\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2381:2394  _name = name_ */\n      0x20\n      dup6\n      add\n      swap1\n      tag_316\n      jump\t// in\n    tag_315:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2404:2421  _symbol = symbol_ */\n      dup1\n      mload\n      tag_157\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2404:2411  _symbol */\n      0x37\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2404:2421  _symbol = symbol_ */\n      0x20\n      dup5\n      add\n      swap1\n      tag_316\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1089:1200  function __Ownable_init_unchained() internal onlyInitializing {... */\n    tag_300:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4698:4711  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4690:4759  require(_initializing, \"Initializable: contract is not initializing\") */\n      tag_319\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_140\n      swap1\n      tag_291\n      jump\t// in\n    tag_319:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1161:1193  _transferOwnership(_msgSender()) */\n      tag_193\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":929:939  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1161:1179  _transferOwnership */\n      tag_194\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1161:1193  _transferOwnership(_msgSender()) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":1151:1246  function __Pausable_init_unchained() internal onlyInitializing {... */\n    tag_306:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4698:4711  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4690:4759  require(_initializing, \"Initializable: contract is not initializing\") */\n      tag_325\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_140\n      swap1\n      tag_291\n      jump\t// in\n    tag_325:\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":1224:1231  _paused */\n      0x97\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":1224:1239  _paused = false */\n      dup1\n      sload\n      not(0xff)\n      and\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":1151:1246  function __Pausable_init_unchained() internal onlyInitializing {... */\n      jump\t// out\n    tag_316:\n      dup3\n      dup1\n      sload\n      tag_328\n      swap1\n      tag_114\n      jump\t// in\n    tag_328:\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n      0x1f\n      add\n      0x20\n      swap1\n      div\n      dup2\n      add\n      swap3\n      dup3\n      tag_330\n      jumpi\n      0x00\n      dup6\n      sstore\n      jump(tag_333)\n    tag_330:\n      dup3\n      0x1f\n      lt\n      tag_331\n      jumpi\n      dup1\n      mload\n      not(0xff)\n      and\n      dup4\n      dup1\n      add\n      or\n      dup6\n      sstore\n      jump(tag_333)\n    tag_331:\n      dup3\n      dup1\n      add\n      0x01\n      add\n      dup6\n      sstore\n      dup3\n      iszero\n      tag_333\n      jumpi\n      swap2\n      dup3\n      add\n    tag_332:\n      dup3\n      dup2\n      gt\n      iszero\n      tag_333\n      jumpi\n      dup3\n      mload\n      dup3\n      sstore\n      swap2\n      0x20\n      add\n      swap2\n      swap1\n      0x01\n      add\n      swap1\n      jump(tag_332)\n    tag_333:\n      pop\n      tag_334\n      swap3\n      swap2\n      pop\n      tag_335\n      jump\t// in\n    tag_334:\n      pop\n      swap1\n      jump\t// out\n    tag_335:\n    tag_336:\n      dup1\n      dup3\n      gt\n      iszero\n      tag_334\n      jumpi\n      0x00\n      dup2\n      sstore\n      0x01\n      add\n      jump(tag_336)\n        /* \"#utility.yul\":14:753   */\n    tag_339:\n        /* \"#utility.yul\":57:62   */\n      0x00\n        /* \"#utility.yul\":110:113   */\n      dup3\n        /* \"#utility.yul\":103:107   */\n      0x1f\n        /* \"#utility.yul\":95:101   */\n      dup4\n        /* \"#utility.yul\":91:108   */\n      add\n        /* \"#utility.yul\":87:114   */\n      slt\n        /* \"#utility.yul\":77:79   */\n      tag_341\n      jumpi\n        /* \"#utility.yul\":132:137   */\n      dup1\n        /* \"#utility.yul\":125:130   */\n      dup2\n        /* \"#utility.yul\":118:138   */\n      revert\n        /* \"#utility.yul\":77:79   */\n    tag_341:\n        /* \"#utility.yul\":172:178   */\n      dup2\n        /* \"#utility.yul\":159:179   */\n      calldataload\n        /* \"#utility.yul\":198:216   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":235:237   */\n      dup1\n        /* \"#utility.yul\":231:233   */\n      dup3\n        /* \"#utility.yul\":228:238   */\n      gt\n        /* \"#utility.yul\":225:227   */\n      iszero\n      tag_343\n      jumpi\n        /* \"#utility.yul\":241:259   */\n      tag_343\n      tag_344\n      jump\t// in\n    tag_343:\n        /* \"#utility.yul\":316:318   */\n      0x40\n        /* \"#utility.yul\":310:319   */\n      mload\n        /* \"#utility.yul\":284:286   */\n      0x1f\n        /* \"#utility.yul\":370:383   */\n      dup4\n      add\n      not(0x1f)\n        /* \"#utility.yul\":366:388   */\n      swap1\n      dup2\n      and\n        /* \"#utility.yul\":390:392   */\n      0x3f\n        /* \"#utility.yul\":362:393   */\n      add\n        /* \"#utility.yul\":358:398   */\n      and\n        /* \"#utility.yul\":346:399   */\n      dup2\n      add\n      swap1\n        /* \"#utility.yul\":414:432   */\n      dup3\n      dup3\n      gt\n        /* \"#utility.yul\":434:456   */\n      dup2\n      dup4\n      lt\n        /* \"#utility.yul\":411:457   */\n      or\n        /* \"#utility.yul\":408:410   */\n      iszero\n      tag_346\n      jumpi\n        /* \"#utility.yul\":460:478   */\n      tag_346\n      tag_344\n      jump\t// in\n    tag_346:\n        /* \"#utility.yul\":500:510   */\n      dup2\n        /* \"#utility.yul\":496:498   */\n      0x40\n        /* \"#utility.yul\":489:511   */\n      mstore\n        /* \"#utility.yul\":535:537   */\n      dup4\n        /* \"#utility.yul\":527:533   */\n      dup2\n        /* \"#utility.yul\":520:538   */\n      mstore\n        /* \"#utility.yul\":581:584   */\n      dup7\n        /* \"#utility.yul\":574:578   */\n      0x20\n        /* \"#utility.yul\":569:571   */\n      dup6\n        /* \"#utility.yul\":561:567   */\n      dup9\n        /* \"#utility.yul\":557:572   */\n      add\n        /* \"#utility.yul\":553:579   */\n      add\n        /* \"#utility.yul\":550:585   */\n      gt\n        /* \"#utility.yul\":547:549   */\n      iszero\n      tag_347\n      jumpi\n        /* \"#utility.yul\":602:607   */\n      dup5\n        /* \"#utility.yul\":595:600   */\n      dup6\n        /* \"#utility.yul\":588:608   */\n      revert\n        /* \"#utility.yul\":547:549   */\n    tag_347:\n        /* \"#utility.yul\":670:672   */\n      dup4\n        /* \"#utility.yul\":663:667   */\n      0x20\n        /* \"#utility.yul\":655:661   */\n      dup8\n        /* \"#utility.yul\":651:668   */\n      add\n        /* \"#utility.yul\":644:648   */\n      0x20\n        /* \"#utility.yul\":636:642   */\n      dup4\n        /* \"#utility.yul\":632:649   */\n      add\n        /* \"#utility.yul\":619:673   */\n      calldatacopy\n        /* \"#utility.yul\":693:708   */\n      swap3\n      dup4\n      add\n        /* \"#utility.yul\":710:714   */\n      0x20\n        /* \"#utility.yul\":689:715   */\n      add\n        /* \"#utility.yul\":682:723   */\n      swap4\n      swap1\n      swap4\n      mstore\n      pop\n        /* \"#utility.yul\":697:703   */\n      swap4\n        /* \"#utility.yul\":67:753   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":758:1015   */\n    tag_74:\n        /* \"#utility.yul\":817:823   */\n      0x00\n        /* \"#utility.yul\":870:872   */\n      0x20\n        /* \"#utility.yul\":858:867   */\n      dup3\n        /* \"#utility.yul\":849:856   */\n      dup5\n        /* \"#utility.yul\":845:868   */\n      sub\n        /* \"#utility.yul\":841:873   */\n      slt\n        /* \"#utility.yul\":838:840   */\n      iszero\n      tag_349\n      jumpi\n        /* \"#utility.yul\":891:897   */\n      dup1\n        /* \"#utility.yul\":883:889   */\n      dup2\n        /* \"#utility.yul\":876:898   */\n      revert\n        /* \"#utility.yul\":838:840   */\n    tag_349:\n        /* \"#utility.yul\":935:944   */\n      dup2\n        /* \"#utility.yul\":922:945   */\n      calldataload\n        /* \"#utility.yul\":954:985   */\n      tag_350\n        /* \"#utility.yul\":979:984   */\n      dup2\n        /* \"#utility.yul\":954:985   */\n      tag_351\n      jump\t// in\n    tag_350:\n        /* \"#utility.yul\":1004:1009   */\n      swap4\n        /* \"#utility.yul\":828:1015   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1020:1281   */\n    tag_173:\n        /* \"#utility.yul\":1090:1096   */\n      0x00\n        /* \"#utility.yul\":1143:1145   */\n      0x20\n        /* \"#utility.yul\":1131:1140   */\n      dup3\n        /* \"#utility.yul\":1122:1129   */\n      dup5\n        /* \"#utility.yul\":1118:1141   */\n      sub\n        /* \"#utility.yul\":1114:1146   */\n      slt\n        /* \"#utility.yul\":1111:1113   */\n      iszero\n      tag_353\n      jumpi\n        /* \"#utility.yul\":1164:1170   */\n      dup1\n        /* \"#utility.yul\":1156:1162   */\n      dup2\n        /* \"#utility.yul\":1149:1171   */\n      revert\n        /* \"#utility.yul\":1111:1113   */\n    tag_353:\n        /* \"#utility.yul\":1201:1210   */\n      dup2\n        /* \"#utility.yul\":1195:1211   */\n      mload\n        /* \"#utility.yul\":1220:1251   */\n      tag_350\n        /* \"#utility.yul\":1245:1250   */\n      dup2\n        /* \"#utility.yul\":1220:1251   */\n      tag_351\n      jump\t// in\n        /* \"#utility.yul\":1286:1684   */\n    tag_106:\n        /* \"#utility.yul\":1354:1360   */\n      0x00\n        /* \"#utility.yul\":1362:1368   */\n      dup1\n        /* \"#utility.yul\":1415:1417   */\n      0x40\n        /* \"#utility.yul\":1403:1412   */\n      dup4\n        /* \"#utility.yul\":1394:1401   */\n      dup6\n        /* \"#utility.yul\":1390:1413   */\n      sub\n        /* \"#utility.yul\":1386:1418   */\n      slt\n        /* \"#utility.yul\":1383:1385   */\n      iszero\n      tag_356\n      jumpi\n        /* \"#utility.yul\":1436:1442   */\n      dup1\n        /* \"#utility.yul\":1428:1434   */\n      dup2\n        /* \"#utility.yul\":1421:1443   */\n      revert\n        /* \"#utility.yul\":1383:1385   */\n    tag_356:\n        /* \"#utility.yul\":1480:1489   */\n      dup3\n        /* \"#utility.yul\":1467:1490   */\n      calldataload\n        /* \"#utility.yul\":1499:1530   */\n      tag_357\n        /* \"#utility.yul\":1524:1529   */\n      dup2\n        /* \"#utility.yul\":1499:1530   */\n      tag_351\n      jump\t// in\n    tag_357:\n        /* \"#utility.yul\":1549:1554   */\n      swap2\n      pop\n        /* \"#utility.yul\":1606:1608   */\n      0x20\n        /* \"#utility.yul\":1591:1609   */\n      dup4\n      add\n        /* \"#utility.yul\":1578:1610   */\n      calldataload\n        /* \"#utility.yul\":1619:1652   */\n      tag_358\n        /* \"#utility.yul\":1578:1610   */\n      dup2\n        /* \"#utility.yul\":1619:1652   */\n      tag_351\n      jump\t// in\n    tag_358:\n        /* \"#utility.yul\":1671:1678   */\n      dup1\n        /* \"#utility.yul\":1661:1678   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":1373:1684   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1689:2155   */\n    tag_44:\n        /* \"#utility.yul\":1766:1772   */\n      0x00\n        /* \"#utility.yul\":1774:1780   */\n      dup1\n        /* \"#utility.yul\":1782:1788   */\n      0x00\n        /* \"#utility.yul\":1835:1837   */\n      0x60\n        /* \"#utility.yul\":1823:1832   */\n      dup5\n        /* \"#utility.yul\":1814:1821   */\n      dup7\n        /* \"#utility.yul\":1810:1833   */\n      sub\n        /* \"#utility.yul\":1806:1838   */\n      slt\n        /* \"#utility.yul\":1803:1805   */\n      iszero\n      tag_360\n      jumpi\n        /* \"#utility.yul\":1856:1862   */\n      dup1\n        /* \"#utility.yul\":1848:1854   */\n      dup2\n        /* \"#utility.yul\":1841:1863   */\n      revert\n        /* \"#utility.yul\":1803:1805   */\n    tag_360:\n        /* \"#utility.yul\":1900:1909   */\n      dup4\n        /* \"#utility.yul\":1887:1910   */\n      calldataload\n        /* \"#utility.yul\":1919:1950   */\n      tag_361\n        /* \"#utility.yul\":1944:1949   */\n      dup2\n        /* \"#utility.yul\":1919:1950   */\n      tag_351\n      jump\t// in\n    tag_361:\n        /* \"#utility.yul\":1969:1974   */\n      swap3\n      pop\n        /* \"#utility.yul\":2026:2028   */\n      0x20\n        /* \"#utility.yul\":2011:2029   */\n      dup5\n      add\n        /* \"#utility.yul\":1998:2030   */\n      calldataload\n        /* \"#utility.yul\":2039:2072   */\n      tag_362\n        /* \"#utility.yul\":1998:2030   */\n      dup2\n        /* \"#utility.yul\":2039:2072   */\n      tag_351\n      jump\t// in\n    tag_362:\n        /* \"#utility.yul\":1793:2155   */\n      swap3\n      swap6\n        /* \"#utility.yul\":2091:2098   */\n      swap3\n      swap5\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":2145:2147   */\n      0x40\n        /* \"#utility.yul\":2130:2148   */\n      swap2\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":2117:2149   */\n      calldataload\n      swap1\n        /* \"#utility.yul\":1793:2155   */\n      jump\t// out\n        /* \"#utility.yul\":2160:2485   */\n    tag_34:\n        /* \"#utility.yul\":2228:2234   */\n      0x00\n        /* \"#utility.yul\":2236:2242   */\n      dup1\n        /* \"#utility.yul\":2289:2291   */\n      0x40\n        /* \"#utility.yul\":2277:2286   */\n      dup4\n        /* \"#utility.yul\":2268:2275   */\n      dup6\n        /* \"#utility.yul\":2264:2287   */\n      sub\n        /* \"#utility.yul\":2260:2292   */\n      slt\n        /* \"#utility.yul\":2257:2259   */\n      iszero\n      tag_364\n      jumpi\n        /* \"#utility.yul\":2310:2316   */\n      dup2\n        /* \"#utility.yul\":2302:2308   */\n      dup3\n        /* \"#utility.yul\":2295:2317   */\n      revert\n        /* \"#utility.yul\":2257:2259   */\n    tag_364:\n        /* \"#utility.yul\":2354:2363   */\n      dup3\n        /* \"#utility.yul\":2341:2364   */\n      calldataload\n        /* \"#utility.yul\":2373:2404   */\n      tag_365\n        /* \"#utility.yul\":2398:2403   */\n      dup2\n        /* \"#utility.yul\":2373:2404   */\n      tag_351\n      jump\t// in\n    tag_365:\n        /* \"#utility.yul\":2423:2428   */\n      swap5\n        /* \"#utility.yul\":2475:2477   */\n      0x20\n        /* \"#utility.yul\":2460:2478   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":2447:2479   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":2247:2485   */\n      jump\t// out\n        /* \"#utility.yul\":2490:3063   */\n    tag_60:\n        /* \"#utility.yul\":2578:2584   */\n      0x00\n        /* \"#utility.yul\":2586:2592   */\n      dup1\n        /* \"#utility.yul\":2639:2641   */\n      0x40\n        /* \"#utility.yul\":2627:2636   */\n      dup4\n        /* \"#utility.yul\":2618:2625   */\n      dup6\n        /* \"#utility.yul\":2614:2637   */\n      sub\n        /* \"#utility.yul\":2610:2642   */\n      slt\n        /* \"#utility.yul\":2607:2609   */\n      iszero\n      tag_367\n      jumpi\n        /* \"#utility.yul\":2660:2666   */\n      dup2\n        /* \"#utility.yul\":2652:2658   */\n      dup3\n        /* \"#utility.yul\":2645:2667   */\n      revert\n        /* \"#utility.yul\":2607:2609   */\n    tag_367:\n        /* \"#utility.yul\":2705:2714   */\n      dup3\n        /* \"#utility.yul\":2692:2715   */\n      calldataload\n        /* \"#utility.yul\":2734:2752   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":2775:2777   */\n      dup1\n        /* \"#utility.yul\":2767:2773   */\n      dup3\n        /* \"#utility.yul\":2764:2778   */\n      gt\n        /* \"#utility.yul\":2761:2763   */\n      iszero\n      tag_368\n      jumpi\n        /* \"#utility.yul\":2796:2802   */\n      dup4\n        /* \"#utility.yul\":2788:2794   */\n      dup5\n        /* \"#utility.yul\":2781:2803   */\n      revert\n        /* \"#utility.yul\":2761:2763   */\n    tag_368:\n        /* \"#utility.yul\":2824:2874   */\n      tag_369\n        /* \"#utility.yul\":2866:2873   */\n      dup7\n        /* \"#utility.yul\":2857:2863   */\n      dup4\n        /* \"#utility.yul\":2846:2855   */\n      dup8\n        /* \"#utility.yul\":2842:2864   */\n      add\n        /* \"#utility.yul\":2824:2874   */\n      tag_339\n      jump\t// in\n    tag_369:\n        /* \"#utility.yul\":2814:2874   */\n      swap4\n      pop\n        /* \"#utility.yul\":2927:2929   */\n      0x20\n        /* \"#utility.yul\":2916:2925   */\n      dup6\n        /* \"#utility.yul\":2912:2930   */\n      add\n        /* \"#utility.yul\":2899:2931   */\n      calldataload\n        /* \"#utility.yul\":2883:2931   */\n      swap2\n      pop\n        /* \"#utility.yul\":2956:2958   */\n      dup1\n        /* \"#utility.yul\":2946:2954   */\n      dup3\n        /* \"#utility.yul\":2943:2959   */\n      gt\n        /* \"#utility.yul\":2940:2942   */\n      iszero\n      tag_370\n      jumpi\n        /* \"#utility.yul\":2977:2983   */\n      dup3\n        /* \"#utility.yul\":2969:2975   */\n      dup4\n        /* \"#utility.yul\":2962:2984   */\n      revert\n        /* \"#utility.yul\":2940:2942   */\n    tag_370:\n      pop\n        /* \"#utility.yul\":3005:3057   */\n      tag_371\n        /* \"#utility.yul\":3049:3056   */\n      dup6\n        /* \"#utility.yul\":3038:3046   */\n      dup3\n        /* \"#utility.yul\":3027:3036   */\n      dup7\n        /* \"#utility.yul\":3023:3047   */\n      add\n        /* \"#utility.yul\":3005:3057   */\n      tag_339\n      jump\t// in\n    tag_371:\n        /* \"#utility.yul\":2995:3057   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":2597:3063   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3068:3258   */\n    tag_64:\n        /* \"#utility.yul\":3127:3133   */\n      0x00\n        /* \"#utility.yul\":3180:3182   */\n      0x20\n        /* \"#utility.yul\":3168:3177   */\n      dup3\n        /* \"#utility.yul\":3159:3166   */\n      dup5\n        /* \"#utility.yul\":3155:3178   */\n      sub\n        /* \"#utility.yul\":3151:3183   */\n      slt\n        /* \"#utility.yul\":3148:3150   */\n      iszero\n      tag_373\n      jumpi\n        /* \"#utility.yul\":3201:3207   */\n      dup1\n        /* \"#utility.yul\":3193:3199   */\n      dup2\n        /* \"#utility.yul\":3186:3208   */\n      revert\n        /* \"#utility.yul\":3148:3150   */\n    tag_373:\n      pop\n        /* \"#utility.yul\":3229:3252   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":3138:3258   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4212:4815   */\n    tag_31:\n        /* \"#utility.yul\":4324:4328   */\n      0x00\n        /* \"#utility.yul\":4353:4355   */\n      0x20\n        /* \"#utility.yul\":4382:4384   */\n      dup1\n        /* \"#utility.yul\":4371:4380   */\n      dup4\n        /* \"#utility.yul\":4364:4385   */\n      mstore\n        /* \"#utility.yul\":4414:4420   */\n      dup4\n        /* \"#utility.yul\":4408:4421   */\n      mload\n        /* \"#utility.yul\":4457:4463   */\n      dup1\n        /* \"#utility.yul\":4452:4454   */\n      dup3\n        /* \"#utility.yul\":4441:4450   */\n      dup6\n        /* \"#utility.yul\":4437:4455   */\n      add\n        /* \"#utility.yul\":4430:4464   */\n      mstore\n        /* \"#utility.yul\":4482:4486   */\n      dup3\n        /* \"#utility.yul\":4495:4635   */\n    tag_379:\n        /* \"#utility.yul\":4509:4515   */\n      dup2\n        /* \"#utility.yul\":4506:4507   */\n      dup2\n        /* \"#utility.yul\":4503:4516   */\n      lt\n        /* \"#utility.yul\":4495:4635   */\n      iszero\n      tag_381\n      jumpi\n        /* \"#utility.yul\":4604:4618   */\n      dup6\n      dup2\n      add\n        /* \"#utility.yul\":4600:4623   */\n      dup4\n      add\n        /* \"#utility.yul\":4594:4624   */\n      mload\n        /* \"#utility.yul\":4570:4587   */\n      dup6\n      dup3\n      add\n        /* \"#utility.yul\":4589:4591   */\n      0x40\n        /* \"#utility.yul\":4566:4592   */\n      add\n        /* \"#utility.yul\":4559:4625   */\n      mstore\n        /* \"#utility.yul\":4524:4534   */\n      dup3\n      add\n        /* \"#utility.yul\":4495:4635   */\n      jump(tag_379)\n    tag_381:\n        /* \"#utility.yul\":4653:4659   */\n      dup2\n        /* \"#utility.yul\":4650:4651   */\n      dup2\n        /* \"#utility.yul\":4647:4660   */\n      gt\n        /* \"#utility.yul\":4644:4646   */\n      iszero\n      tag_382\n      jumpi\n        /* \"#utility.yul\":4723:4727   */\n      dup4\n        /* \"#utility.yul\":4718:4720   */\n      0x40\n        /* \"#utility.yul\":4709:4715   */\n      dup4\n        /* \"#utility.yul\":4698:4707   */\n      dup8\n        /* \"#utility.yul\":4694:4716   */\n      add\n        /* \"#utility.yul\":4690:4721   */\n      add\n        /* \"#utility.yul\":4683:4728   */\n      mstore\n        /* \"#utility.yul\":4644:4646   */\n    tag_382:\n      pop\n        /* \"#utility.yul\":4799:4801   */\n      0x1f\n        /* \"#utility.yul\":4778:4793   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":4774:4803   */\n      and\n        /* \"#utility.yul\":4759:4804   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":4806:4808   */\n      0x40\n        /* \"#utility.yul\":4755:4809   */\n      add\n      swap4\n        /* \"#utility.yul\":4333:4815   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7480:7890   */\n    tag_284:\n        /* \"#utility.yul\":7682:7684   */\n      0x20\n        /* \"#utility.yul\":7664:7685   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":7721:7723   */\n      0x2e\n        /* \"#utility.yul\":7701:7719   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":7694:7724   */\n      mstore\n        /* \"#utility.yul\":7760:7794   */\n      0x496e697469616c697a61626c653a20636f6e747261637420697320616c726561\n        /* \"#utility.yul\":7755:7757   */\n      0x40\n        /* \"#utility.yul\":7740:7758   */\n      dup3\n      add\n        /* \"#utility.yul\":7733:7795   */\n      mstore\n      shl(0x92, 0x191e481a5b9a5d1a585b1a5e9959)\n        /* \"#utility.yul\":7826:7828   */\n      0x60\n        /* \"#utility.yul\":7811:7829   */\n      dup3\n      add\n        /* \"#utility.yul\":7804:7848   */\n      mstore\n        /* \"#utility.yul\":7880:7883   */\n      0x80\n        /* \"#utility.yul\":7865:7884   */\n      add\n      swap1\n        /* \"#utility.yul\":7654:7890   */\n      jump\t// out\n        /* \"#utility.yul\":7895:8251   */\n    tag_165:\n        /* \"#utility.yul\":8097:8099   */\n      0x20\n        /* \"#utility.yul\":8079:8100   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":8116:8134   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":8109:8139   */\n      mstore\n        /* \"#utility.yul\":8175:8209   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":8170:8172   */\n      0x40\n        /* \"#utility.yul\":8155:8173   */\n      dup3\n      add\n        /* \"#utility.yul\":8148:8210   */\n      mstore\n        /* \"#utility.yul\":8242:8244   */\n      0x60\n        /* \"#utility.yul\":8227:8245   */\n      add\n      swap1\n        /* \"#utility.yul\":8069:8251   */\n      jump\t// out\n        /* \"#utility.yul\":9067:9474   */\n    tag_291:\n        /* \"#utility.yul\":9269:9271   */\n      0x20\n        /* \"#utility.yul\":9251:9272   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":9308:9310   */\n      0x2b\n        /* \"#utility.yul\":9288:9306   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":9281:9311   */\n      mstore\n        /* \"#utility.yul\":9347:9381   */\n      0x496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069\n        /* \"#utility.yul\":9342:9344   */\n      0x40\n        /* \"#utility.yul\":9327:9345   */\n      dup3\n      add\n        /* \"#utility.yul\":9320:9382   */\n      mstore\n      shl(0xa8, 0x6e697469616c697a696e67)\n        /* \"#utility.yul\":9413:9415   */\n      0x60\n        /* \"#utility.yul\":9398:9416   */\n      dup3\n      add\n        /* \"#utility.yul\":9391:9432   */\n      mstore\n        /* \"#utility.yul\":9464:9467   */\n      0x80\n        /* \"#utility.yul\":9449:9468   */\n      add\n      swap1\n        /* \"#utility.yul\":9241:9474   */\n      jump\t// out\n        /* \"#utility.yul\":10959:11087   */\n    tag_137:\n        /* \"#utility.yul\":10999:11002   */\n      0x00\n        /* \"#utility.yul\":11030:11031   */\n      dup3\n        /* \"#utility.yul\":11026:11032   */\n      not\n        /* \"#utility.yul\":11023:11024   */\n      dup3\n        /* \"#utility.yul\":11020:11033   */\n      gt\n        /* \"#utility.yul\":11017:11019   */\n      iszero\n      tag_402\n      jumpi\n        /* \"#utility.yul\":11036:11054   */\n      tag_402\n      tag_403\n      jump\t// in\n    tag_402:\n      pop\n        /* \"#utility.yul\":11072:11081   */\n      add\n      swap1\n        /* \"#utility.yul\":11007:11087   */\n      jump\t// out\n        /* \"#utility.yul\":11092:11217   */\n    tag_178:\n        /* \"#utility.yul\":11132:11136   */\n      0x00\n        /* \"#utility.yul\":11160:11161   */\n      dup3\n        /* \"#utility.yul\":11157:11158   */\n      dup3\n        /* \"#utility.yul\":11154:11162   */\n      lt\n        /* \"#utility.yul\":11151:11153   */\n      iszero\n      tag_406\n      jumpi\n        /* \"#utility.yul\":11165:11183   */\n      tag_406\n      tag_403\n      jump\t// in\n    tag_406:\n      pop\n        /* \"#utility.yul\":11202:11211   */\n      sub\n      swap1\n        /* \"#utility.yul\":11141:11217   */\n      jump\t// out\n        /* \"#utility.yul\":11222:11602   */\n    tag_114:\n        /* \"#utility.yul\":11301:11302   */\n      0x01\n        /* \"#utility.yul\":11297:11309   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":11344:11356   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":11365:11367   */\n      tag_408\n      jumpi\n        /* \"#utility.yul\":11419:11423   */\n      0x7f\n        /* \"#utility.yul\":11411:11417   */\n      dup3\n        /* \"#utility.yul\":11407:11424   */\n      and\n        /* \"#utility.yul\":11397:11424   */\n      swap2\n      pop\n        /* \"#utility.yul\":11365:11367   */\n    tag_408:\n        /* \"#utility.yul\":11472:11474   */\n      0x20\n        /* \"#utility.yul\":11464:11470   */\n      dup3\n        /* \"#utility.yul\":11461:11475   */\n      lt\n        /* \"#utility.yul\":11441:11459   */\n      dup2\n        /* \"#utility.yul\":11438:11476   */\n      eq\n        /* \"#utility.yul\":11435:11437   */\n      iszero\n      tag_409\n      jumpi\n        /* \"#utility.yul\":11518:11528   */\n      0x4e487b71\n        /* \"#utility.yul\":11513:11516   */\n      0xe0\n        /* \"#utility.yul\":11509:11529   */\n      shl\n        /* \"#utility.yul\":11506:11507   */\n      0x00\n        /* \"#utility.yul\":11499:11530   */\n      mstore\n        /* \"#utility.yul\":11553:11557   */\n      0x22\n        /* \"#utility.yul\":11550:11551   */\n      0x04\n        /* \"#utility.yul\":11543:11558   */\n      mstore\n        /* \"#utility.yul\":11581:11585   */\n      0x24\n        /* \"#utility.yul\":11578:11579   */\n      0x00\n        /* \"#utility.yul\":11571:11586   */\n      revert\n        /* \"#utility.yul\":11435:11437   */\n    tag_409:\n      pop\n        /* \"#utility.yul\":11277:11602   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11607:11734   */\n    tag_403:\n        /* \"#utility.yul\":11668:11678   */\n      0x4e487b71\n        /* \"#utility.yul\":11663:11666   */\n      0xe0\n        /* \"#utility.yul\":11659:11679   */\n      shl\n        /* \"#utility.yul\":11656:11657   */\n      0x00\n        /* \"#utility.yul\":11649:11680   */\n      mstore\n        /* \"#utility.yul\":11699:11703   */\n      0x11\n        /* \"#utility.yul\":11696:11697   */\n      0x04\n        /* \"#utility.yul\":11689:11704   */\n      mstore\n        /* \"#utility.yul\":11723:11727   */\n      0x24\n        /* \"#utility.yul\":11720:11721   */\n      0x00\n        /* \"#utility.yul\":11713:11728   */\n      revert\n        /* \"#utility.yul\":11739:11866   */\n    tag_344:\n        /* \"#utility.yul\":11800:11810   */\n      0x4e487b71\n        /* \"#utility.yul\":11795:11798   */\n      0xe0\n        /* \"#utility.yul\":11791:11811   */\n      shl\n        /* \"#utility.yul\":11788:11789   */\n      0x00\n        /* \"#utility.yul\":11781:11812   */\n      mstore\n        /* \"#utility.yul\":11831:11835   */\n      0x41\n        /* \"#utility.yul\":11828:11829   */\n      0x04\n        /* \"#utility.yul\":11821:11836   */\n      mstore\n        /* \"#utility.yul\":11855:11859   */\n      0x24\n        /* \"#utility.yul\":11852:11853   */\n      0x00\n        /* \"#utility.yul\":11845:11860   */\n      revert\n        /* \"#utility.yul\":11871:12002   */\n    tag_351:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":11946:11977   */\n      dup2\n      and\n        /* \"#utility.yul\":11936:11978   */\n      dup2\n      eq\n        /* \"#utility.yul\":11926:11928   */\n      tag_235\n      jumpi\n        /* \"#utility.yul\":11992:11993   */\n      0x00\n        /* \"#utility.yul\":11989:11990   */\n      dup1\n        /* \"#utility.yul\":11982:11994   */\n      revert\n\n    auxdata: 0xa26469706673582212205862b08996d209c1fc6a0ee03bcc43640577bace9ae5e15c2b1eb96030b1a37464736f6c63430008040033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13C1 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x142 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xA457C2D7 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x28F JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x2A2 JUMPI DUP1 PUSH4 0xBE023D84 EQ PUSH2 0x2B5 JUMPI DUP1 PUSH4 0xD1A20509 EQ PUSH2 0x2C8 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x2E8 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x228 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x251 JUMPI DUP1 PUSH4 0x854CFF2F EQ PUSH2 0x259 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x26C JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x287 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x39509351 GT PUSH2 0x10A JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x1BC JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x1CF JUMPI DUP1 PUSH4 0x4CD88B76 EQ PUSH2 0x1E4 JUMPI DUP1 PUSH4 0x4FC3F41A EQ PUSH2 0x1F7 JUMPI DUP1 PUSH4 0x59176C8D EQ PUSH2 0x20A JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x21D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x165 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x188 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1AD JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14F PUSH2 0x30E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15C SWAP2 SWAP1 PUSH2 0x11BF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x178 PUSH2 0x173 CALLDATASIZE PUSH1 0x4 PUSH2 0x111B JUMP JUMPDEST PUSH2 0x3A0 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x15C JUMP JUMPDEST PUSH1 0x35 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x15C JUMP JUMPDEST PUSH2 0x178 PUSH2 0x1A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x10DB JUMP JUMPDEST PUSH2 0x3B8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x15C JUMP JUMPDEST PUSH2 0x178 PUSH2 0x1CA CALLDATASIZE PUSH1 0x4 PUSH2 0x111B JUMP JUMPDEST PUSH2 0x3DC JUMP JUMPDEST PUSH2 0x1E2 PUSH2 0x1DD CALLDATASIZE PUSH1 0x4 PUSH2 0x111B JUMP JUMPDEST PUSH2 0x3FE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1E2 PUSH2 0x1F2 CALLDATASIZE PUSH1 0x4 PUSH2 0x1146 JUMP JUMPDEST PUSH2 0x461 JUMP JUMPDEST PUSH2 0x1E2 PUSH2 0x205 CALLDATASIZE PUSH1 0x4 PUSH2 0x11A7 JUMP JUMPDEST PUSH2 0x505 JUMP JUMPDEST PUSH2 0x1E2 PUSH2 0x218 CALLDATASIZE PUSH1 0x4 PUSH2 0x11A7 JUMP JUMPDEST PUSH2 0x534 JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0xFF AND PUSH2 0x178 JUMP JUMPDEST PUSH2 0x18C PUSH2 0x236 CALLDATASIZE PUSH1 0x4 PUSH2 0x1064 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1E2 PUSH2 0x6B1 JUMP JUMPDEST PUSH2 0x1E2 PUSH2 0x267 CALLDATASIZE PUSH1 0x4 PUSH2 0x1064 JUMP JUMPDEST PUSH2 0x6E7 JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x15C JUMP JUMPDEST PUSH2 0x14F PUSH2 0x735 JUMP JUMPDEST PUSH2 0x178 PUSH2 0x29D CALLDATASIZE PUSH1 0x4 PUSH2 0x111B JUMP JUMPDEST PUSH2 0x744 JUMP JUMPDEST PUSH2 0x178 PUSH2 0x2B0 CALLDATASIZE PUSH1 0x4 PUSH2 0x111B JUMP JUMPDEST PUSH2 0x7BF JUMP JUMPDEST PUSH2 0x1E2 PUSH2 0x2C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1064 JUMP JUMPDEST PUSH2 0x7CD JUMP JUMPDEST PUSH2 0x18C PUSH2 0x2D6 CALLDATASIZE PUSH1 0x4 PUSH2 0x11A7 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xCD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x18C PUSH2 0x2F6 CALLDATASIZE PUSH1 0x4 PUSH2 0x10A3 JUMP JUMPDEST PUSH2 0x819 JUMP JUMPDEST PUSH2 0x1E2 PUSH2 0x309 CALLDATASIZE PUSH1 0x4 PUSH2 0x1064 JUMP JUMPDEST PUSH2 0x844 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x31D SWAP1 PUSH2 0x130F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x349 SWAP1 PUSH2 0x130F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x396 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x36B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x396 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x379 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x3AE DUP2 DUP6 DUP6 PUSH2 0x8DF JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x3C6 DUP6 DUP3 DUP6 PUSH2 0xA03 JUMP JUMPDEST PUSH2 0x3D1 DUP6 DUP6 DUP6 PUSH2 0xA7D JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x3AE DUP2 DUP6 DUP6 PUSH2 0x3EF DUP4 DUP4 PUSH2 0x819 JUMP JUMPDEST PUSH2 0x3F9 SWAP2 SWAP1 PUSH2 0x12E0 JUMP JUMPDEST PUSH2 0x8DF JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xCC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x453 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x13DB9B1E481DDA1A5D195B1A5CDD PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x45D DUP3 DUP3 PUSH2 0xC4B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x46D PUSH1 0x1 PUSH2 0xD2A JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x485 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0x48F DUP4 DUP4 PUSH2 0xDB2 JUMP JUMPDEST PUSH2 0x497 PUSH2 0xDE3 JUMP JUMPDEST PUSH2 0x49F PUSH2 0xE12 JUMP JUMPDEST PUSH2 0x4B5 CALLER PUSH12 0x204FCE5E3E25026110000000 PUSH2 0xC4B JUMP JUMPDEST PUSH1 0x3C PUSH1 0xCA SSTORE DUP1 ISZERO PUSH2 0x500 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x52F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44A SWAP1 PUSH2 0x1260 JUMP JUMPDEST PUSH1 0xCA SSTORE JUMP JUMPDEST PUSH1 0xCB SLOAD PUSH1 0x40 MLOAD PUSH4 0x31A9108F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE CALLER SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x578 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x58C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5B0 SWAP2 SWAP1 PUSH2 0x1087 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5F5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x15539055551213D492569151 PUSH1 0xA2 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44A JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xCD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH3 0x15180 SWAP1 PUSH2 0x613 SWAP1 TIMESTAMP PUSH2 0x12F8 JUMP JUMPDEST LT ISZERO PUSH2 0x64F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x27A71021A7A7A62227ABA7 PUSH1 0xA9 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44A JUMP JUMPDEST PUSH2 0x65B CALLER PUSH1 0xC9 SLOAD PUSH2 0xC4B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xCD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 TIMESTAMP SWAP1 DUP2 SWAP1 SSTORE PUSH1 0xC9 SLOAD DUP4 MLOAD CALLER DUP2 MSTORE SWAP3 DUP4 ADD MSTORE DUP2 DUP4 ADD MSTORE SWAP1 MLOAD PUSH32 0x8DCE8756778B482EF8CFEF8C65FAADC506CE94E081BB6CC3A2D3448D99DE9A50 SWAP2 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x6DB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44A SWAP1 PUSH2 0x1260 JUMP JUMPDEST PUSH2 0x6E5 PUSH1 0x0 PUSH2 0xE41 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x711 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44A SWAP1 PUSH2 0x1260 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xCC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x31D SWAP1 PUSH2 0x130F JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x752 DUP3 DUP7 PUSH2 0x819 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x7B2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x44A JUMP JUMPDEST PUSH2 0x3D1 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x8DF JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x3AE DUP2 DUP6 DUP6 PUSH2 0xA7D JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x7F7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44A SWAP1 PUSH2 0x1260 JUMP JUMPDEST PUSH1 0xCB DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x86E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44A SWAP1 PUSH2 0x1260 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x8D3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x44A JUMP JUMPDEST PUSH2 0x8DC DUP2 PUSH2 0xE41 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x941 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x44A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x9A2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x44A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA0F DUP5 DUP5 PUSH2 0x819 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0xA77 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xA6A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44A JUMP JUMPDEST PUSH2 0xA77 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x8DF JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xAE1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x44A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xB43 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x44A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0xBBB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x44A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0xBF2 SWAP1 DUP5 SWAP1 PUSH2 0x12E0 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xC3E SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xA77 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xCA1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44A JUMP JUMPDEST DUP1 PUSH1 0x35 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xCB3 SWAP2 SWAP1 PUSH2 0x12E0 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0xCE0 SWAP1 DUP5 SWAP1 PUSH2 0x12E0 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xD71 JUMPI DUP2 PUSH1 0xFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0xD4D JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST PUSH2 0xD69 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44A SWAP1 PUSH2 0x1212 JUMP JUMPDEST POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF DUP1 DUP5 AND SWAP2 AND LT PUSH2 0xD98 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44A SWAP1 PUSH2 0x1212 JUMP JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xDD9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44A SWAP1 PUSH2 0x1295 JUMP JUMPDEST PUSH2 0x45D DUP3 DUP3 PUSH2 0xE93 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xE0A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44A SWAP1 PUSH2 0x1295 JUMP JUMPDEST PUSH2 0x6E5 PUSH2 0xEE1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xE39 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44A SWAP1 PUSH2 0x1295 JUMP JUMPDEST PUSH2 0x6E5 PUSH2 0xF11 JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xEBA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44A SWAP1 PUSH2 0x1295 JUMP JUMPDEST DUP2 MLOAD PUSH2 0xECD SWAP1 PUSH1 0x36 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH2 0xF44 JUMP JUMPDEST POP DUP1 MLOAD PUSH2 0x500 SWAP1 PUSH1 0x37 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0xF44 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xF08 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44A SWAP1 PUSH2 0x1295 JUMP JUMPDEST PUSH2 0x6E5 CALLER PUSH2 0xE41 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xF38 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44A SWAP1 PUSH2 0x1295 JUMP JUMPDEST PUSH1 0x97 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0xF50 SWAP1 PUSH2 0x130F JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0xF72 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0xFB8 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0xF8B JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0xFB8 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0xFB8 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0xFB8 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xF9D JUMP JUMPDEST POP PUSH2 0xFC4 SWAP3 SWAP2 POP PUSH2 0xFC8 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0xFC4 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xFC9 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xFED JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1008 JUMPI PUSH2 0x1008 PUSH2 0x1360 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x1030 JUMPI PUSH2 0x1030 PUSH2 0x1360 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH2 0x1048 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP4 PUSH1 0x20 DUP8 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY SWAP3 DUP4 ADD PUSH1 0x20 ADD SWAP4 SWAP1 SWAP4 MSTORE POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1075 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1080 DUP2 PUSH2 0x1376 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1098 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1080 DUP2 PUSH2 0x1376 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x10B5 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x10C0 DUP2 PUSH2 0x1376 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x10D0 DUP2 PUSH2 0x1376 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x10EF JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x10FA DUP2 PUSH2 0x1376 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x110A DUP2 PUSH2 0x1376 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x112D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1138 DUP2 PUSH2 0x1376 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1158 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x116F JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x117B DUP7 DUP4 DUP8 ADD PUSH2 0xFDD JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1190 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x119D DUP6 DUP3 DUP7 ADD PUSH2 0xFDD JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11B8 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x11EB JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x11CF JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x11FC JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x12F3 JUMPI PUSH2 0x12F3 PUSH2 0x134A JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x130A JUMPI PUSH2 0x130A PUSH2 0x134A JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1323 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1344 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x8DC JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PC PUSH3 0xB08996 0xD2 MULMOD 0xC1 0xFC PUSH11 0xEE03BCC43640577BACE9A 0xE5 0xE1 0x5C 0x2B 0x1E 0xB9 PUSH1 0x30 0xB1 LOG3 PUSH21 0x64736F6C6343000804003300000000000000000000 ",
							"sourceMap": "562:1988:13:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:12004:14",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:14",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "67:686:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "116:24:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "125:5:14"
																				},
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "132:5:14"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "118:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "118:20:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "118:20:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "95:6:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "103:4:14",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "91:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "91:17:14"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "110:3:14"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "87:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "87:27:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "80:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "80:35:14"
															},
															"nodeType": "YulIf",
															"src": "77:2:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "149:30:14",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "172:6:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "159:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "159:20:14"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "153:2:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "188:28:14",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "198:18:14",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "192:2:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "239:22:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "241:16:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "241:18:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "241:18:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "231:2:14"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "235:2:14"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "228:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "228:10:14"
															},
															"nodeType": "YulIf",
															"src": "225:2:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "270:17:14",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "284:2:14",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nodeType": "YulIdentifier",
																	"src": "280:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "280:7:14"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "274:2:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "296:23:14",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "316:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "310:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "310:9:14"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "300:6:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "328:71:14",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "350:6:14"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"name": "_1",
																										"nodeType": "YulIdentifier",
																										"src": "374:2:14"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "378:4:14",
																										"type": "",
																										"value": "0x1f"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "370:3:14"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "370:13:14"
																							},
																							{
																								"name": "_3",
																								"nodeType": "YulIdentifier",
																								"src": "385:2:14"
																							}
																						],
																						"functionName": {
																							"name": "and",
																							"nodeType": "YulIdentifier",
																							"src": "366:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "366:22:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "390:2:14",
																						"type": "",
																						"value": "63"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "362:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "362:31:14"
																			},
																			{
																				"name": "_3",
																				"nodeType": "YulIdentifier",
																				"src": "395:2:14"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "358:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "358:40:14"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "346:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "346:53:14"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "332:10:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "458:22:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "460:16:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "460:18:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "460:18:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "417:10:14"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "429:2:14"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "414:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "414:18:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "437:10:14"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "449:6:14"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "434:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "434:22:14"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "411:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "411:46:14"
															},
															"nodeType": "YulIf",
															"src": "408:2:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "496:2:14",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "500:10:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "489:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "489:22:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "489:22:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "527:6:14"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "535:2:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "520:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "520:18:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "520:18:14"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "586:24:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "595:5:14"
																				},
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "602:5:14"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "588:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "588:20:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "588:20:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "561:6:14"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "569:2:14"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "557:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "557:15:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "574:4:14",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "553:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "553:26:14"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "581:3:14"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "550:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "550:35:14"
															},
															"nodeType": "YulIf",
															"src": "547:2:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "636:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "644:4:14",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "632:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "632:17:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "655:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "663:4:14",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "651:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "651:17:14"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "670:2:14"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nodeType": "YulIdentifier",
																	"src": "619:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "619:54:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "619:54:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memPtr",
																						"nodeType": "YulIdentifier",
																						"src": "697:6:14"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "705:2:14"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "693:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "693:15:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "710:4:14",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "689:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "689:26:14"
																	},
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "717:5:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "682:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "682:41:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "682:41:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "732:15:14",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "741:6:14"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "732:5:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_string",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "41:6:14",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "49:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "57:5:14",
														"type": ""
													}
												],
												"src": "14:739:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "828:187:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "874:26:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "883:6:14"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "891:6:14"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "876:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "876:22:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "876:22:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "849:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "858:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "845:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "845:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "870:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "841:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "841:32:14"
															},
															"nodeType": "YulIf",
															"src": "838:2:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "909:36:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "935:9:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "922:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "922:23:14"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "913:5:14",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "979:5:14"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "954:24:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "954:31:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "954:31:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "994:15:14",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1004:5:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "994:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "794:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "805:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "817:6:14",
														"type": ""
													}
												],
												"src": "758:257:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1101:180:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1147:26:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1156:6:14"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1164:6:14"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1149:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1149:22:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1149:22:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1122:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1131:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1118:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1118:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1143:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1114:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1114:32:14"
															},
															"nodeType": "YulIf",
															"src": "1111:2:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1182:29:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1201:9:14"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1195:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1195:16:14"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "1186:5:14",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1245:5:14"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "1220:24:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1220:31:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1220:31:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1260:15:14",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1270:5:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1260:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1067:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1078:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1090:6:14",
														"type": ""
													}
												],
												"src": "1020:261:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1373:311:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1419:26:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "1428:6:14"
																				},
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "1436:6:14"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1421:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1421:22:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1421:22:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1394:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1403:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1390:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1390:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1415:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1386:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1386:32:14"
															},
															"nodeType": "YulIf",
															"src": "1383:2:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1454:36:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1480:9:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1467:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1467:23:14"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "1458:5:14",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1524:5:14"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "1499:24:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1499:31:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1499:31:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1539:15:14",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1549:5:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1539:6:14"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1563:47:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1595:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1606:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1591:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1591:18:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1578:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1578:32:14"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nodeType": "YulTypedName",
																	"src": "1567:7:14",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value_1",
																		"nodeType": "YulIdentifier",
																		"src": "1644:7:14"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "1619:24:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1619:33:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1619:33:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1661:17:14",
															"value": {
																"name": "value_1",
																"nodeType": "YulIdentifier",
																"src": "1671:7:14"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1661:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1331:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1342:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1354:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1362:6:14",
														"type": ""
													}
												],
												"src": "1286:398:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1793:362:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1839:26:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "1848:6:14"
																				},
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "1856:6:14"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1841:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1841:22:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1841:22:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1814:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1823:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1810:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1810:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1835:2:14",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1806:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1806:32:14"
															},
															"nodeType": "YulIf",
															"src": "1803:2:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1874:36:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1900:9:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1887:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1887:23:14"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "1878:5:14",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1944:5:14"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "1919:24:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1919:31:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1919:31:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1959:15:14",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1969:5:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1959:6:14"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1983:47:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2015:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2026:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2011:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2011:18:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1998:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1998:32:14"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nodeType": "YulTypedName",
																	"src": "1987:7:14",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value_1",
																		"nodeType": "YulIdentifier",
																		"src": "2064:7:14"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "2039:24:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2039:33:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2039:33:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2081:17:14",
															"value": {
																"name": "value_1",
																"nodeType": "YulIdentifier",
																"src": "2091:7:14"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2081:6:14"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2107:42:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2134:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2145:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2130:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2130:18:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2117:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2117:32:14"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "2107:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1743:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1754:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1766:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1774:6:14",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1782:6:14",
														"type": ""
													}
												],
												"src": "1689:466:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2247:238:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2293:26:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2302:6:14"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2310:6:14"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2295:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2295:22:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2295:22:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2268:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2277:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2264:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2264:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2289:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2260:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2260:32:14"
															},
															"nodeType": "YulIf",
															"src": "2257:2:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2328:36:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2354:9:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2341:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2341:23:14"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "2332:5:14",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2398:5:14"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "2373:24:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2373:31:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2373:31:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2413:15:14",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "2423:5:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2413:6:14"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2437:42:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2464:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2475:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2460:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2460:18:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2447:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2447:32:14"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2437:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2205:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2216:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2228:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2236:6:14",
														"type": ""
													}
												],
												"src": "2160:325:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2597:466:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2643:26:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2652:6:14"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2660:6:14"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2645:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2645:22:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2645:22:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2618:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2627:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2614:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2614:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2639:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2610:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2610:32:14"
															},
															"nodeType": "YulIf",
															"src": "2607:2:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2678:37:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2705:9:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2692:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2692:23:14"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "2682:6:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2724:28:14",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "2734:18:14",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "2728:2:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2779:26:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2788:6:14"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2796:6:14"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2781:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2781:22:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2781:22:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "2767:6:14"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "2775:2:14"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2764:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2764:14:14"
															},
															"nodeType": "YulIf",
															"src": "2761:2:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2814:60:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2846:9:14"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "2857:6:14"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2842:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2842:22:14"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "2866:7:14"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string",
																	"nodeType": "YulIdentifier",
																	"src": "2824:17:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2824:50:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2814:6:14"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2883:48:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2916:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2927:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2912:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2912:18:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2899:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2899:32:14"
															},
															"variables": [
																{
																	"name": "offset_1",
																	"nodeType": "YulTypedName",
																	"src": "2887:8:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2960:26:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "2969:6:14"
																				},
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "2977:6:14"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2962:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2962:22:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2962:22:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset_1",
																		"nodeType": "YulIdentifier",
																		"src": "2946:8:14"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "2956:2:14"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2943:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2943:16:14"
															},
															"nodeType": "YulIf",
															"src": "2940:2:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2995:62:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3027:9:14"
																			},
																			{
																				"name": "offset_1",
																				"nodeType": "YulIdentifier",
																				"src": "3038:8:14"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3023:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3023:24:14"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "3049:7:14"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string",
																	"nodeType": "YulIdentifier",
																	"src": "3005:17:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3005:52:14"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2995:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2555:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2566:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2578:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2586:6:14",
														"type": ""
													}
												],
												"src": "2490:573:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3138:120:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3184:26:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3193:6:14"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "3201:6:14"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3186:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3186:22:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3186:22:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3159:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3168:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3155:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3155:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3180:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3151:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3151:32:14"
															},
															"nodeType": "YulIf",
															"src": "3148:2:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3219:33:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3242:9:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3229:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3229:23:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3219:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3104:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3115:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3127:6:14",
														"type": ""
													}
												],
												"src": "3068:190:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3364:102:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3374:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3386:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3397:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3382:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3382:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3374:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3416:9:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3431:6:14"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3447:3:14",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3452:1:14",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "3443:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3443:11:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3456:1:14",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "3439:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3439:19:14"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3427:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3427:32:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3409:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3409:51:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3409:51:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3333:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3344:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3355:4:14",
														"type": ""
													}
												],
												"src": "3263:203:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3628:188:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3638:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3650:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3661:2:14",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3646:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3646:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3638:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3680:9:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3695:6:14"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3711:3:14",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3716:1:14",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "3707:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3707:11:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3720:1:14",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "3703:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3703:19:14"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3691:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3691:32:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3673:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3673:51:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3673:51:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3744:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3755:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3740:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3740:18:14"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "3760:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3733:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3733:34:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3733:34:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3787:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3798:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3783:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3783:18:14"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "3803:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3776:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3776:34:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3776:34:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3581:9:14",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "3592:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3600:6:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3608:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3619:4:14",
														"type": ""
													}
												],
												"src": "3471:345:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3916:92:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3926:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3938:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3949:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3934:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3934:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3926:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3968:9:14"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "3993:6:14"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "3986:6:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3986:14:14"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "3979:6:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3979:22:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3961:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3961:41:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3961:41:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3885:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3896:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3907:4:14",
														"type": ""
													}
												],
												"src": "3821:187:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4120:87:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4130:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4142:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4153:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4138:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4138:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4130:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4172:9:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "4187:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4195:4:14",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4183:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4183:17:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4165:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4165:36:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4165:36:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4089:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4100:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4111:4:14",
														"type": ""
													}
												],
												"src": "4013:194:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4333:482:14",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4343:12:14",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "4353:2:14",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "4347:2:14",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4371:9:14"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "4382:2:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4364:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4364:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4364:21:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4394:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4414:6:14"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4408:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4408:13:14"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "4398:6:14",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4441:9:14"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "4452:2:14"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4437:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4437:18:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "4457:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4430:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4430:34:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4430:34:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4473:13:14",
															"value": {
																"name": "tail",
																"nodeType": "YulIdentifier",
																"src": "4482:4:14"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "4477:1:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4545:90:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "4574:9:14"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "4585:1:14"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "4570:3:14"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "4570:17:14"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "4589:2:14",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "4566:3:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4566:26:14"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value0",
																											"nodeType": "YulIdentifier",
																											"src": "4608:6:14"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "4616:1:14"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "4604:3:14"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "4604:14:14"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "4620:2:14"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "4600:3:14"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "4600:23:14"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "4594:5:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4594:30:14"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "4559:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4559:66:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4559:66:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "4506:1:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "4509:6:14"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "4503:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4503:13:14"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "4517:19:14",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "4519:15:14",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "4528:1:14"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "4531:2:14"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "4524:3:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4524:10:14"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "4519:1:14"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "4499:3:14",
																"statements": []
															},
															"src": "4495:140:14"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4669:69:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "4698:9:14"
																								},
																								{
																									"name": "length",
																									"nodeType": "YulIdentifier",
																									"src": "4709:6:14"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "4694:3:14"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "4694:22:14"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "4718:2:14",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "4690:3:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4690:31:14"
																				},
																				{
																					"name": "tail",
																					"nodeType": "YulIdentifier",
																					"src": "4723:4:14"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "4683:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4683:45:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4683:45:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "4650:1:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "4653:6:14"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4647:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4647:13:14"
															},
															"nodeType": "YulIf",
															"src": "4644:2:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4747:62:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4763:9:14"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "4782:6:14"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4790:2:14",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "4778:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4778:15:14"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4799:2:14",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "4795:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4795:7:14"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "4774:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4774:29:14"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4759:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4759:45:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4806:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4755:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4755:54:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4747:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4302:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4313:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4324:4:14",
														"type": ""
													}
												],
												"src": "4212:603:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4994:225:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5011:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5022:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5004:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5004:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5004:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5045:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5056:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5041:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5041:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5061:2:14",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5034:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5034:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5034:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5084:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5095:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5080:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5080:18:14"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5100:34:14",
																		"type": "",
																		"value": "ERC20: transfer to the zero addr"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5073:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5073:62:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5073:62:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5155:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5166:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5151:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5151:18:14"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5171:5:14",
																		"type": "",
																		"value": "ess"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5144:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5144:33:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5144:33:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5186:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5198:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5209:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5194:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5194:19:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5186:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4971:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4985:4:14",
														"type": ""
													}
												],
												"src": "4820:399:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5398:228:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5415:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5426:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5408:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5408:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5408:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5449:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5460:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5445:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5445:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5465:2:14",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5438:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5438:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5438:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5488:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5499:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5484:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5484:18:14"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5504:34:14",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5477:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5477:62:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5477:62:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5559:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5570:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5555:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5555:18:14"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5575:8:14",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5548:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5548:36:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5548:36:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5593:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5605:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5616:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5601:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5601:19:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5593:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5375:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5389:4:14",
														"type": ""
													}
												],
												"src": "5224:402:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5805:224:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5822:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5833:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5815:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5815:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5815:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5856:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5867:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5852:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5852:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5872:2:14",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5845:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5845:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5845:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5895:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5906:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5891:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5891:18:14"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5911:34:14",
																		"type": "",
																		"value": "ERC20: approve to the zero addre"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5884:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5884:62:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5884:62:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5966:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5977:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5962:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5962:18:14"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5982:4:14",
																		"type": "",
																		"value": "ss"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5955:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5955:32:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5955:32:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5996:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6008:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6019:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6004:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6004:19:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5996:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5782:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5796:4:14",
														"type": ""
													}
												],
												"src": "5631:398:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6208:162:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6225:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6236:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6218:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6218:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6218:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6259:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6270:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6255:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6255:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6275:2:14",
																		"type": "",
																		"value": "12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6248:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6248:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6248:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6298:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6309:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6294:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6294:18:14"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6314:14:14",
																		"type": "",
																		"value": "UNAUTHORIZED"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6287:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6287:42:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6287:42:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6338:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6350:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6361:2:14",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6346:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6346:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6338:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_269df367cd41cace5897a935d0e0858fe4543b5619d45e09af6b124c1bb3d528__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6185:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6199:4:14",
														"type": ""
													}
												],
												"src": "6034:336:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6549:161:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6566:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6577:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6559:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6559:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6559:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6600:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6611:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6596:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6596:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6616:2:14",
																		"type": "",
																		"value": "11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6589:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6589:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6589:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6639:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6650:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6635:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6635:18:14"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6655:13:14",
																		"type": "",
																		"value": "ON COOLDOWN"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6628:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6628:41:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6628:41:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6678:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6690:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6701:2:14",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6686:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6686:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6678:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_2a9a2fe545ab352608f300dd47f33eca8d45397574065019063dfce7b636146e__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6526:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6540:4:14",
														"type": ""
													}
												],
												"src": "6375:335:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6889:179:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6906:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6917:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6899:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6899:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6899:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6940:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6951:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6936:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6936:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6956:2:14",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6929:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6929:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6929:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6979:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6990:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6975:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6975:18:14"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6995:31:14",
																		"type": "",
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6968:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6968:59:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6968:59:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7036:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7048:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7059:2:14",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7044:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7044:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7036:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6866:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6880:4:14",
														"type": ""
													}
												],
												"src": "6715:353:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7247:228:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7264:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7275:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7257:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7257:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7257:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7298:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7309:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7294:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7294:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7314:2:14",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7287:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7287:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7287:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7337:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7348:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7333:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7333:18:14"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7353:34:14",
																		"type": "",
																		"value": "ERC20: transfer amount exceeds b"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7326:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7326:62:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7326:62:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7408:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7419:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7404:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7404:18:14"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7424:8:14",
																		"type": "",
																		"value": "alance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7397:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7397:36:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7397:36:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7442:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7454:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7465:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7450:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7450:19:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7442:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7224:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7238:4:14",
														"type": ""
													}
												],
												"src": "7073:402:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7654:236:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7671:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7682:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7664:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7664:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7664:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7705:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7716:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7701:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7701:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7721:2:14",
																		"type": "",
																		"value": "46"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7694:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7694:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7694:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7744:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7755:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7740:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7740:18:14"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7760:34:14",
																		"type": "",
																		"value": "Initializable: contract is alrea"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7733:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7733:62:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7733:62:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7815:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7826:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7811:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7811:18:14"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7831:16:14",
																		"type": "",
																		"value": "dy initialized"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7804:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7804:44:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7804:44:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7857:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7869:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7880:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7865:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7865:19:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7857:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7631:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7645:4:14",
														"type": ""
													}
												],
												"src": "7480:410:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8069:182:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8086:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8097:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8079:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8079:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8079:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8120:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8131:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8116:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8116:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8136:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8109:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8109:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8109:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8159:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8170:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8155:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8155:18:14"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8175:34:14",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8148:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8148:62:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8148:62:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8219:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8231:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8242:2:14",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8227:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8227:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8219:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8046:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8060:4:14",
														"type": ""
													}
												],
												"src": "7895:356:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8430:227:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8447:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8458:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8440:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8440:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8440:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8481:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8492:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8477:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8477:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8497:2:14",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8470:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8470:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8470:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8520:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8531:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8516:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8516:18:14"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8536:34:14",
																		"type": "",
																		"value": "ERC20: transfer from the zero ad"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8509:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8509:62:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8509:62:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8591:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8602:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8587:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8587:18:14"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8607:7:14",
																		"type": "",
																		"value": "dress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8580:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8580:35:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8580:35:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8624:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8636:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8647:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8632:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8632:19:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8624:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8407:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8421:4:14",
														"type": ""
													}
												],
												"src": "8256:401:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8836:226:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8853:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8864:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8846:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8846:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8846:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8887:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8898:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8883:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8883:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8903:2:14",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8876:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8876:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8876:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8926:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8937:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8922:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8922:18:14"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8942:34:14",
																		"type": "",
																		"value": "ERC20: approve from the zero add"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8915:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8915:62:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8915:62:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8997:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9008:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8993:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8993:18:14"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9013:6:14",
																		"type": "",
																		"value": "ress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8986:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8986:34:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8986:34:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9029:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9041:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9052:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9037:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9037:19:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9029:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8813:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8827:4:14",
														"type": ""
													}
												],
												"src": "8662:400:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9241:233:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9258:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9269:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9251:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9251:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9251:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9292:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9303:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9288:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9288:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9308:2:14",
																		"type": "",
																		"value": "43"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9281:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9281:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9281:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9331:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9342:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9327:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9327:18:14"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9347:34:14",
																		"type": "",
																		"value": "Initializable: contract is not i"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9320:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9320:62:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9320:62:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9402:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9413:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9398:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9398:18:14"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9418:13:14",
																		"type": "",
																		"value": "nitializing"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9391:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9391:41:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9391:41:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9441:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9453:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9464:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9449:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9449:19:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9441:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9218:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9232:4:14",
														"type": ""
													}
												],
												"src": "9067:407:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9653:164:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9670:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9681:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9663:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9663:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9663:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9704:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9715:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9700:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9700:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9720:2:14",
																		"type": "",
																		"value": "14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9693:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9693:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9693:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9743:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9754:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9739:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9739:18:14"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9759:16:14",
																		"type": "",
																		"value": "Only whitelist"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9732:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9732:44:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9732:44:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9785:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9797:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9808:2:14",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9793:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9793:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9785:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_e456a8df821d58a81d00df5ff2bc8653f1a52a4771d0bdf36a4aa3f1bac56f7b__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9630:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9644:4:14",
														"type": ""
													}
												],
												"src": "9479:338:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9996:227:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10013:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10024:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10006:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10006:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10006:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10047:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10058:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10043:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10043:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10063:2:14",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10036:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10036:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10036:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10086:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10097:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10082:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10082:18:14"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10102:34:14",
																		"type": "",
																		"value": "ERC20: decreased allowance below"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10075:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10075:62:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10075:62:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10157:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10168:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10153:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10153:18:14"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10173:7:14",
																		"type": "",
																		"value": " zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10146:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10146:35:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10146:35:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10190:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10202:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10213:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10198:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10198:19:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10190:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9973:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9987:4:14",
														"type": ""
													}
												],
												"src": "9822:401:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10402:181:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10419:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10430:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10412:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10412:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10412:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10453:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10464:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10449:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10449:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10469:2:14",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10442:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10442:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10442:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10492:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10503:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10488:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10488:18:14"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10508:33:14",
																		"type": "",
																		"value": "ERC20: mint to the zero address"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10481:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10481:61:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10481:61:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10551:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10563:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10574:2:14",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10559:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10559:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10551:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10379:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10393:4:14",
														"type": ""
													}
												],
												"src": "10228:355:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10689:76:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10699:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10711:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10722:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10707:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10707:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10699:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10741:9:14"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "10752:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10734:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10734:25:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10734:25:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10658:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "10669:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10680:4:14",
														"type": ""
													}
												],
												"src": "10588:177:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10867:87:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10877:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10889:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10900:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10885:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10885:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10877:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10919:9:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "10934:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10942:4:14",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "10930:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10930:17:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10912:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10912:36:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10912:36:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10836:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "10847:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10858:4:14",
														"type": ""
													}
												],
												"src": "10770:184:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11007:80:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11034:22:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "11036:16:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11036:18:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11036:18:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "11023:1:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "11030:1:14"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "11026:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11026:6:14"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "11020:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11020:13:14"
															},
															"nodeType": "YulIf",
															"src": "11017:2:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11065:16:14",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "11076:1:14"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "11079:1:14"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11072:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11072:9:14"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "11065:3:14"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "10990:1:14",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "10993:1:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "10999:3:14",
														"type": ""
													}
												],
												"src": "10959:128:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11141:76:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11163:22:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "11165:16:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11165:18:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11165:18:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "11157:1:14"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "11160:1:14"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "11154:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11154:8:14"
															},
															"nodeType": "YulIf",
															"src": "11151:2:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11194:17:14",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "11206:1:14"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "11209:1:14"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "11202:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11202:9:14"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "11194:4:14"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "11123:1:14",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "11126:1:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "11132:4:14",
														"type": ""
													}
												],
												"src": "11092:125:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11277:325:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11287:22:14",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11301:1:14",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "11304:4:14"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "11297:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11297:12:14"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "11287:6:14"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "11318:38:14",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "11348:4:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11354:1:14",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "11344:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11344:12:14"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "11322:18:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11395:31:14",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "11397:27:14",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "11411:6:14"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11419:4:14",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "11407:3:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11407:17:14"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "11397:6:14"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "11375:18:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "11368:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11368:26:14"
															},
															"nodeType": "YulIf",
															"src": "11365:2:14"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11485:111:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11506:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "11513:3:14",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "11518:10:14",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "11509:3:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "11509:20:14"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "11499:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11499:31:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11499:31:14"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11550:1:14",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11553:4:14",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "11543:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11543:15:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11543:15:14"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11578:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11581:4:14",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "11571:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11571:15:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11571:15:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "11441:18:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "11464:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11472:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "11461:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11461:14:14"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "11438:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11438:38:14"
															},
															"nodeType": "YulIf",
															"src": "11435:2:14"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "11257:4:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "11266:6:14",
														"type": ""
													}
												],
												"src": "11222:380:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11639:95:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11656:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11663:3:14",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11668:10:14",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "11659:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11659:20:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11649:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11649:31:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11649:31:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11696:1:14",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11699:4:14",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11689:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11689:15:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11689:15:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11720:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11723:4:14",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "11713:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11713:15:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11713:15:14"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "11607:127:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11771:95:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11788:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11795:3:14",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11800:10:14",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "11791:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11791:20:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11781:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11781:31:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11781:31:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11828:1:14",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11831:4:14",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11821:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11821:15:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11821:15:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11852:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11855:4:14",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "11845:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11845:15:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11845:15:14"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "11739:127:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11916:86:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11980:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11989:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11992:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "11982:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11982:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11982:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "11939:5:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "11950:5:14"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "11965:3:14",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "11970:1:14",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "11961:3:14"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "11961:11:14"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "11974:1:14",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "11957:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "11957:19:14"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "11946:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "11946:31:14"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "11936:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11936:42:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "11929:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11929:50:14"
															},
															"nodeType": "YulIf",
															"src": "11926:2:14"
														}
													]
												},
												"name": "validator_revert_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "11905:5:14",
														"type": ""
													}
												],
												"src": "11871:131:14"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_string(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(array, array) }\n        let _1 := calldataload(offset)\n        let _2 := 0xffffffffffffffff\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(array, array) }\n        calldatacopy(add(memPtr, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(memPtr, _1), 0x20), array)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value1, value1) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value2, value2) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(value0, value0) }\n        value0 := abi_decode_string(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(value1, value1) }\n        value1 := abi_decode_string(add(headStart, offset_1), dataEnd)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := tail\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 64), tail)\n        }\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_269df367cd41cace5897a935d0e0858fe4543b5619d45e09af6b124c1bb3d528__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 12)\n        mstore(add(headStart, 64), \"UNAUTHORIZED\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_2a9a2fe545ab352608f300dd47f33eca8d45397574065019063dfce7b636146e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 11)\n        mstore(add(headStart, 64), \"ON COOLDOWN\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"Initializable: contract is not i\")\n        mstore(add(headStart, 96), \"nitializing\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_e456a8df821d58a81d00df5ff2bc8653f1a52a4771d0bdf36a4aa3f1bac56f7b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"Only whitelist\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ERC20: mint to the zero address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n}",
									"id": 14,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x142 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xA457C2D7 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x28F JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x2A2 JUMPI DUP1 PUSH4 0xBE023D84 EQ PUSH2 0x2B5 JUMPI DUP1 PUSH4 0xD1A20509 EQ PUSH2 0x2C8 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x2E8 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x228 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x251 JUMPI DUP1 PUSH4 0x854CFF2F EQ PUSH2 0x259 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x26C JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x287 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x39509351 GT PUSH2 0x10A JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x1BC JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x1CF JUMPI DUP1 PUSH4 0x4CD88B76 EQ PUSH2 0x1E4 JUMPI DUP1 PUSH4 0x4FC3F41A EQ PUSH2 0x1F7 JUMPI DUP1 PUSH4 0x59176C8D EQ PUSH2 0x20A JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x21D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x165 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x188 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1AD JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14F PUSH2 0x30E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15C SWAP2 SWAP1 PUSH2 0x11BF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x178 PUSH2 0x173 CALLDATASIZE PUSH1 0x4 PUSH2 0x111B JUMP JUMPDEST PUSH2 0x3A0 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x15C JUMP JUMPDEST PUSH1 0x35 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x15C JUMP JUMPDEST PUSH2 0x178 PUSH2 0x1A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x10DB JUMP JUMPDEST PUSH2 0x3B8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x15C JUMP JUMPDEST PUSH2 0x178 PUSH2 0x1CA CALLDATASIZE PUSH1 0x4 PUSH2 0x111B JUMP JUMPDEST PUSH2 0x3DC JUMP JUMPDEST PUSH2 0x1E2 PUSH2 0x1DD CALLDATASIZE PUSH1 0x4 PUSH2 0x111B JUMP JUMPDEST PUSH2 0x3FE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1E2 PUSH2 0x1F2 CALLDATASIZE PUSH1 0x4 PUSH2 0x1146 JUMP JUMPDEST PUSH2 0x461 JUMP JUMPDEST PUSH2 0x1E2 PUSH2 0x205 CALLDATASIZE PUSH1 0x4 PUSH2 0x11A7 JUMP JUMPDEST PUSH2 0x505 JUMP JUMPDEST PUSH2 0x1E2 PUSH2 0x218 CALLDATASIZE PUSH1 0x4 PUSH2 0x11A7 JUMP JUMPDEST PUSH2 0x534 JUMP JUMPDEST PUSH1 0x97 SLOAD PUSH1 0xFF AND PUSH2 0x178 JUMP JUMPDEST PUSH2 0x18C PUSH2 0x236 CALLDATASIZE PUSH1 0x4 PUSH2 0x1064 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1E2 PUSH2 0x6B1 JUMP JUMPDEST PUSH2 0x1E2 PUSH2 0x267 CALLDATASIZE PUSH1 0x4 PUSH2 0x1064 JUMP JUMPDEST PUSH2 0x6E7 JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x15C JUMP JUMPDEST PUSH2 0x14F PUSH2 0x735 JUMP JUMPDEST PUSH2 0x178 PUSH2 0x29D CALLDATASIZE PUSH1 0x4 PUSH2 0x111B JUMP JUMPDEST PUSH2 0x744 JUMP JUMPDEST PUSH2 0x178 PUSH2 0x2B0 CALLDATASIZE PUSH1 0x4 PUSH2 0x111B JUMP JUMPDEST PUSH2 0x7BF JUMP JUMPDEST PUSH2 0x1E2 PUSH2 0x2C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1064 JUMP JUMPDEST PUSH2 0x7CD JUMP JUMPDEST PUSH2 0x18C PUSH2 0x2D6 CALLDATASIZE PUSH1 0x4 PUSH2 0x11A7 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xCD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x18C PUSH2 0x2F6 CALLDATASIZE PUSH1 0x4 PUSH2 0x10A3 JUMP JUMPDEST PUSH2 0x819 JUMP JUMPDEST PUSH2 0x1E2 PUSH2 0x309 CALLDATASIZE PUSH1 0x4 PUSH2 0x1064 JUMP JUMPDEST PUSH2 0x844 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x31D SWAP1 PUSH2 0x130F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x349 SWAP1 PUSH2 0x130F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x396 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x36B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x396 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x379 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x3AE DUP2 DUP6 DUP6 PUSH2 0x8DF JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x3C6 DUP6 DUP3 DUP6 PUSH2 0xA03 JUMP JUMPDEST PUSH2 0x3D1 DUP6 DUP6 DUP6 PUSH2 0xA7D JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x3AE DUP2 DUP6 DUP6 PUSH2 0x3EF DUP4 DUP4 PUSH2 0x819 JUMP JUMPDEST PUSH2 0x3F9 SWAP2 SWAP1 PUSH2 0x12E0 JUMP JUMPDEST PUSH2 0x8DF JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xCC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x453 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x13DB9B1E481DDA1A5D195B1A5CDD PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x45D DUP3 DUP3 PUSH2 0xC4B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x46D PUSH1 0x1 PUSH2 0xD2A JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x485 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0x48F DUP4 DUP4 PUSH2 0xDB2 JUMP JUMPDEST PUSH2 0x497 PUSH2 0xDE3 JUMP JUMPDEST PUSH2 0x49F PUSH2 0xE12 JUMP JUMPDEST PUSH2 0x4B5 CALLER PUSH12 0x204FCE5E3E25026110000000 PUSH2 0xC4B JUMP JUMPDEST PUSH1 0x3C PUSH1 0xCA SSTORE DUP1 ISZERO PUSH2 0x500 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x52F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44A SWAP1 PUSH2 0x1260 JUMP JUMPDEST PUSH1 0xCA SSTORE JUMP JUMPDEST PUSH1 0xCB SLOAD PUSH1 0x40 MLOAD PUSH4 0x31A9108F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE CALLER SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x578 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x58C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5B0 SWAP2 SWAP1 PUSH2 0x1087 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5F5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x15539055551213D492569151 PUSH1 0xA2 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44A JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xCD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH3 0x15180 SWAP1 PUSH2 0x613 SWAP1 TIMESTAMP PUSH2 0x12F8 JUMP JUMPDEST LT ISZERO PUSH2 0x64F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x27A71021A7A7A62227ABA7 PUSH1 0xA9 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44A JUMP JUMPDEST PUSH2 0x65B CALLER PUSH1 0xC9 SLOAD PUSH2 0xC4B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xCD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 TIMESTAMP SWAP1 DUP2 SWAP1 SSTORE PUSH1 0xC9 SLOAD DUP4 MLOAD CALLER DUP2 MSTORE SWAP3 DUP4 ADD MSTORE DUP2 DUP4 ADD MSTORE SWAP1 MLOAD PUSH32 0x8DCE8756778B482EF8CFEF8C65FAADC506CE94E081BB6CC3A2D3448D99DE9A50 SWAP2 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x6DB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44A SWAP1 PUSH2 0x1260 JUMP JUMPDEST PUSH2 0x6E5 PUSH1 0x0 PUSH2 0xE41 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x711 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44A SWAP1 PUSH2 0x1260 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xCC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x31D SWAP1 PUSH2 0x130F JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x752 DUP3 DUP7 PUSH2 0x819 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x7B2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x44A JUMP JUMPDEST PUSH2 0x3D1 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x8DF JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x3AE DUP2 DUP6 DUP6 PUSH2 0xA7D JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x7F7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44A SWAP1 PUSH2 0x1260 JUMP JUMPDEST PUSH1 0xCB DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x86E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44A SWAP1 PUSH2 0x1260 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x8D3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x44A JUMP JUMPDEST PUSH2 0x8DC DUP2 PUSH2 0xE41 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x941 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x44A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x9A2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x44A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA0F DUP5 DUP5 PUSH2 0x819 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0xA77 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xA6A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44A JUMP JUMPDEST PUSH2 0xA77 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x8DF JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xAE1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x44A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xB43 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x44A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0xBBB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x44A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0xBF2 SWAP1 DUP5 SWAP1 PUSH2 0x12E0 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xC3E SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xA77 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xCA1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x44A JUMP JUMPDEST DUP1 PUSH1 0x35 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xCB3 SWAP2 SWAP1 PUSH2 0x12E0 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0xCE0 SWAP1 DUP5 SWAP1 PUSH2 0x12E0 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xD71 JUMPI DUP2 PUSH1 0xFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0xD4D JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST PUSH2 0xD69 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44A SWAP1 PUSH2 0x1212 JUMP JUMPDEST POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF DUP1 DUP5 AND SWAP2 AND LT PUSH2 0xD98 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44A SWAP1 PUSH2 0x1212 JUMP JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xDD9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44A SWAP1 PUSH2 0x1295 JUMP JUMPDEST PUSH2 0x45D DUP3 DUP3 PUSH2 0xE93 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xE0A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44A SWAP1 PUSH2 0x1295 JUMP JUMPDEST PUSH2 0x6E5 PUSH2 0xEE1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xE39 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44A SWAP1 PUSH2 0x1295 JUMP JUMPDEST PUSH2 0x6E5 PUSH2 0xF11 JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xEBA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44A SWAP1 PUSH2 0x1295 JUMP JUMPDEST DUP2 MLOAD PUSH2 0xECD SWAP1 PUSH1 0x36 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH2 0xF44 JUMP JUMPDEST POP DUP1 MLOAD PUSH2 0x500 SWAP1 PUSH1 0x37 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0xF44 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xF08 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44A SWAP1 PUSH2 0x1295 JUMP JUMPDEST PUSH2 0x6E5 CALLER PUSH2 0xE41 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xF38 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44A SWAP1 PUSH2 0x1295 JUMP JUMPDEST PUSH1 0x97 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0xF50 SWAP1 PUSH2 0x130F JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0xF72 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0xFB8 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0xF8B JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0xFB8 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0xFB8 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0xFB8 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xF9D JUMP JUMPDEST POP PUSH2 0xFC4 SWAP3 SWAP2 POP PUSH2 0xFC8 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0xFC4 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xFC9 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xFED JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1008 JUMPI PUSH2 0x1008 PUSH2 0x1360 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x1030 JUMPI PUSH2 0x1030 PUSH2 0x1360 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH2 0x1048 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP4 PUSH1 0x20 DUP8 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY SWAP3 DUP4 ADD PUSH1 0x20 ADD SWAP4 SWAP1 SWAP4 MSTORE POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1075 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1080 DUP2 PUSH2 0x1376 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1098 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1080 DUP2 PUSH2 0x1376 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x10B5 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x10C0 DUP2 PUSH2 0x1376 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x10D0 DUP2 PUSH2 0x1376 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x10EF JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x10FA DUP2 PUSH2 0x1376 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x110A DUP2 PUSH2 0x1376 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x112D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1138 DUP2 PUSH2 0x1376 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1158 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x116F JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x117B DUP7 DUP4 DUP8 ADD PUSH2 0xFDD JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1190 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x119D DUP6 DUP3 DUP7 ADD PUSH2 0xFDD JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11B8 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x11EB JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x11CF JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x11FC JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x12F3 JUMPI PUSH2 0x12F3 PUSH2 0x134A JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x130A JUMPI PUSH2 0x130A PUSH2 0x134A JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1323 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1344 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x8DC JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PC PUSH3 0xB08996 0xD2 MULMOD 0xC1 0xFC PUSH11 0xEE03BCC43640577BACE9A 0xE5 0xE1 0x5C 0x2B 0x1E 0xB9 PUSH1 0x30 0xB1 LOG3 PUSH21 0x64736F6C6343000804003300000000000000000000 ",
							"sourceMap": "562:1988:13:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2493:98:4;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4770:197;;;;;;:::i;:::-;;:::i;:::-;;;3986:14:14;;3979:22;3961:41;;3949:2;3934:18;4770:197:4;3916:92:14;3581:106:4;3668:12;;3581:106;;;10734:25:14;;;10722:2;10707:18;3581:106:4;10689:76:14;5529:286:4;;;;;;:::i;:::-;;:::i;1709:87:13:-;;;1788:2;4165:36:14;;4153:2;4138:18;1709:87:13;4120::14;6210:234:4;;;;;;:::i;:::-;;:::i;1926:95:13:-;;;;;;:::i;:::-;;:::i;:::-;;1050:259;;;;;;:::i;:::-;;:::i;1423:92::-;;;;;;:::i;:::-;;:::i;2027:396::-;;;;;;:::i;:::-;;:::i;1341:84:2:-;1411:7;;;;1341:84;;3745:125:4;;;;;;:::i;:::-;-1:-1:-1;;;;;3845:18:4;3819:7;3845:18;;;:9;:18;;;;;;;3745:125;1908:101:0;;;:::i;1315:102:13:-;;;;;;:::i;:::-;;:::i;1276:85:0:-;1348:6;;1276:85;;-1:-1:-1;;;;;1348:6:0;;;3409:51:14;;3397:2;3382:18;1276:85:0;3364:102:14;2704::4;;;:::i;6931:427::-;;;;;;:::i;:::-;;:::i;4066:189::-;;;;;;:::i;:::-;;:::i;1521:123:13:-;;;;;;:::i;:::-;;:::i;2429:118::-;;;;;;:::i;:::-;2494:7;2517:24;;;:14;:24;;;;;;;2429:118;4313:149:4;;;;;;:::i;:::-;;:::i;2158:198:0:-;;;;;;:::i;:::-;;:::i;2493:98:4:-;2547:13;2579:5;2572:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2493:98;:::o;4770:197::-;4853:4;929:10:10;4907:32:4;929:10:10;4923:7:4;4932:6;4907:8;:32::i;:::-;-1:-1:-1;4956:4:4;;4770:197;-1:-1:-1;;;4770:197:4:o;5529:286::-;5656:4;929:10:10;5712:38:4;5728:4;929:10:10;5743:6:4;5712:15;:38::i;:::-;5760:27;5770:4;5776:2;5780:6;5760:9;:27::i;:::-;-1:-1:-1;5804:4:4;;5529:286;-1:-1:-1;;;;5529:286:4:o;6210:234::-;6298:4;929:10:10;6352:64:4;929:10:10;6368:7:4;6405:10;6377:25;929:10:10;6368:7:4;6377:9;:25::i;:::-;:38;;;;:::i;:::-;6352:8;:64::i;1926:95:13:-;922:10;912:21;;;;:9;:21;;;;;;;;904:48;;;;-1:-1:-1;;;904:48:13;;9681:2:14;904:48:13;;;9663:21:14;9720:2;9700:18;;;9693:30;-1:-1:-1;;;9739:18:14;;;9732:44;9793:18;;904:48:13;;;;;;;;;1998:17:::1;2004:2;2008:6;1998:5;:17::i;:::-;1926:95:::0;;:::o;1050:259::-;3111:19:1;3133:25;3156:1;3133:22;:25::i;:::-;3111:47;;3172:14;3168:65;;;3202:13;:20;;-1:-1:-1;;3202:20:1;;;;;3168:65;1155:28:13::1;1168:5;1175:7;1155:12;:28::i;:::-;1190:16;:14;:16::i;:::-;1213:17;:15;:17::i;:::-;1239:37;1245:10;1257:18;1239:5;:37::i;:::-;1294:9;1283:8;:20:::0;3253:99:1;;;;3303:5;3287:21;;-1:-1:-1;;3287:21:1;;;3327:14;;-1:-1:-1;4165:36:14;;3327:14:1;;4153:2:14;4138:18;3327:14:1;;;;;;;3253:99;1050:259:13;;;:::o;1423:92::-;1348:6:0;;-1:-1:-1;;;;;1348:6:0;929:10:10;1488:23:0;1480:68;;;;-1:-1:-1;;;1480:68:0;;;;;;;:::i;:::-;1489:8:13::1;:20:::0;1423:92::o;2027:396::-;2089:8;;:26;;-1:-1:-1;;;2089:26:13;;;;;10734:25:14;;;2119:10:13;;-1:-1:-1;;;;;2089:8:13;;:16;;10707:18:14;;2089:26:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;2089:40:13;;2081:65;;;;-1:-1:-1;;;2081:65:13;;6236:2:14;2081:65:13;;;6218:21:14;6275:2;6255:18;;;6248:30;-1:-1:-1;;;6294:18:14;;;6287:42;6346:18;;2081:65:13;6208:162:14;2081:65:13;2187:24;;;;:14;:24;;;;;;2215:6;;2169:42;;:15;:42;:::i;:::-;:52;;2153:97;;;;-1:-1:-1;;;2153:97:13;;6577:2:14;2153:97:13;;;6559:21:14;6616:2;6596:18;;;6589:30;-1:-1:-1;;;6635:18:14;;;6628:41;6686:18;;2153:97:13;6549:161:14;2153:97:13;2259:33;2265:10;2277:14;;2259:5;:33::i;:::-;2299:24;;;;:14;:24;;;;;;;;;2326:15;2299:42;;;;2385:14;;2355:62;;2373:10;3673:51:14;;3740:18;;;3733:34;3783:18;;;3776:34;2355:62:13;;;;;;;3661:2:14;2355:62:13;;;2027:396;:::o;1908:101:0:-;1348:6;;-1:-1:-1;;;;;1348:6:0;929:10:10;1488:23:0;1480:68;;;;-1:-1:-1;;;1480:68:0;;;;;;;:::i;:::-;1972:30:::1;1999:1;1972:18;:30::i;:::-;1908:101::o:0;1315:102:13:-;1348:6:0;;-1:-1:-1;;;;;1348:6:0;929:10:10;1488:23:0;1480:68;;;;-1:-1:-1;;;1480:68:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;1383:21:13::1;;::::0;;;:9:::1;:21;::::0;;;;:28;;-1:-1:-1;;1383:28:13::1;1407:4;1383:28;::::0;;1315:102::o;2704::4:-;2760:13;2792:7;2785:14;;;;;:::i;6931:427::-;7024:4;929:10:10;7024:4:4;7105:25;929:10:10;7122:7:4;7105:9;:25::i;:::-;7078:52;;7168:15;7148:16;:35;;7140:85;;;;-1:-1:-1;;;7140:85:4;;10024:2:14;7140:85:4;;;10006:21:14;10063:2;10043:18;;;10036:30;10102:34;10082:18;;;10075:62;-1:-1:-1;;;10153:18:14;;;10146:35;10198:19;;7140:85:4;9996:227:14;7140:85:4;7259:60;7268:5;7275:7;7303:15;7284:16;:34;7259:8;:60::i;4066:189::-;4145:4;929:10:10;4199:28:4;929:10:10;4216:2:4;4220:6;4199:9;:28::i;1521:123:13:-;1348:6:0;;-1:-1:-1;;;;;1348:6:0;929:10:10;1488:23:0;1480:68;;;;-1:-1:-1;;;1480:68:0;;;;;;;:::i;:::-;1591:8:13::1;:47:::0;;-1:-1:-1;;;;;;1591:47:13::1;-1:-1:-1::0;;;;;1591:47:13;;;::::1;::::0;;;::::1;::::0;;1521:123::o;4313:149:4:-;-1:-1:-1;;;;;4428:18:4;;;4402:7;4428:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;4313:149::o;2158:198:0:-;1348:6;;-1:-1:-1;;;;;1348:6:0;929:10:10;1488:23:0;1480:68;;;;-1:-1:-1;;;1480:68:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;2246:22:0;::::1;2238:73;;;::::0;-1:-1:-1;;;2238:73:0;;5426:2:14;2238:73:0::1;::::0;::::1;5408:21:14::0;5465:2;5445:18;;;5438:30;5504:34;5484:18;;;5477:62;-1:-1:-1;;;5555:18:14;;;5548:36;5601:19;;2238:73:0::1;5398:228:14::0;2238:73:0::1;2321:28;2340:8;2321:18;:28::i;:::-;2158:198:::0;:::o;10456:370:4:-;-1:-1:-1;;;;;10587:19:4;;10579:68;;;;-1:-1:-1;;;10579:68:4;;8864:2:14;10579:68:4;;;8846:21:14;8903:2;8883:18;;;8876:30;8942:34;8922:18;;;8915:62;-1:-1:-1;;;8993:18:14;;;8986:34;9037:19;;10579:68:4;8836:226:14;10579:68:4;-1:-1:-1;;;;;10665:21:4;;10657:68;;;;-1:-1:-1;;;10657:68:4;;5833:2:14;10657:68:4;;;5815:21:14;5872:2;5852:18;;;5845:30;5911:34;5891:18;;;5884:62;-1:-1:-1;;;5962:18:14;;;5955:32;6004:19;;10657:68:4;5805:224:14;10657:68:4;-1:-1:-1;;;;;10736:18:4;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10787:32;;10734:25:14;;;10787:32:4;;10707:18:14;10787:32:4;;;;;;;10456:370;;;:::o;11107:441::-;11237:24;11264:25;11274:5;11281:7;11264:9;:25::i;:::-;11237:52;;-1:-1:-1;;11303:16:4;:37;11299:243;;11384:6;11364:16;:26;;11356:68;;;;-1:-1:-1;;;11356:68:4;;6917:2:14;11356:68:4;;;6899:21:14;6956:2;6936:18;;;6929:30;6995:31;6975:18;;;6968:59;7044:18;;11356:68:4;6889:179:14;11356:68:4;11466:51;11475:5;11482:7;11510:6;11491:16;:25;11466:8;:51::i;:::-;11107:441;;;;:::o;7821:651::-;-1:-1:-1;;;;;7947:18:4;;7939:68;;;;-1:-1:-1;;;7939:68:4;;8458:2:14;7939:68:4;;;8440:21:14;8497:2;8477:18;;;8470:30;8536:34;8516:18;;;8509:62;-1:-1:-1;;;8587:18:14;;;8580:35;8632:19;;7939:68:4;8430:227:14;7939:68:4;-1:-1:-1;;;;;8025:16:4;;8017:64;;;;-1:-1:-1;;;8017:64:4;;5022:2:14;8017:64:4;;;5004:21:14;5061:2;5041:18;;;5034:30;5100:34;5080:18;;;5073:62;-1:-1:-1;;;5151:18:14;;;5144:33;5194:19;;8017:64:4;4994:225:14;8017:64:4;-1:-1:-1;;;;;8163:15:4;;8141:19;8163:15;;;:9;:15;;;;;;8196:21;;;;8188:72;;;;-1:-1:-1;;;8188:72:4;;7275:2:14;8188:72:4;;;7257:21:14;7314:2;7294:18;;;7287:30;7353:34;7333:18;;;7326:62;-1:-1:-1;;;7404:18:14;;;7397:36;7450:19;;8188:72:4;7247:228:14;8188:72:4;-1:-1:-1;;;;;8294:15:4;;;;;;;:9;:15;;;;;;8312:20;;;8294:38;;8352:13;;;;;;;;:23;;8326:6;;8294:15;8352:23;;8326:6;;8352:23;:::i;:::-;;;;;;;;8406:2;-1:-1:-1;;;;;8391:26:4;8400:4;-1:-1:-1;;;;;8391:26:4;;8410:6;8391:26;;;;10734:25:14;;10722:2;10707:18;;10689:76;8391:26:4;;;;;;;;8428:37;1050:259:13;8748:389:4;-1:-1:-1;;;;;8831:21:4;;8823:65;;;;-1:-1:-1;;;8823:65:4;;10430:2:14;8823:65:4;;;10412:21:14;10469:2;10449:18;;;10442:30;10508:33;10488:18;;;10481:61;10559:18;;8823:65:4;10402:181:14;8823:65:4;8975:6;8959:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;8991:18:4;;;;;;:9;:18;;;;;:28;;9013:6;;8991:18;:28;;9013:6;;8991:28;:::i;:::-;;;;-1:-1:-1;;9034:37:4;;10734:25:14;;;-1:-1:-1;;;;;9034:37:4;;;9051:1;;9034:37;;10722:2:14;10707:18;9034:37:4;;;;;;;1926:95:13;;:::o;5287:808:1:-;5351:4;5684:13;;;;;;;5680:409;;;5738:7;:12;;5749:1;5738:12;:61;;;;-1:-1:-1;5793:4:1;1476:19:9;:23;5738:61:1;5713:166;;;;-1:-1:-1;;;5713:166:1;;;;;;;:::i;:::-;-1:-1:-1;5900:5:1;;5287:808;-1:-1:-1;5287:808:1:o;5680:409::-;5944:12;;:22;;;;:12;;:22;5936:81;;;;-1:-1:-1;;;5936:81:1;;;;;;;:::i;:::-;-1:-1:-1;6031:12:1;:22;;-1:-1:-1;;6031:22:1;;;;;;;;;;;;-1:-1:-1;;5287:808:1:o;2116:147:4:-;4698:13:1;;;;;;;4690:69;;;;-1:-1:-1;;;4690:69:1;;;;;;;:::i;:::-;2218:38:4::1;2241:5;2248:7;2218:22;:38::i;988:95:0:-:0;4698:13:1;;;;;;;4690:69;;;;-1:-1:-1;;;4690:69:1;;;;;;;:::i;:::-;1050:26:0::1;:24;:26::i;1048:97:2:-:0;4698:13:1;;;;;;;4690:69;;;;-1:-1:-1;;;4690:69:1;;;;;;;:::i;:::-;1111:27:2::1;:25;:27::i;2510:187:0:-:0;2602:6;;;-1:-1:-1;;;;;2618:17:0;;;-1:-1:-1;;;;;;2618:17:0;;;;;;;2650:40;;2602:6;;;2618:17;2602:6;;2650:40;;2583:16;;2650:40;2510:187;;:::o;2269:159:4:-;4698:13:1;;;;;;;4690:69;;;;-1:-1:-1;;;4690:69:1;;;;;;;:::i;:::-;2381:13:4;;::::1;::::0;:5:::1;::::0;:13:::1;::::0;::::1;::::0;::::1;:::i;:::-;-1:-1:-1::0;2404:17:4;;::::1;::::0;:7:::1;::::0;:17:::1;::::0;::::1;::::0;::::1;:::i;1089:111:0:-:0;4698:13:1;;;;;;;4690:69;;;;-1:-1:-1;;;4690:69:1;;;;;;;:::i;:::-;1161:32:0::1;929:10:10::0;1161:18:0::1;:32::i;1151:95:2:-:0;4698:13:1;;;;;;;4690:69;;;;-1:-1:-1;;;4690:69:1;;;;;;;:::i;:::-;1224:7:2::1;:15:::0;;-1:-1:-1;;1224:15:2::1;::::0;;1151:95::o;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:739:14;57:5;110:3;103:4;95:6;91:17;87:27;77:2;;132:5;125;118:20;77:2;172:6;159:20;198:18;235:2;231;228:10;225:2;;;241:18;;:::i;:::-;316:2;310:9;284:2;370:13;;-1:-1:-1;;366:22:14;;;390:2;362:31;358:40;346:53;;;414:18;;;434:22;;;411:46;408:2;;;460:18;;:::i;:::-;500:10;496:2;489:22;535:2;527:6;520:18;581:3;574:4;569:2;561:6;557:15;553:26;550:35;547:2;;;602:5;595;588:20;547:2;670;663:4;655:6;651:17;644:4;636:6;632:17;619:54;693:15;;;710:4;689:26;682:41;;;;-1:-1:-1;697:6:14;67:686;-1:-1:-1;;;67:686:14:o;758:257::-;817:6;870:2;858:9;849:7;845:23;841:32;838:2;;;891:6;883;876:22;838:2;935:9;922:23;954:31;979:5;954:31;:::i;:::-;1004:5;828:187;-1:-1:-1;;;828:187:14:o;1020:261::-;1090:6;1143:2;1131:9;1122:7;1118:23;1114:32;1111:2;;;1164:6;1156;1149:22;1111:2;1201:9;1195:16;1220:31;1245:5;1220:31;:::i;1286:398::-;1354:6;1362;1415:2;1403:9;1394:7;1390:23;1386:32;1383:2;;;1436:6;1428;1421:22;1383:2;1480:9;1467:23;1499:31;1524:5;1499:31;:::i;:::-;1549:5;-1:-1:-1;1606:2:14;1591:18;;1578:32;1619:33;1578:32;1619:33;:::i;:::-;1671:7;1661:17;;;1373:311;;;;;:::o;1689:466::-;1766:6;1774;1782;1835:2;1823:9;1814:7;1810:23;1806:32;1803:2;;;1856:6;1848;1841:22;1803:2;1900:9;1887:23;1919:31;1944:5;1919:31;:::i;:::-;1969:5;-1:-1:-1;2026:2:14;2011:18;;1998:32;2039:33;1998:32;2039:33;:::i;:::-;1793:362;;2091:7;;-1:-1:-1;;;2145:2:14;2130:18;;;;2117:32;;1793:362::o;2160:325::-;2228:6;2236;2289:2;2277:9;2268:7;2264:23;2260:32;2257:2;;;2310:6;2302;2295:22;2257:2;2354:9;2341:23;2373:31;2398:5;2373:31;:::i;:::-;2423:5;2475:2;2460:18;;;;2447:32;;-1:-1:-1;;;2247:238:14:o;2490:573::-;2578:6;2586;2639:2;2627:9;2618:7;2614:23;2610:32;2607:2;;;2660:6;2652;2645:22;2607:2;2705:9;2692:23;2734:18;2775:2;2767:6;2764:14;2761:2;;;2796:6;2788;2781:22;2761:2;2824:50;2866:7;2857:6;2846:9;2842:22;2824:50;:::i;:::-;2814:60;;2927:2;2916:9;2912:18;2899:32;2883:48;;2956:2;2946:8;2943:16;2940:2;;;2977:6;2969;2962:22;2940:2;;3005:52;3049:7;3038:8;3027:9;3023:24;3005:52;:::i;:::-;2995:62;;;2597:466;;;;;:::o;3068:190::-;3127:6;3180:2;3168:9;3159:7;3155:23;3151:32;3148:2;;;3201:6;3193;3186:22;3148:2;-1:-1:-1;3229:23:14;;3138:120;-1:-1:-1;3138:120:14:o;4212:603::-;4324:4;4353:2;4382;4371:9;4364:21;4414:6;4408:13;4457:6;4452:2;4441:9;4437:18;4430:34;4482:4;4495:140;4509:6;4506:1;4503:13;4495:140;;;4604:14;;;4600:23;;4594:30;4570:17;;;4589:2;4566:26;4559:66;4524:10;;4495:140;;;4653:6;4650:1;4647:13;4644:2;;;4723:4;4718:2;4709:6;4698:9;4694:22;4690:31;4683:45;4644:2;-1:-1:-1;4799:2:14;4778:15;-1:-1:-1;;4774:29:14;4759:45;;;;4806:2;4755:54;;4333:482;-1:-1:-1;;;4333:482:14:o;7480:410::-;7682:2;7664:21;;;7721:2;7701:18;;;7694:30;7760:34;7755:2;7740:18;;7733:62;-1:-1:-1;;;7826:2:14;7811:18;;7804:44;7880:3;7865:19;;7654:236::o;7895:356::-;8097:2;8079:21;;;8116:18;;;8109:30;8175:34;8170:2;8155:18;;8148:62;8242:2;8227:18;;8069:182::o;9067:407::-;9269:2;9251:21;;;9308:2;9288:18;;;9281:30;9347:34;9342:2;9327:18;;9320:62;-1:-1:-1;;;9413:2:14;9398:18;;9391:41;9464:3;9449:19;;9241:233::o;10959:128::-;10999:3;11030:1;11026:6;11023:1;11020:13;11017:2;;;11036:18;;:::i;:::-;-1:-1:-1;11072:9:14;;11007:80::o;11092:125::-;11132:4;11160:1;11157;11154:8;11151:2;;;11165:18;;:::i;:::-;-1:-1:-1;11202:9:14;;11141:76::o;11222:380::-;11301:1;11297:12;;;;11344;;;11365:2;;11419:4;11411:6;11407:17;11397:27;;11365:2;11472;11464:6;11461:14;11441:18;11438:38;11435:2;;;11518:10;11513:3;11509:20;11506:1;11499:31;11553:4;11550:1;11543:15;11581:4;11578:1;11571:15;11435:2;;11277:325;;;:::o;11607:127::-;11668:10;11663:3;11659:20;11656:1;11649:31;11699:4;11696:1;11689:15;11723:4;11720:1;11713:15;11739:127;11800:10;11795:3;11791:20;11788:1;11781:31;11831:4;11828:1;11821:15;11855:4;11852:1;11845:15;11871:131;-1:-1:-1;;;;;11946:31:14;;11936:42;;11926:2;;11992:1;11989;11982:12"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1011400",
								"executionCost": "1054",
								"totalCost": "1012454"
							},
							"external": {
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "22541",
								"balanceOf(address)": "1254",
								"claimDairy(uint256)": "infinite",
								"decimals()": "289",
								"decreaseAllowance(address,uint256)": "23566",
								"getLastClaimed(uint256)": "1226",
								"increaseAllowance(address,uint256)": "23595",
								"initialize(string,string)": "infinite",
								"mint(address,uint256)": "infinite",
								"name()": "infinite",
								"owner()": "1090",
								"paused()": "1137",
								"renounceOwnership()": "23462",
								"setCooldown(uint256)": "21153",
								"setMoolaNFTAddress(address)": "22071",
								"setWhitelist(address)": "22111",
								"symbol()": "infinite",
								"totalSupply()": "1049",
								"transfer(address,uint256)": "44414",
								"transferFrom(address,address,uint256)": "infinite",
								"transferOwnership(address)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 562,
									"end": 2550,
									"name": "PUSH",
									"source": 13,
									"value": "80"
								},
								{
									"begin": 562,
									"end": 2550,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 562,
									"end": 2550,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 562,
									"end": 2550,
									"name": "CALLVALUE",
									"source": 13
								},
								{
									"begin": 562,
									"end": 2550,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 562,
									"end": 2550,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 562,
									"end": 2550,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 562,
									"end": 2550,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 562,
									"end": 2550,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 562,
									"end": 2550,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 562,
									"end": 2550,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 562,
									"end": 2550,
									"name": "tag",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 562,
									"end": 2550,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 562,
									"end": 2550,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 562,
									"end": 2550,
									"name": "PUSH #[$]",
									"source": 13,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 562,
									"end": 2550,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 562,
									"end": 2550,
									"name": "PUSH [$]",
									"source": 13,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 562,
									"end": 2550,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 562,
									"end": 2550,
									"name": "CODECOPY",
									"source": 13
								},
								{
									"begin": 562,
									"end": 2550,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 562,
									"end": 2550,
									"name": "RETURN",
									"source": 13
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212205862b08996d209c1fc6a0ee03bcc43640577bace9ae5e15c2b1eb96030b1a37464736f6c63430008040033",
									".code": [
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "CALLVALUE",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "tag",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH",
											"source": 13,
											"value": "E0"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "SHR",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH",
											"source": 13,
											"value": "70A08231"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "25"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH",
											"source": 13,
											"value": "A457C2D7"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "26"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH",
											"source": 13,
											"value": "A457C2D7"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "19"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH",
											"source": 13,
											"value": "A9059CBB"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH",
											"source": 13,
											"value": "BE023D84"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "21"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH",
											"source": 13,
											"value": "D1A20509"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "22"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH",
											"source": 13,
											"value": "DD62ED3E"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "23"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH",
											"source": 13,
											"value": "F2FDE38B"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "tag",
											"source": 13,
											"value": "26"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH",
											"source": 13,
											"value": "70A08231"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "14"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH",
											"source": 13,
											"value": "715018A6"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "15"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH",
											"source": 13,
											"value": "854CFF2F"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "16"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH",
											"source": 13,
											"value": "8DA5CB5B"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "17"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH",
											"source": 13,
											"value": "95D89B41"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "18"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "tag",
											"source": 13,
											"value": "25"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH",
											"source": 13,
											"value": "39509351"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "27"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH",
											"source": 13,
											"value": "39509351"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "8"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH",
											"source": 13,
											"value": "40C10F19"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "9"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH",
											"source": 13,
											"value": "4CD88B76"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "10"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH",
											"source": 13,
											"value": "4FC3F41A"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "11"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH",
											"source": 13,
											"value": "59176C8D"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "12"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH",
											"source": 13,
											"value": "5C975ABB"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "13"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "tag",
											"source": 13,
											"value": "27"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH",
											"source": 13,
											"value": "6FDDE03"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "3"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH",
											"source": 13,
											"value": "95EA7B3"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH",
											"source": 13,
											"value": "18160DDD"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "5"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH",
											"source": 13,
											"value": "23B872DD"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "6"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH",
											"source": 13,
											"value": "313CE567"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "7"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "tag",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 562,
											"end": 2550,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "tag",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "28"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "29"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "tag",
											"source": 4,
											"value": "28"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "30"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "31"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "tag",
											"source": 4,
											"value": "30"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "RETURN",
											"source": 4
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "tag",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "32"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "33"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "34"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "tag",
											"source": 4,
											"value": "33"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "35"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "tag",
											"source": 4,
											"value": "32"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 3986,
											"end": 4000,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3986,
											"end": 4000,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 3979,
											"end": 4001,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 3961,
											"end": 4002,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3961,
											"end": 4002,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3949,
											"end": 3951,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 3934,
											"end": 3952,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "30"
										},
										{
											"begin": 3916,
											"end": 4008,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "tag",
											"source": 4,
											"value": "5"
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3668,
											"end": 3680,
											"name": "PUSH",
											"source": 4,
											"value": "35"
										},
										{
											"begin": 3668,
											"end": 3680,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "tag",
											"source": 4,
											"value": "38"
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 10734,
											"end": 10759,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 10734,
											"end": 10759,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 10734,
											"end": 10759,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10722,
											"end": 10724,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 10707,
											"end": 10725,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3581,
											"end": 3687,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "30"
										},
										{
											"begin": 10689,
											"end": 10765,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "tag",
											"source": 4,
											"value": "6"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "32"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "43"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "44"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "tag",
											"source": 4,
											"value": "43"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "45"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1709,
											"end": 1796,
											"name": "tag",
											"source": 13,
											"value": "7"
										},
										{
											"begin": 1709,
											"end": 1796,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1709,
											"end": 1796,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 1709,
											"end": 1796,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 1788,
											"end": 1790,
											"name": "PUSH",
											"source": 13,
											"value": "12"
										},
										{
											"begin": 4165,
											"end": 4201,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4165,
											"end": 4201,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4153,
											"end": 4155,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4138,
											"end": 4156,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1709,
											"end": 1796,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "30"
										},
										{
											"begin": 4120,
											"end": 4207,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "tag",
											"source": 4,
											"value": "8"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "32"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "52"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "34"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "tag",
											"source": 4,
											"value": "52"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "53"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1926,
											"end": 2021,
											"name": "tag",
											"source": 13,
											"value": "9"
										},
										{
											"begin": 1926,
											"end": 2021,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1926,
											"end": 2021,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "55"
										},
										{
											"begin": 1926,
											"end": 2021,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "56"
										},
										{
											"begin": 1926,
											"end": 2021,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 1926,
											"end": 2021,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 1926,
											"end": 2021,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "34"
										},
										{
											"begin": 1926,
											"end": 2021,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1926,
											"end": 2021,
											"name": "tag",
											"source": 13,
											"value": "56"
										},
										{
											"begin": 1926,
											"end": 2021,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1926,
											"end": 2021,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "57"
										},
										{
											"begin": 1926,
											"end": 2021,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1926,
											"end": 2021,
											"name": "tag",
											"source": 13,
											"value": "55"
										},
										{
											"begin": 1926,
											"end": 2021,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1926,
											"end": 2021,
											"name": "STOP",
											"source": 13
										},
										{
											"begin": 1050,
											"end": 1309,
											"name": "tag",
											"source": 13,
											"value": "10"
										},
										{
											"begin": 1050,
											"end": 1309,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1050,
											"end": 1309,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "55"
										},
										{
											"begin": 1050,
											"end": 1309,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "59"
										},
										{
											"begin": 1050,
											"end": 1309,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 1050,
											"end": 1309,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 1050,
											"end": 1309,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 1050,
											"end": 1309,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1050,
											"end": 1309,
											"name": "tag",
											"source": 13,
											"value": "59"
										},
										{
											"begin": 1050,
											"end": 1309,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1050,
											"end": 1309,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "61"
										},
										{
											"begin": 1050,
											"end": 1309,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1423,
											"end": 1515,
											"name": "tag",
											"source": 13,
											"value": "11"
										},
										{
											"begin": 1423,
											"end": 1515,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1423,
											"end": 1515,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "55"
										},
										{
											"begin": 1423,
											"end": 1515,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "63"
										},
										{
											"begin": 1423,
											"end": 1515,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 1423,
											"end": 1515,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 1423,
											"end": 1515,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 1423,
											"end": 1515,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1423,
											"end": 1515,
											"name": "tag",
											"source": 13,
											"value": "63"
										},
										{
											"begin": 1423,
											"end": 1515,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1423,
											"end": 1515,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "65"
										},
										{
											"begin": 1423,
											"end": 1515,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2027,
											"end": 2423,
											"name": "tag",
											"source": 13,
											"value": "12"
										},
										{
											"begin": 2027,
											"end": 2423,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2027,
											"end": 2423,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "55"
										},
										{
											"begin": 2027,
											"end": 2423,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "67"
										},
										{
											"begin": 2027,
											"end": 2423,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 2027,
											"end": 2423,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 2027,
											"end": 2423,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 2027,
											"end": 2423,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2027,
											"end": 2423,
											"name": "tag",
											"source": 13,
											"value": "67"
										},
										{
											"begin": 2027,
											"end": 2423,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2027,
											"end": 2423,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "68"
										},
										{
											"begin": 2027,
											"end": 2423,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1341,
											"end": 1425,
											"name": "tag",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 1341,
											"end": 1425,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1411,
											"end": 1418,
											"name": "PUSH",
											"source": 2,
											"value": "97"
										},
										{
											"begin": 1411,
											"end": 1418,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1411,
											"end": 1418,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": 1411,
											"end": 1418,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1341,
											"end": 1425,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 1341,
											"end": 1425,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "tag",
											"source": 4,
											"value": "14"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "38"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "73"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "74"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "tag",
											"source": 4,
											"value": "73"
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3819,
											"end": 3826,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3845,
											"end": 3854,
											"name": "PUSH",
											"source": 4,
											"value": "33"
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 3845,
											"end": 3863,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3745,
											"end": 3870,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1908,
											"end": 2009,
											"name": "tag",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 1908,
											"end": 2009,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1908,
											"end": 2009,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 1908,
											"end": 2009,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 1908,
											"end": 2009,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1315,
											"end": 1417,
											"name": "tag",
											"source": 13,
											"value": "16"
										},
										{
											"begin": 1315,
											"end": 1417,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1315,
											"end": 1417,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "55"
										},
										{
											"begin": 1315,
											"end": 1417,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 1315,
											"end": 1417,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 1315,
											"end": 1417,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 1315,
											"end": 1417,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "74"
										},
										{
											"begin": 1315,
											"end": 1417,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1315,
											"end": 1417,
											"name": "tag",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 1315,
											"end": 1417,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1315,
											"end": 1417,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "81"
										},
										{
											"begin": 1315,
											"end": 1417,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1276,
											"end": 1361,
											"name": "tag",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 1276,
											"end": 1361,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "PUSH",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1276,
											"end": 1361,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1276,
											"end": 1361,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3409,
											"end": 3460,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3409,
											"end": 3460,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3397,
											"end": 3399,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 3382,
											"end": 3400,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1276,
											"end": 1361,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 3364,
											"end": 3466,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "tag",
											"source": 4,
											"value": "18"
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "28"
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "87"
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "tag",
											"source": 4,
											"value": "19"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "32"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "90"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "34"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "tag",
											"source": 4,
											"value": "90"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "91"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "tag",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "32"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "94"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "34"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "tag",
											"source": 4,
											"value": "94"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "95"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1521,
											"end": 1644,
											"name": "tag",
											"source": 13,
											"value": "21"
										},
										{
											"begin": 1521,
											"end": 1644,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1521,
											"end": 1644,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "55"
										},
										{
											"begin": 1521,
											"end": 1644,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "98"
										},
										{
											"begin": 1521,
											"end": 1644,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 1521,
											"end": 1644,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 1521,
											"end": 1644,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "74"
										},
										{
											"begin": 1521,
											"end": 1644,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1521,
											"end": 1644,
											"name": "tag",
											"source": 13,
											"value": "98"
										},
										{
											"begin": 1521,
											"end": 1644,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1521,
											"end": 1644,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "99"
										},
										{
											"begin": 1521,
											"end": 1644,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2429,
											"end": 2547,
											"name": "tag",
											"source": 13,
											"value": "22"
										},
										{
											"begin": 2429,
											"end": 2547,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2429,
											"end": 2547,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "38"
										},
										{
											"begin": 2429,
											"end": 2547,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "101"
										},
										{
											"begin": 2429,
											"end": 2547,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 2429,
											"end": 2547,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 2429,
											"end": 2547,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 2429,
											"end": 2547,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2429,
											"end": 2547,
											"name": "tag",
											"source": 13,
											"value": "101"
										},
										{
											"begin": 2429,
											"end": 2547,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2494,
											"end": 2501,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2517,
											"end": 2541,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2517,
											"end": 2541,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2517,
											"end": 2541,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2517,
											"end": 2531,
											"name": "PUSH",
											"source": 13,
											"value": "CD"
										},
										{
											"begin": 2517,
											"end": 2541,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2517,
											"end": 2541,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2517,
											"end": 2541,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2517,
											"end": 2541,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2517,
											"end": 2541,
											"name": "KECCAK256",
											"source": 13
										},
										{
											"begin": 2517,
											"end": 2541,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 2517,
											"end": 2541,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2429,
											"end": 2547,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "tag",
											"source": 4,
											"value": "23"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "38"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "105"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "106"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "tag",
											"source": 4,
											"value": "105"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "107"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "tag",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "tag",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "tag",
											"source": 4,
											"value": "29"
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2547,
											"end": 2560,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 2579,
											"end": 2584,
											"name": "PUSH",
											"source": 4,
											"value": "36"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "113"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "114"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "tag",
											"source": 4,
											"value": "113"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "115"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "114"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "tag",
											"source": 4,
											"value": "115"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "116"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "117"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "116"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "tag",
											"source": 4,
											"value": "117"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "tag",
											"source": 4,
											"value": "118"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "118"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "tag",
											"source": 4,
											"value": "116"
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2572,
											"end": 2584,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2493,
											"end": 2591,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "tag",
											"source": 4,
											"value": "35"
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4853,
											"end": 4857,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 4907,
											"end": 4939,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "122"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4923,
											"end": 4930,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 4932,
											"end": 4938,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 4907,
											"end": 4915,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "123"
										},
										{
											"begin": 4907,
											"end": 4939,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4907,
											"end": 4939,
											"name": "tag",
											"source": 4,
											"value": "122"
										},
										{
											"begin": 4907,
											"end": 4939,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4956,
											"end": 4960,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 4956,
											"end": 4960,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4770,
											"end": 4967,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "tag",
											"source": 4,
											"value": "45"
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5656,
											"end": 5660,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 5712,
											"end": 5750,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "127"
										},
										{
											"begin": 5728,
											"end": 5732,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 5743,
											"end": 5749,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 5712,
											"end": 5727,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "128"
										},
										{
											"begin": 5712,
											"end": 5750,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 5712,
											"end": 5750,
											"name": "tag",
											"source": 4,
											"value": "127"
										},
										{
											"begin": 5712,
											"end": 5750,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5760,
											"end": 5787,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "129"
										},
										{
											"begin": 5770,
											"end": 5774,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 5776,
											"end": 5778,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 5780,
											"end": 5786,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 5760,
											"end": 5769,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "130"
										},
										{
											"begin": 5760,
											"end": 5787,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 5760,
											"end": 5787,
											"name": "tag",
											"source": 4,
											"value": "129"
										},
										{
											"begin": 5760,
											"end": 5787,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5804,
											"end": 5808,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 5804,
											"end": 5808,
											"name": "SWAP5",
											"source": 4
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5529,
											"end": 5815,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "tag",
											"source": 4,
											"value": "53"
										},
										{
											"begin": 6210,
											"end": 6444,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6298,
											"end": 6302,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 6352,
											"end": 6416,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "122"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6368,
											"end": 6375,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 6405,
											"end": 6415,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 6377,
											"end": 6402,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "135"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 6368,
											"end": 6375,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 6377,
											"end": 6386,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "107"
										},
										{
											"begin": 6377,
											"end": 6402,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 6377,
											"end": 6402,
											"name": "tag",
											"source": 4,
											"value": "135"
										},
										{
											"begin": 6377,
											"end": 6402,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6377,
											"end": 6415,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "136"
										},
										{
											"begin": 6377,
											"end": 6415,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6377,
											"end": 6415,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6377,
											"end": 6415,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "137"
										},
										{
											"begin": 6377,
											"end": 6415,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 6377,
											"end": 6415,
											"name": "tag",
											"source": 4,
											"value": "136"
										},
										{
											"begin": 6377,
											"end": 6415,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6352,
											"end": 6360,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "123"
										},
										{
											"begin": 6352,
											"end": 6416,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1926,
											"end": 2021,
											"name": "tag",
											"source": 13,
											"value": "57"
										},
										{
											"begin": 1926,
											"end": 2021,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 922,
											"end": 932,
											"name": "CALLER",
											"source": 13
										},
										{
											"begin": 912,
											"end": 933,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 912,
											"end": 933,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 912,
											"end": 933,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 912,
											"end": 933,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 912,
											"end": 921,
											"name": "PUSH",
											"source": 13,
											"value": "CC"
										},
										{
											"begin": 912,
											"end": 933,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 912,
											"end": 933,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 912,
											"end": 933,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 912,
											"end": 933,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 912,
											"end": 933,
											"name": "KECCAK256",
											"source": 13
										},
										{
											"begin": 912,
											"end": 933,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 912,
											"end": 933,
											"name": "PUSH",
											"source": 13,
											"value": "FF"
										},
										{
											"begin": 912,
											"end": 933,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 904,
											"end": 952,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "139"
										},
										{
											"begin": 904,
											"end": 952,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 904,
											"end": 952,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 904,
											"end": 952,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 904,
											"end": 952,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 904,
											"end": 952,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 9681,
											"end": 9683,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 904,
											"end": 952,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 904,
											"end": 952,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 904,
											"end": 952,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 9663,
											"end": 9684,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9720,
											"end": 9722,
											"name": "PUSH",
											"source": 14,
											"value": "E"
										},
										{
											"begin": 9700,
											"end": 9718,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 9700,
											"end": 9718,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 9700,
											"end": 9718,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9693,
											"end": 9723,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "13DB9B1E481DDA1A5D195B1A5CDD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "92"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9739,
											"end": 9757,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 9739,
											"end": 9757,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 9739,
											"end": 9757,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9732,
											"end": 9776,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9793,
											"end": 9811,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 9793,
											"end": 9811,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 904,
											"end": 952,
											"name": "tag",
											"source": 13,
											"value": "140"
										},
										{
											"begin": 904,
											"end": 952,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 904,
											"end": 952,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 904,
											"end": 952,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 904,
											"end": 952,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 904,
											"end": 952,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 904,
											"end": 952,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 904,
											"end": 952,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 904,
											"end": 952,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 904,
											"end": 952,
											"name": "tag",
											"source": 13,
											"value": "139"
										},
										{
											"begin": 904,
											"end": 952,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1998,
											"end": 2015,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "143"
										},
										{
											"begin": 2004,
											"end": 2006,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2008,
											"end": 2014,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1998,
											"end": 2003,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "144"
										},
										{
											"begin": 1998,
											"end": 2015,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1998,
											"end": 2015,
											"name": "tag",
											"source": 13,
											"value": "143"
										},
										{
											"begin": 1998,
											"end": 2015,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1926,
											"end": 2021,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1926,
											"end": 2021,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1926,
											"end": 2021,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 1050,
											"end": 1309,
											"name": "tag",
											"source": 13,
											"value": "61"
										},
										{
											"begin": 1050,
											"end": 1309,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3111,
											"end": 3130,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3133,
											"end": 3158,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "146"
										},
										{
											"begin": 3156,
											"end": 3157,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 3133,
											"end": 3155,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "147"
										},
										{
											"begin": 3133,
											"end": 3158,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 3133,
											"end": 3158,
											"name": "tag",
											"source": 1,
											"value": "146"
										},
										{
											"begin": 3133,
											"end": 3158,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3111,
											"end": 3158,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3111,
											"end": 3158,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3172,
											"end": 3186,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3168,
											"end": 3233,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3168,
											"end": 3233,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "148"
										},
										{
											"begin": 3168,
											"end": 3233,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3202,
											"end": 3215,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3202,
											"end": 3222,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3202,
											"end": 3222,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3202,
											"end": 3222,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3202,
											"end": 3222,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 3202,
											"end": 3222,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 3202,
											"end": 3222,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3202,
											"end": 3222,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 3168,
											"end": 3233,
											"name": "tag",
											"source": 1,
											"value": "148"
										},
										{
											"begin": 3168,
											"end": 3233,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1155,
											"end": 1183,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "150"
										},
										{
											"begin": 1168,
											"end": 1173,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 1175,
											"end": 1182,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 1155,
											"end": 1167,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "151"
										},
										{
											"begin": 1155,
											"end": 1183,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1155,
											"end": 1183,
											"name": "tag",
											"source": 13,
											"value": "150"
										},
										{
											"begin": 1155,
											"end": 1183,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1190,
											"end": 1206,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "152"
										},
										{
											"begin": 1190,
											"end": 1204,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "153"
										},
										{
											"begin": 1190,
											"end": 1206,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1190,
											"end": 1206,
											"name": "tag",
											"source": 13,
											"value": "152"
										},
										{
											"begin": 1190,
											"end": 1206,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1213,
											"end": 1230,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "154"
										},
										{
											"begin": 1213,
											"end": 1228,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "155"
										},
										{
											"begin": 1213,
											"end": 1230,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1213,
											"end": 1230,
											"name": "tag",
											"source": 13,
											"value": "154"
										},
										{
											"begin": 1213,
											"end": 1230,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1239,
											"end": 1276,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "156"
										},
										{
											"begin": 1245,
											"end": 1255,
											"name": "CALLER",
											"source": 13
										},
										{
											"begin": 1257,
											"end": 1275,
											"name": "PUSH",
											"source": 13,
											"value": "204FCE5E3E25026110000000"
										},
										{
											"begin": 1239,
											"end": 1244,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "144"
										},
										{
											"begin": 1239,
											"end": 1276,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1239,
											"end": 1276,
											"name": "tag",
											"source": 13,
											"value": "156"
										},
										{
											"begin": 1239,
											"end": 1276,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1294,
											"end": 1303,
											"name": "PUSH",
											"source": 13,
											"value": "3C"
										},
										{
											"begin": 1283,
											"end": 1291,
											"name": "PUSH",
											"source": 13,
											"value": "CA"
										},
										{
											"begin": 1283,
											"end": 1303,
											"name": "SSTORE",
											"source": 13
										},
										{
											"begin": 3253,
											"end": 3352,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3253,
											"end": 3352,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3253,
											"end": 3352,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "157"
										},
										{
											"begin": 3253,
											"end": 3352,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3303,
											"end": 3308,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3287,
											"end": 3308,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3287,
											"end": 3308,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3287,
											"end": 3308,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3287,
											"end": 3308,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3287,
											"end": 3308,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 3327,
											"end": 3341,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3327,
											"end": 3341,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": 4165,
											"end": 4201,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4165,
											"end": 4201,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3327,
											"end": 3341,
											"name": "PUSH",
											"source": 1,
											"value": "7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498"
										},
										{
											"begin": 3327,
											"end": 3341,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4153,
											"end": 4155,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4138,
											"end": 4156,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3327,
											"end": 3341,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3327,
											"end": 3341,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3327,
											"end": 3341,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3327,
											"end": 3341,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3327,
											"end": 3341,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3327,
											"end": 3341,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3327,
											"end": 3341,
											"name": "LOG1",
											"source": 1
										},
										{
											"begin": 3253,
											"end": 3352,
											"name": "tag",
											"source": 1,
											"value": "157"
										},
										{
											"begin": 3253,
											"end": 3352,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1050,
											"end": 1309,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1050,
											"end": 1309,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1050,
											"end": 1309,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1050,
											"end": 1309,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 1423,
											"end": 1515,
											"name": "tag",
											"source": 13,
											"value": "65"
										},
										{
											"begin": 1423,
											"end": 1515,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "PUSH",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 1488,
											"end": 1511,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "163"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "140"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "165"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "tag",
											"source": 0,
											"value": "163"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1489,
											"end": 1497,
											"name": "PUSH",
											"source": 13,
											"value": "CA"
										},
										{
											"begin": 1489,
											"end": 1509,
											"name": "SSTORE",
											"source": 13
										},
										{
											"begin": 1423,
											"end": 1515,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 2027,
											"end": 2423,
											"name": "tag",
											"source": 13,
											"value": "68"
										},
										{
											"begin": 2027,
											"end": 2423,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2097,
											"name": "PUSH",
											"source": 13,
											"value": "CB"
										},
										{
											"begin": 2089,
											"end": 2097,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "31A9108F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 10734,
											"end": 10759,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 10734,
											"end": 10759,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 10734,
											"end": 10759,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 2119,
											"end": 2129,
											"name": "CALLER",
											"source": 13
										},
										{
											"begin": 2119,
											"end": 2129,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2089,
											"end": 2097,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2097,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2105,
											"name": "PUSH",
											"source": 13,
											"value": "6352211E"
										},
										{
											"begin": 2089,
											"end": 2105,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 10707,
											"end": 10725,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 10707,
											"end": 10725,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "EXTCODESIZE",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "169"
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "tag",
											"source": 13,
											"value": "169"
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "GAS",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "STATICCALL",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "171"
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "RETURNDATACOPY",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "tag",
											"source": 13,
											"value": "171"
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "NOT",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "172"
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "173"
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "tag",
											"source": 13,
											"value": "172"
										},
										{
											"begin": 2089,
											"end": 2115,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2089,
											"end": 2129,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2089,
											"end": 2129,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 2081,
											"end": 2146,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "174"
										},
										{
											"begin": 2081,
											"end": 2146,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2081,
											"end": 2146,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2081,
											"end": 2146,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2081,
											"end": 2146,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2081,
											"end": 2146,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 6236,
											"end": 6238,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 2081,
											"end": 2146,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 2081,
											"end": 2146,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2081,
											"end": 2146,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6218,
											"end": 6239,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6275,
											"end": 6277,
											"name": "PUSH",
											"source": 14,
											"value": "C"
										},
										{
											"begin": 6255,
											"end": 6273,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 6255,
											"end": 6273,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6255,
											"end": 6273,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6248,
											"end": 6278,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "15539055551213D492569151"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6294,
											"end": 6312,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 6294,
											"end": 6312,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6294,
											"end": 6312,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6287,
											"end": 6329,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6346,
											"end": 6364,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 6346,
											"end": 6364,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2081,
											"end": 2146,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "140"
										},
										{
											"begin": 6208,
											"end": 6370,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 2081,
											"end": 2146,
											"name": "tag",
											"source": 13,
											"value": "174"
										},
										{
											"begin": 2081,
											"end": 2146,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2187,
											"end": 2211,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2187,
											"end": 2211,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2187,
											"end": 2211,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2187,
											"end": 2211,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2187,
											"end": 2201,
											"name": "PUSH",
											"source": 13,
											"value": "CD"
										},
										{
											"begin": 2187,
											"end": 2211,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2187,
											"end": 2211,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2187,
											"end": 2211,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2187,
											"end": 2211,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2187,
											"end": 2211,
											"name": "KECCAK256",
											"source": 13
										},
										{
											"begin": 2187,
											"end": 2211,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 2215,
											"end": 2221,
											"name": "PUSH",
											"source": 13,
											"value": "15180"
										},
										{
											"begin": 2215,
											"end": 2221,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2169,
											"end": 2211,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "177"
										},
										{
											"begin": 2169,
											"end": 2211,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2169,
											"end": 2184,
											"name": "TIMESTAMP",
											"source": 13
										},
										{
											"begin": 2169,
											"end": 2211,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "178"
										},
										{
											"begin": 2169,
											"end": 2211,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2169,
											"end": 2211,
											"name": "tag",
											"source": 13,
											"value": "177"
										},
										{
											"begin": 2169,
											"end": 2211,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2169,
											"end": 2221,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 2169,
											"end": 2221,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2153,
											"end": 2250,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "179"
										},
										{
											"begin": 2153,
											"end": 2250,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2153,
											"end": 2250,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2153,
											"end": 2250,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2153,
											"end": 2250,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2153,
											"end": 2250,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 6577,
											"end": 6579,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 2153,
											"end": 2250,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 2153,
											"end": 2250,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2153,
											"end": 2250,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6559,
											"end": 6580,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6616,
											"end": 6618,
											"name": "PUSH",
											"source": 14,
											"value": "B"
										},
										{
											"begin": 6596,
											"end": 6614,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 6596,
											"end": 6614,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6596,
											"end": 6614,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6589,
											"end": 6619,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "27A71021A7A7A62227ABA7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6635,
											"end": 6653,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 6635,
											"end": 6653,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6635,
											"end": 6653,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6628,
											"end": 6669,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6686,
											"end": 6704,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 6686,
											"end": 6704,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2153,
											"end": 2250,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "140"
										},
										{
											"begin": 6549,
											"end": 6710,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 2153,
											"end": 2250,
											"name": "tag",
											"source": 13,
											"value": "179"
										},
										{
											"begin": 2153,
											"end": 2250,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2259,
											"end": 2292,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "182"
										},
										{
											"begin": 2265,
											"end": 2275,
											"name": "CALLER",
											"source": 13
										},
										{
											"begin": 2277,
											"end": 2291,
											"name": "PUSH",
											"source": 13,
											"value": "C9"
										},
										{
											"begin": 2277,
											"end": 2291,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 2259,
											"end": 2264,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "144"
										},
										{
											"begin": 2259,
											"end": 2292,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2259,
											"end": 2292,
											"name": "tag",
											"source": 13,
											"value": "182"
										},
										{
											"begin": 2259,
											"end": 2292,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2299,
											"end": 2323,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2299,
											"end": 2323,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2299,
											"end": 2323,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2299,
											"end": 2323,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2299,
											"end": 2313,
											"name": "PUSH",
											"source": 13,
											"value": "CD"
										},
										{
											"begin": 2299,
											"end": 2323,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2299,
											"end": 2323,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2299,
											"end": 2323,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2299,
											"end": 2323,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2299,
											"end": 2323,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2299,
											"end": 2323,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2299,
											"end": 2323,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2299,
											"end": 2323,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2299,
											"end": 2323,
											"name": "KECCAK256",
											"source": 13
										},
										{
											"begin": 2326,
											"end": 2341,
											"name": "TIMESTAMP",
											"source": 13
										},
										{
											"begin": 2299,
											"end": 2341,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2299,
											"end": 2341,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2299,
											"end": 2341,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2299,
											"end": 2341,
											"name": "SSTORE",
											"source": 13
										},
										{
											"begin": 2385,
											"end": 2399,
											"name": "PUSH",
											"source": 13,
											"value": "C9"
										},
										{
											"begin": 2385,
											"end": 2399,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 2355,
											"end": 2417,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 2355,
											"end": 2417,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 2373,
											"end": 2383,
											"name": "CALLER",
											"source": 13
										},
										{
											"begin": 3673,
											"end": 3724,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3673,
											"end": 3724,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3740,
											"end": 3758,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 3740,
											"end": 3758,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 3740,
											"end": 3758,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3733,
											"end": 3767,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3783,
											"end": 3801,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3783,
											"end": 3801,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 3783,
											"end": 3801,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3776,
											"end": 3810,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 2355,
											"end": 2417,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2355,
											"end": 2417,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 2355,
											"end": 2417,
											"name": "PUSH",
											"source": 13,
											"value": "8DCE8756778B482EF8CFEF8C65FAADC506CE94E081BB6CC3A2D3448D99DE9A50"
										},
										{
											"begin": 2355,
											"end": 2417,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2355,
											"end": 2417,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2355,
											"end": 2417,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2355,
											"end": 2417,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 3661,
											"end": 3663,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 2355,
											"end": 2417,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2355,
											"end": 2417,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2355,
											"end": 2417,
											"name": "LOG1",
											"source": 13
										},
										{
											"begin": 2027,
											"end": 2423,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2027,
											"end": 2423,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 1908,
											"end": 2009,
											"name": "tag",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 1908,
											"end": 2009,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "PUSH",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 1488,
											"end": 1511,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "190"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "140"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "165"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "tag",
											"source": 0,
											"value": "190"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1972,
											"end": 2002,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "193"
										},
										{
											"begin": 1999,
											"end": 2000,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1972,
											"end": 1990,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "194"
										},
										{
											"begin": 1972,
											"end": 2002,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1972,
											"end": 2002,
											"name": "tag",
											"source": 0,
											"value": "193"
										},
										{
											"begin": 1972,
											"end": 2002,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1908,
											"end": 2009,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1315,
											"end": 1417,
											"name": "tag",
											"source": 13,
											"value": "81"
										},
										{
											"begin": 1315,
											"end": 1417,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "PUSH",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 1488,
											"end": 1511,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "198"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "140"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "165"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "tag",
											"source": 0,
											"value": "198"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1383,
											"end": 1404,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 1383,
											"end": 1404,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1383,
											"end": 1404,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1383,
											"end": 1404,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1383,
											"end": 1404,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1383,
											"end": 1392,
											"name": "PUSH",
											"source": 13,
											"value": "CC"
										},
										{
											"begin": 1383,
											"end": 1404,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1383,
											"end": 1404,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1383,
											"end": 1404,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 1383,
											"end": 1404,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1383,
											"end": 1404,
											"name": "KECCAK256",
											"source": 13
										},
										{
											"begin": 1383,
											"end": 1411,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1383,
											"end": 1411,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1383,
											"end": 1411,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 1407,
											"end": 1411,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 1383,
											"end": 1411,
											"name": "OR",
											"source": 13
										},
										{
											"begin": 1383,
											"end": 1411,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1383,
											"end": 1411,
											"name": "SSTORE",
											"source": 13
										},
										{
											"begin": 1315,
											"end": 1417,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "tag",
											"source": 4,
											"value": "87"
										},
										{
											"begin": 2704,
											"end": 2806,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2760,
											"end": 2773,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 2792,
											"end": 2799,
											"name": "PUSH",
											"source": 4,
											"value": "37"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "113"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "114"
										},
										{
											"begin": 2785,
											"end": 2799,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "tag",
											"source": 4,
											"value": "91"
										},
										{
											"begin": 6931,
											"end": 7358,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7024,
											"end": 7028,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 7024,
											"end": 7028,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7105,
											"end": 7130,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "210"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 7122,
											"end": 7129,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 7105,
											"end": 7114,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "107"
										},
										{
											"begin": 7105,
											"end": 7130,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 7105,
											"end": 7130,
											"name": "tag",
											"source": 4,
											"value": "210"
										},
										{
											"begin": 7105,
											"end": 7130,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7078,
											"end": 7130,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7078,
											"end": 7130,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 7168,
											"end": 7183,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 7148,
											"end": 7164,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7148,
											"end": 7183,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 7148,
											"end": 7183,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "211"
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 10024,
											"end": 10026,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 10006,
											"end": 10027,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10063,
											"end": 10065,
											"name": "PUSH",
											"source": 14,
											"value": "25"
										},
										{
											"begin": 10043,
											"end": 10061,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 10043,
											"end": 10061,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10043,
											"end": 10061,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10036,
											"end": 10066,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10102,
											"end": 10136,
											"name": "PUSH",
											"source": 14,
											"value": "45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
										},
										{
											"begin": 10082,
											"end": 10100,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 10082,
											"end": 10100,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10082,
											"end": 10100,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10075,
											"end": 10137,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "207A65726F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10153,
											"end": 10171,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 10153,
											"end": 10171,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10153,
											"end": 10171,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10146,
											"end": 10181,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10198,
											"end": 10217,
											"name": "PUSH",
											"source": 14,
											"value": "84"
										},
										{
											"begin": 10198,
											"end": 10217,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "140"
										},
										{
											"begin": 9996,
											"end": 10223,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "tag",
											"source": 4,
											"value": "211"
										},
										{
											"begin": 7140,
											"end": 7225,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7259,
											"end": 7319,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "129"
										},
										{
											"begin": 7268,
											"end": 7273,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7275,
											"end": 7282,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 7303,
											"end": 7318,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 7284,
											"end": 7300,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 7284,
											"end": 7318,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 7259,
											"end": 7267,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "123"
										},
										{
											"begin": 7259,
											"end": 7319,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "tag",
											"source": 4,
											"value": "95"
										},
										{
											"begin": 4066,
											"end": 4255,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4145,
											"end": 4149,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 4199,
											"end": 4227,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "122"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4216,
											"end": 4218,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 4220,
											"end": 4226,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 4199,
											"end": 4208,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "130"
										},
										{
											"begin": 4199,
											"end": 4227,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1521,
											"end": 1644,
											"name": "tag",
											"source": 13,
											"value": "99"
										},
										{
											"begin": 1521,
											"end": 1644,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "PUSH",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 1488,
											"end": 1511,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "221"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "140"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "165"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "tag",
											"source": 0,
											"value": "221"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1591,
											"end": 1599,
											"name": "PUSH",
											"source": 13,
											"value": "CB"
										},
										{
											"begin": 1591,
											"end": 1638,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1591,
											"end": 1638,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1591,
											"end": 1638,
											"name": "AND",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1591,
											"end": 1638,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 1591,
											"end": 1638,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1591,
											"end": 1638,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 1591,
											"end": 1638,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 1591,
											"end": 1638,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 1591,
											"end": 1638,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1591,
											"end": 1638,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 1591,
											"end": 1638,
											"name": "OR",
											"source": 13
										},
										{
											"begin": 1591,
											"end": 1638,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1591,
											"end": 1638,
											"name": "SSTORE",
											"source": 13
										},
										{
											"begin": 1521,
											"end": 1644,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "tag",
											"source": 4,
											"value": "107"
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 4402,
											"end": 4409,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4439,
											"name": "PUSH",
											"source": 4,
											"value": "34"
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4446,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "SWAP5",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 4428,
											"end": 4455,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4313,
											"end": 4462,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "tag",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "PUSH",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1348,
											"end": 1354,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 1488,
											"end": 1511,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "229"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "140"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "165"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "tag",
											"source": 0,
											"value": "229"
										},
										{
											"begin": 1480,
											"end": 1548,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2246,
											"end": 2268,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2246,
											"end": 2268,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2238,
											"end": 2311,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "232"
										},
										{
											"begin": 2238,
											"end": 2311,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2238,
											"end": 2311,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2238,
											"end": 2311,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2238,
											"end": 2311,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2238,
											"end": 2311,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 5426,
											"end": 5428,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 2238,
											"end": 2311,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2238,
											"end": 2311,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2238,
											"end": 2311,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 5408,
											"end": 5429,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5465,
											"end": 5467,
											"name": "PUSH",
											"source": 14,
											"value": "26"
										},
										{
											"begin": 5445,
											"end": 5463,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 5445,
											"end": 5463,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5445,
											"end": 5463,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5438,
											"end": 5468,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5504,
											"end": 5538,
											"name": "PUSH",
											"source": 14,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 5484,
											"end": 5502,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 5484,
											"end": 5502,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5484,
											"end": 5502,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5477,
											"end": 5539,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "646472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5555,
											"end": 5573,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 5555,
											"end": 5573,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5555,
											"end": 5573,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5548,
											"end": 5584,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5601,
											"end": 5620,
											"name": "PUSH",
											"source": 14,
											"value": "84"
										},
										{
											"begin": 5601,
											"end": 5620,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2238,
											"end": 2311,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "140"
										},
										{
											"begin": 5398,
											"end": 5626,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 2238,
											"end": 2311,
											"name": "tag",
											"source": 0,
											"value": "232"
										},
										{
											"begin": 2238,
											"end": 2311,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2321,
											"end": 2349,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "235"
										},
										{
											"begin": 2340,
											"end": 2348,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2321,
											"end": 2339,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "194"
										},
										{
											"begin": 2321,
											"end": 2349,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2321,
											"end": 2349,
											"name": "tag",
											"source": 0,
											"value": "235"
										},
										{
											"begin": 2321,
											"end": 2349,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2158,
											"end": 2356,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 10456,
											"end": 10826,
											"name": "tag",
											"source": 4,
											"value": "123"
										},
										{
											"begin": 10456,
											"end": 10826,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10587,
											"end": 10606,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 10587,
											"end": 10606,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "238"
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8864,
											"end": 8866,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8846,
											"end": 8867,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8903,
											"end": 8905,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 8883,
											"end": 8901,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 8883,
											"end": 8901,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8883,
											"end": 8901,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8876,
											"end": 8906,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8942,
											"end": 8976,
											"name": "PUSH",
											"source": 14,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 8922,
											"end": 8940,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 8922,
											"end": 8940,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8922,
											"end": 8940,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8915,
											"end": 8977,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "72657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8993,
											"end": 9011,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 8993,
											"end": 9011,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8993,
											"end": 9011,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8986,
											"end": 9020,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9037,
											"end": 9056,
											"name": "PUSH",
											"source": 14,
											"value": "84"
										},
										{
											"begin": 9037,
											"end": 9056,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "140"
										},
										{
											"begin": 8836,
											"end": 9062,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "tag",
											"source": 4,
											"value": "238"
										},
										{
											"begin": 10579,
											"end": 10647,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10665,
											"end": 10686,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 10665,
											"end": 10686,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "241"
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5833,
											"end": 5835,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5815,
											"end": 5836,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5872,
											"end": 5874,
											"name": "PUSH",
											"source": 14,
											"value": "22"
										},
										{
											"begin": 5852,
											"end": 5870,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 5852,
											"end": 5870,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5852,
											"end": 5870,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5845,
											"end": 5875,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5911,
											"end": 5945,
											"name": "PUSH",
											"source": 14,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 5891,
											"end": 5909,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 5891,
											"end": 5909,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5891,
											"end": 5909,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5884,
											"end": 5946,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5962,
											"end": 5980,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 5962,
											"end": 5980,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5962,
											"end": 5980,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5955,
											"end": 5987,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6004,
											"end": 6023,
											"name": "PUSH",
											"source": 14,
											"value": "84"
										},
										{
											"begin": 6004,
											"end": 6023,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "140"
										},
										{
											"begin": 5805,
											"end": 6029,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "tag",
											"source": 4,
											"value": "241"
										},
										{
											"begin": 10657,
											"end": 10725,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10747,
											"name": "PUSH",
											"source": 4,
											"value": "34"
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10754,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10763,
											"name": "SWAP5",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10763,
											"name": "DUP8",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10763,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10763,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10763,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10763,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10763,
											"name": "SWAP5",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10763,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10763,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10763,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10763,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10763,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10763,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10772,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10772,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10736,
											"end": 10772,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 10734,
											"end": 10759,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 10734,
											"end": 10759,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 10734,
											"end": 10759,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "PUSH",
											"source": 4,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 10707,
											"end": 10725,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10787,
											"end": 10819,
											"name": "LOG3",
											"source": 4
										},
										{
											"begin": 10456,
											"end": 10826,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 10456,
											"end": 10826,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 10456,
											"end": 10826,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 10456,
											"end": 10826,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 11107,
											"end": 11548,
											"name": "tag",
											"source": 4,
											"value": "128"
										},
										{
											"begin": 11107,
											"end": 11548,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 11237,
											"end": 11261,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 11264,
											"end": 11289,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "246"
										},
										{
											"begin": 11274,
											"end": 11279,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 11281,
											"end": 11288,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 11264,
											"end": 11273,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "107"
										},
										{
											"begin": 11264,
											"end": 11289,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 11264,
											"end": 11289,
											"name": "tag",
											"source": 4,
											"value": "246"
										},
										{
											"begin": 11264,
											"end": 11289,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 11237,
											"end": 11289,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 11237,
											"end": 11289,
											"name": "POP",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 11303,
											"end": 11319,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 11303,
											"end": 11340,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 11299,
											"end": 11542,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "251"
										},
										{
											"begin": 11299,
											"end": 11542,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 11384,
											"end": 11390,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 11364,
											"end": 11380,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 11364,
											"end": 11390,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 11364,
											"end": 11390,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "248"
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 6917,
											"end": 6919,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6899,
											"end": 6920,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6956,
											"end": 6958,
											"name": "PUSH",
											"source": 14,
											"value": "1D"
										},
										{
											"begin": 6936,
											"end": 6954,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 6936,
											"end": 6954,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6936,
											"end": 6954,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6929,
											"end": 6959,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6995,
											"end": 7026,
											"name": "PUSH",
											"source": 14,
											"value": "45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000"
										},
										{
											"begin": 6975,
											"end": 6993,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 6975,
											"end": 6993,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6975,
											"end": 6993,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6968,
											"end": 7027,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7044,
											"end": 7062,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 7044,
											"end": 7062,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "140"
										},
										{
											"begin": 6889,
											"end": 7068,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "tag",
											"source": 4,
											"value": "248"
										},
										{
											"begin": 11356,
											"end": 11424,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 11466,
											"end": 11517,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "251"
										},
										{
											"begin": 11475,
											"end": 11480,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 11482,
											"end": 11489,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 11510,
											"end": 11516,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 11491,
											"end": 11507,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 11491,
											"end": 11516,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 11466,
											"end": 11474,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "123"
										},
										{
											"begin": 11466,
											"end": 11517,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 11466,
											"end": 11517,
											"name": "tag",
											"source": 4,
											"value": "251"
										},
										{
											"begin": 11466,
											"end": 11517,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 11107,
											"end": 11548,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 11107,
											"end": 11548,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 11107,
											"end": 11548,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 11107,
											"end": 11548,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 11107,
											"end": 11548,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 7821,
											"end": 8472,
											"name": "tag",
											"source": 4,
											"value": "130"
										},
										{
											"begin": 7821,
											"end": 8472,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7947,
											"end": 7965,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 7947,
											"end": 7965,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "253"
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8458,
											"end": 8460,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8440,
											"end": 8461,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8497,
											"end": 8499,
											"name": "PUSH",
											"source": 14,
											"value": "25"
										},
										{
											"begin": 8477,
											"end": 8495,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 8477,
											"end": 8495,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8477,
											"end": 8495,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8470,
											"end": 8500,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8536,
											"end": 8570,
											"name": "PUSH",
											"source": 14,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 8516,
											"end": 8534,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 8516,
											"end": 8534,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8516,
											"end": 8534,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8509,
											"end": 8571,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8587,
											"end": 8605,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 8587,
											"end": 8605,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8587,
											"end": 8605,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8580,
											"end": 8615,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8632,
											"end": 8651,
											"name": "PUSH",
											"source": 14,
											"value": "84"
										},
										{
											"begin": 8632,
											"end": 8651,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "140"
										},
										{
											"begin": 8430,
											"end": 8657,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "tag",
											"source": 4,
											"value": "253"
										},
										{
											"begin": 7939,
											"end": 8007,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8025,
											"end": 8041,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8025,
											"end": 8041,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "256"
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5022,
											"end": 5024,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5004,
											"end": 5025,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5061,
											"end": 5063,
											"name": "PUSH",
											"source": 14,
											"value": "23"
										},
										{
											"begin": 5041,
											"end": 5059,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 5041,
											"end": 5059,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5041,
											"end": 5059,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5034,
											"end": 5064,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5100,
											"end": 5134,
											"name": "PUSH",
											"source": 14,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 5080,
											"end": 5098,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 5080,
											"end": 5098,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5080,
											"end": 5098,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5073,
											"end": 5135,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5151,
											"end": 5169,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 5151,
											"end": 5169,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5151,
											"end": 5169,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5144,
											"end": 5177,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5194,
											"end": 5213,
											"name": "PUSH",
											"source": 14,
											"value": "84"
										},
										{
											"begin": 5194,
											"end": 5213,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "140"
										},
										{
											"begin": 4994,
											"end": 5219,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "tag",
											"source": 4,
											"value": "256"
										},
										{
											"begin": 8017,
											"end": 8081,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8163,
											"end": 8178,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 8163,
											"end": 8178,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 8141,
											"end": 8160,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 8163,
											"end": 8178,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8163,
											"end": 8178,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8163,
											"end": 8178,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8163,
											"end": 8172,
											"name": "PUSH",
											"source": 4,
											"value": "33"
										},
										{
											"begin": 8163,
											"end": 8178,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 8163,
											"end": 8178,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8163,
											"end": 8178,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8163,
											"end": 8178,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8163,
											"end": 8178,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 8163,
											"end": 8178,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 8196,
											"end": 8217,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8196,
											"end": 8217,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8196,
											"end": 8217,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 8196,
											"end": 8217,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "261"
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 7275,
											"end": 7277,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 7257,
											"end": 7278,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7314,
											"end": 7316,
											"name": "PUSH",
											"source": 14,
											"value": "26"
										},
										{
											"begin": 7294,
											"end": 7312,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 7294,
											"end": 7312,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7294,
											"end": 7312,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7287,
											"end": 7317,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7353,
											"end": 7387,
											"name": "PUSH",
											"source": 14,
											"value": "45524332303A207472616E7366657220616D6F756E7420657863656564732062"
										},
										{
											"begin": 7333,
											"end": 7351,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 7333,
											"end": 7351,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7333,
											"end": 7351,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7326,
											"end": 7388,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "616C616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7404,
											"end": 7422,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 7404,
											"end": 7422,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7404,
											"end": 7422,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7397,
											"end": 7433,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7450,
											"end": 7469,
											"name": "PUSH",
											"source": 14,
											"value": "84"
										},
										{
											"begin": 7450,
											"end": 7469,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "140"
										},
										{
											"begin": 7247,
											"end": 7475,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "tag",
											"source": 4,
											"value": "261"
										},
										{
											"begin": 8188,
											"end": 8260,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8294,
											"end": 8303,
											"name": "PUSH",
											"source": 4,
											"value": "33"
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 8312,
											"end": 8332,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 8312,
											"end": 8332,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 8312,
											"end": 8332,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 8294,
											"end": 8332,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8294,
											"end": 8332,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 8352,
											"end": 8365,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8352,
											"end": 8365,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 8352,
											"end": 8365,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 8352,
											"end": 8365,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8352,
											"end": 8365,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8352,
											"end": 8365,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8352,
											"end": 8365,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8352,
											"end": 8365,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 8326,
											"end": 8332,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 8326,
											"end": 8332,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 8294,
											"end": 8309,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "264"
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8326,
											"end": 8332,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 8326,
											"end": 8332,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "137"
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "tag",
											"source": 4,
											"value": "264"
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 8352,
											"end": 8375,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8406,
											"end": 8408,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 8400,
											"end": 8404,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "PUSH",
											"source": 4,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 8410,
											"end": 8416,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "265"
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 10734,
											"end": 10759,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 10734,
											"end": 10759,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10722,
											"end": 10724,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 10707,
											"end": 10725,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10707,
											"end": 10725,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 10689,
											"end": 10765,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "tag",
											"source": 4,
											"value": "265"
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8391,
											"end": 8417,
											"name": "LOG3",
											"source": 4
										},
										{
											"begin": 8428,
											"end": 8465,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "251"
										},
										{
											"begin": 1050,
											"end": 1309,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 8748,
											"end": 9137,
											"name": "tag",
											"source": 4,
											"value": "144"
										},
										{
											"begin": 8748,
											"end": 9137,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8831,
											"end": 8852,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8831,
											"end": 8852,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 8823,
											"end": 8888,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "269"
										},
										{
											"begin": 8823,
											"end": 8888,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 8823,
											"end": 8888,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8823,
											"end": 8888,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8823,
											"end": 8888,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8823,
											"end": 8888,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 10430,
											"end": 10432,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 8823,
											"end": 8888,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 8823,
											"end": 8888,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8823,
											"end": 8888,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 10412,
											"end": 10433,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10469,
											"end": 10471,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 10449,
											"end": 10467,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 10449,
											"end": 10467,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10449,
											"end": 10467,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10442,
											"end": 10472,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10508,
											"end": 10541,
											"name": "PUSH",
											"source": 14,
											"value": "45524332303A206D696E7420746F20746865207A65726F206164647265737300"
										},
										{
											"begin": 10488,
											"end": 10506,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 10488,
											"end": 10506,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10488,
											"end": 10506,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10481,
											"end": 10542,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10559,
											"end": 10577,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 10559,
											"end": 10577,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8823,
											"end": 8888,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "140"
										},
										{
											"begin": 10402,
											"end": 10583,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 8823,
											"end": 8888,
											"name": "tag",
											"source": 4,
											"value": "269"
										},
										{
											"begin": 8823,
											"end": 8888,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8975,
											"end": 8981,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 8959,
											"end": 8971,
											"name": "PUSH",
											"source": 4,
											"value": "35"
										},
										{
											"begin": 8959,
											"end": 8971,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 8959,
											"end": 8981,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8959,
											"end": 8981,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8959,
											"end": 8981,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 8959,
											"end": 8981,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "273"
										},
										{
											"begin": 8959,
											"end": 8981,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8959,
											"end": 8981,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8959,
											"end": 8981,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "137"
										},
										{
											"begin": 8959,
											"end": 8981,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 8959,
											"end": 8981,
											"name": "tag",
											"source": 4,
											"value": "273"
										},
										{
											"begin": 8959,
											"end": 8981,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8959,
											"end": 8981,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8959,
											"end": 8981,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8959,
											"end": 8981,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8991,
											"end": 9009,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8991,
											"end": 9009,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 8991,
											"end": 9009,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 8991,
											"end": 9009,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8991,
											"end": 9009,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8991,
											"end": 9009,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8991,
											"end": 9000,
											"name": "PUSH",
											"source": 4,
											"value": "33"
										},
										{
											"begin": 8991,
											"end": 9009,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 8991,
											"end": 9009,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8991,
											"end": 9009,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 8991,
											"end": 9009,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 8991,
											"end": 9009,
											"name": "KECCAK256",
											"source": 4
										},
										{
											"begin": 8991,
											"end": 9019,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 8991,
											"end": 9019,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": 9013,
											"end": 9019,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 9013,
											"end": 9019,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 8991,
											"end": 9009,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8991,
											"end": 9019,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "274"
										},
										{
											"begin": 8991,
											"end": 9019,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 9013,
											"end": 9019,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 9013,
											"end": 9019,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8991,
											"end": 9019,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "137"
										},
										{
											"begin": 8991,
											"end": 9019,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 8991,
											"end": 9019,
											"name": "tag",
											"source": 4,
											"value": "274"
										},
										{
											"begin": 8991,
											"end": 9019,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8991,
											"end": 9019,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8991,
											"end": 9019,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 8991,
											"end": 9019,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9034,
											"end": 9071,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 9034,
											"end": 9071,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 10734,
											"end": 10759,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 10734,
											"end": 10759,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 10734,
											"end": 10759,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9034,
											"end": 9071,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 9034,
											"end": 9071,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 9034,
											"end": 9071,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 9051,
											"end": 9052,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 9051,
											"end": 9052,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 9034,
											"end": 9071,
											"name": "PUSH",
											"source": 4,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 9034,
											"end": 9071,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10722,
											"end": 10724,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 10707,
											"end": 10725,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9034,
											"end": 9071,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 9034,
											"end": 9071,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 9034,
											"end": 9071,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 9034,
											"end": 9071,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 9034,
											"end": 9071,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 9034,
											"end": 9071,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 9034,
											"end": 9071,
											"name": "LOG3",
											"source": 4
										},
										{
											"begin": 1926,
											"end": 2021,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1926,
											"end": 2021,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1926,
											"end": 2021,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 5287,
											"end": 6095,
											"name": "tag",
											"source": 1,
											"value": "147"
										},
										{
											"begin": 5287,
											"end": 6095,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5351,
											"end": 5355,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5684,
											"end": 5697,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5684,
											"end": 5697,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 5684,
											"end": 5697,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 5684,
											"end": 5697,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5684,
											"end": 5697,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 5684,
											"end": 5697,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 5684,
											"end": 5697,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5680,
											"end": 6089,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5680,
											"end": 6089,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "278"
										},
										{
											"begin": 5680,
											"end": 6089,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5738,
											"end": 5745,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5738,
											"end": 5750,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 5738,
											"end": 5750,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5749,
											"end": 5750,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 5738,
											"end": 5750,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 5738,
											"end": 5799,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5738,
											"end": 5799,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5738,
											"end": 5799,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "279"
										},
										{
											"begin": 5738,
											"end": 5799,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5793,
											"end": 5797,
											"name": "ADDRESS",
											"source": 1
										},
										{
											"begin": 1476,
											"end": 1495,
											"name": "EXTCODESIZE",
											"source": 9
										},
										{
											"begin": 1476,
											"end": 1499,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 5738,
											"end": 5799,
											"name": "tag",
											"source": 1,
											"value": "279"
										},
										{
											"begin": 5738,
											"end": 5799,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5713,
											"end": 5879,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "282"
										},
										{
											"begin": 5713,
											"end": 5879,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5713,
											"end": 5879,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5713,
											"end": 5879,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5713,
											"end": 5879,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5713,
											"end": 5879,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5713,
											"end": 5879,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5713,
											"end": 5879,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5713,
											"end": 5879,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "140"
										},
										{
											"begin": 5713,
											"end": 5879,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5713,
											"end": 5879,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "284"
										},
										{
											"begin": 5713,
											"end": 5879,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5713,
											"end": 5879,
											"name": "tag",
											"source": 1,
											"value": "282"
										},
										{
											"begin": 5713,
											"end": 5879,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5900,
											"end": 5905,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5900,
											"end": 5905,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5287,
											"end": 6095,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5287,
											"end": 6095,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 5680,
											"end": 6089,
											"name": "tag",
											"source": 1,
											"value": "278"
										},
										{
											"begin": 5680,
											"end": 6089,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5944,
											"end": 5956,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5944,
											"end": 5956,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 5944,
											"end": 5966,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 5944,
											"end": 5966,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5944,
											"end": 5966,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 5944,
											"end": 5966,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5944,
											"end": 5956,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5944,
											"end": 5956,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5944,
											"end": 5966,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 5936,
											"end": 6017,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "286"
										},
										{
											"begin": 5936,
											"end": 6017,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5936,
											"end": 6017,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5936,
											"end": 6017,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5936,
											"end": 6017,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5936,
											"end": 6017,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5936,
											"end": 6017,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5936,
											"end": 6017,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5936,
											"end": 6017,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "140"
										},
										{
											"begin": 5936,
											"end": 6017,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5936,
											"end": 6017,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "284"
										},
										{
											"begin": 5936,
											"end": 6017,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 5936,
											"end": 6017,
											"name": "tag",
											"source": 1,
											"value": "286"
										},
										{
											"begin": 5936,
											"end": 6017,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6031,
											"end": 6043,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6031,
											"end": 6053,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 6031,
											"end": 6053,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 6031,
											"end": 6053,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6031,
											"end": 6053,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 6031,
											"end": 6053,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 6031,
											"end": 6053,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6031,
											"end": 6053,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 6031,
											"end": 6053,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6031,
											"end": 6053,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6031,
											"end": 6053,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6031,
											"end": 6053,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6031,
											"end": 6053,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 6031,
											"end": 6053,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6031,
											"end": 6053,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": 5287,
											"end": 6095,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 2116,
											"end": 2263,
											"name": "tag",
											"source": 4,
											"value": "151"
										},
										{
											"begin": 2116,
											"end": 2263,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "289"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "140"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "291"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "tag",
											"source": 1,
											"value": "289"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2218,
											"end": 2256,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "143"
										},
										{
											"begin": 2241,
											"end": 2246,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2248,
											"end": 2255,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2218,
											"end": 2240,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "294"
										},
										{
											"begin": 2218,
											"end": 2256,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 988,
											"end": 1083,
											"name": "tag",
											"source": 0,
											"value": "153"
										},
										{
											"begin": 988,
											"end": 1083,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "296"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "140"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "291"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "tag",
											"source": 1,
											"value": "296"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1050,
											"end": 1076,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "193"
										},
										{
											"begin": 1050,
											"end": 1074,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "300"
										},
										{
											"begin": 1050,
											"end": 1076,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1048,
											"end": 1145,
											"name": "tag",
											"source": 2,
											"value": "155"
										},
										{
											"begin": 1048,
											"end": 1145,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "302"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "140"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "291"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "tag",
											"source": 1,
											"value": "302"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1111,
											"end": 1138,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "193"
										},
										{
											"begin": 1111,
											"end": 1136,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "306"
										},
										{
											"begin": 1111,
											"end": 1138,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2510,
											"end": 2697,
											"name": "tag",
											"source": 0,
											"value": "194"
										},
										{
											"begin": 2510,
											"end": 2697,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2602,
											"end": 2608,
											"name": "PUSH",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 2602,
											"end": 2608,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2602,
											"end": 2608,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2618,
											"end": 2635,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2618,
											"end": 2635,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2618,
											"end": 2635,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2618,
											"end": 2635,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2618,
											"end": 2635,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2618,
											"end": 2635,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2618,
											"end": 2635,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2618,
											"end": 2635,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2618,
											"end": 2635,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 2618,
											"end": 2635,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2650,
											"end": 2690,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2650,
											"end": 2690,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2602,
											"end": 2608,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2602,
											"end": 2608,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2602,
											"end": 2608,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2618,
											"end": 2635,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2602,
											"end": 2608,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2602,
											"end": 2608,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2650,
											"end": 2690,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2650,
											"end": 2690,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2583,
											"end": 2599,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2583,
											"end": 2599,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2650,
											"end": 2690,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2510,
											"end": 2697,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2510,
											"end": 2697,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2510,
											"end": 2697,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2269,
											"end": 2428,
											"name": "tag",
											"source": 4,
											"value": "294"
										},
										{
											"begin": 2269,
											"end": 2428,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "312"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "140"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "291"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "tag",
											"source": 1,
											"value": "312"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2381,
											"end": 2394,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2381,
											"end": 2394,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2381,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "315"
										},
										{
											"begin": 2381,
											"end": 2394,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2381,
											"end": 2386,
											"name": "PUSH",
											"source": 4,
											"value": "36"
										},
										{
											"begin": 2381,
											"end": 2386,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2381,
											"end": 2394,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2381,
											"end": 2394,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 2381,
											"end": 2394,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2381,
											"end": 2394,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2381,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "316"
										},
										{
											"begin": 2381,
											"end": 2394,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 2381,
											"end": 2394,
											"name": "tag",
											"source": 4,
											"value": "315"
										},
										{
											"begin": 2381,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2404,
											"end": 2421,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2404,
											"end": 2421,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2404,
											"end": 2421,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "157"
										},
										{
											"begin": 2404,
											"end": 2421,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2404,
											"end": 2411,
											"name": "PUSH",
											"source": 4,
											"value": "37"
										},
										{
											"begin": 2404,
											"end": 2411,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2404,
											"end": 2421,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2404,
											"end": 2421,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 2404,
											"end": 2421,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2404,
											"end": 2421,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2404,
											"end": 2421,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "316"
										},
										{
											"begin": 2404,
											"end": 2421,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 1089,
											"end": 1200,
											"name": "tag",
											"source": 0,
											"value": "300"
										},
										{
											"begin": 1089,
											"end": 1200,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "319"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "140"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "291"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "tag",
											"source": 1,
											"value": "319"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1161,
											"end": 1193,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "193"
										},
										{
											"begin": 929,
											"end": 939,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 1161,
											"end": 1179,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "194"
										},
										{
											"begin": 1161,
											"end": 1193,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1151,
											"end": 1246,
											"name": "tag",
											"source": 2,
											"value": "306"
										},
										{
											"begin": 1151,
											"end": 1246,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 4698,
											"end": 4711,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "325"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "140"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "291"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "tag",
											"source": 1,
											"value": "325"
										},
										{
											"begin": 4690,
											"end": 4759,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1224,
											"end": 1231,
											"name": "PUSH",
											"source": 2,
											"value": "97"
										},
										{
											"begin": 1224,
											"end": 1239,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1224,
											"end": 1239,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1224,
											"end": 1239,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1224,
											"end": 1239,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1224,
											"end": 1239,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 1151,
											"end": 1246,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "316"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "328"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "114"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[in]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "328"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "KECCAK256",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DIV",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "330"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP6",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "333"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "330"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "LT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "331"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "AND",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "OR",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP6",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "333"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "331"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP6",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "333"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "332"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "333"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "332"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "333"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "334"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "335"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[in]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "334"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1,
											"value": "[out]"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "335"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "336"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "334"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "336"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": 14,
											"end": 753,
											"name": "tag",
											"source": 14,
											"value": "339"
										},
										{
											"begin": 14,
											"end": 753,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 57,
											"end": 62,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 110,
											"end": 113,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 103,
											"end": 107,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 95,
											"end": 101,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 91,
											"end": 108,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 87,
											"end": 114,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 77,
											"end": 79,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "341"
										},
										{
											"begin": 77,
											"end": 79,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 132,
											"end": 137,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 125,
											"end": 130,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 118,
											"end": 138,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 77,
											"end": 79,
											"name": "tag",
											"source": 14,
											"value": "341"
										},
										{
											"begin": 77,
											"end": 79,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 172,
											"end": 178,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 159,
											"end": 179,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 198,
											"end": 216,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 235,
											"end": 237,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 231,
											"end": 233,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 228,
											"end": 238,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 225,
											"end": 227,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 225,
											"end": 227,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "343"
										},
										{
											"begin": 225,
											"end": 227,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 241,
											"end": 259,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "343"
										},
										{
											"begin": 241,
											"end": 259,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "344"
										},
										{
											"begin": 241,
											"end": 259,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 241,
											"end": 259,
											"name": "tag",
											"source": 14,
											"value": "343"
										},
										{
											"begin": 241,
											"end": 259,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 316,
											"end": 318,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 310,
											"end": 319,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 284,
											"end": 286,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 370,
											"end": 383,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 370,
											"end": 383,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 366,
											"end": 388,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 366,
											"end": 388,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 366,
											"end": 388,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 390,
											"end": 392,
											"name": "PUSH",
											"source": 14,
											"value": "3F"
										},
										{
											"begin": 362,
											"end": 393,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 358,
											"end": 398,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 346,
											"end": 399,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 346,
											"end": 399,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 346,
											"end": 399,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 414,
											"end": 432,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 414,
											"end": 432,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 414,
											"end": 432,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 434,
											"end": 456,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 434,
											"end": 456,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 434,
											"end": 456,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 411,
											"end": 457,
											"name": "OR",
											"source": 14
										},
										{
											"begin": 408,
											"end": 410,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 408,
											"end": 410,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "346"
										},
										{
											"begin": 408,
											"end": 410,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 460,
											"end": 478,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "346"
										},
										{
											"begin": 460,
											"end": 478,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "344"
										},
										{
											"begin": 460,
											"end": 478,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 460,
											"end": 478,
											"name": "tag",
											"source": 14,
											"value": "346"
										},
										{
											"begin": 460,
											"end": 478,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 500,
											"end": 510,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 496,
											"end": 498,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 489,
											"end": 511,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 535,
											"end": 537,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 527,
											"end": 533,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 520,
											"end": 538,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 581,
											"end": 584,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 574,
											"end": 578,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 569,
											"end": 571,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 561,
											"end": 567,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 557,
											"end": 572,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 553,
											"end": 579,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 550,
											"end": 585,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 547,
											"end": 549,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 547,
											"end": 549,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "347"
										},
										{
											"begin": 547,
											"end": 549,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 602,
											"end": 607,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 595,
											"end": 600,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 588,
											"end": 608,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 547,
											"end": 549,
											"name": "tag",
											"source": 14,
											"value": "347"
										},
										{
											"begin": 547,
											"end": 549,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 670,
											"end": 672,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 663,
											"end": 667,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 655,
											"end": 661,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 651,
											"end": 668,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 644,
											"end": 648,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 636,
											"end": 642,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 632,
											"end": 649,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 619,
											"end": 673,
											"name": "CALLDATACOPY",
											"source": 14
										},
										{
											"begin": 693,
											"end": 708,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 693,
											"end": 708,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 693,
											"end": 708,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 710,
											"end": 714,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 689,
											"end": 715,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 682,
											"end": 723,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 682,
											"end": 723,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 682,
											"end": 723,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 682,
											"end": 723,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 697,
											"end": 703,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 67,
											"end": 753,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 67,
											"end": 753,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 758,
											"end": 1015,
											"name": "tag",
											"source": 14,
											"value": "74"
										},
										{
											"begin": 758,
											"end": 1015,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 817,
											"end": 823,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 870,
											"end": 872,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 858,
											"end": 867,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 849,
											"end": 856,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 845,
											"end": 868,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 841,
											"end": 873,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 838,
											"end": 840,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 838,
											"end": 840,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "349"
										},
										{
											"begin": 838,
											"end": 840,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 891,
											"end": 897,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 883,
											"end": 889,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 876,
											"end": 898,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 838,
											"end": 840,
											"name": "tag",
											"source": 14,
											"value": "349"
										},
										{
											"begin": 838,
											"end": 840,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 935,
											"end": 944,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 922,
											"end": 945,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 954,
											"end": 985,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "350"
										},
										{
											"begin": 979,
											"end": 984,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 954,
											"end": 985,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "351"
										},
										{
											"begin": 954,
											"end": 985,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 954,
											"end": 985,
											"name": "tag",
											"source": 14,
											"value": "350"
										},
										{
											"begin": 954,
											"end": 985,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1004,
											"end": 1009,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 828,
											"end": 1015,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 828,
											"end": 1015,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 1020,
											"end": 1281,
											"name": "tag",
											"source": 14,
											"value": "173"
										},
										{
											"begin": 1020,
											"end": 1281,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1090,
											"end": 1096,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1143,
											"end": 1145,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1131,
											"end": 1140,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 1122,
											"end": 1129,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 1118,
											"end": 1141,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 1114,
											"end": 1146,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 1111,
											"end": 1113,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1111,
											"end": 1113,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "353"
										},
										{
											"begin": 1111,
											"end": 1113,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1164,
											"end": 1170,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1156,
											"end": 1162,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1149,
											"end": 1171,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 1111,
											"end": 1113,
											"name": "tag",
											"source": 14,
											"value": "353"
										},
										{
											"begin": 1111,
											"end": 1113,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1201,
											"end": 1210,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1195,
											"end": 1211,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 1220,
											"end": 1251,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "350"
										},
										{
											"begin": 1245,
											"end": 1250,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1220,
											"end": 1251,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "351"
										},
										{
											"begin": 1220,
											"end": 1251,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 1286,
											"end": 1684,
											"name": "tag",
											"source": 14,
											"value": "106"
										},
										{
											"begin": 1286,
											"end": 1684,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1354,
											"end": 1360,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1362,
											"end": 1368,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1415,
											"end": 1417,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 1403,
											"end": 1412,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 1394,
											"end": 1401,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 1390,
											"end": 1413,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 1386,
											"end": 1418,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 1383,
											"end": 1385,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1383,
											"end": 1385,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "356"
										},
										{
											"begin": 1383,
											"end": 1385,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1436,
											"end": 1442,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1428,
											"end": 1434,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1421,
											"end": 1443,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 1383,
											"end": 1385,
											"name": "tag",
											"source": 14,
											"value": "356"
										},
										{
											"begin": 1383,
											"end": 1385,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1480,
											"end": 1489,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 1467,
											"end": 1490,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 1499,
											"end": 1530,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "357"
										},
										{
											"begin": 1524,
											"end": 1529,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1499,
											"end": 1530,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "351"
										},
										{
											"begin": 1499,
											"end": 1530,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 1499,
											"end": 1530,
											"name": "tag",
											"source": 14,
											"value": "357"
										},
										{
											"begin": 1499,
											"end": 1530,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1549,
											"end": 1554,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1606,
											"end": 1608,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1591,
											"end": 1609,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 1591,
											"end": 1609,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1578,
											"end": 1610,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 1619,
											"end": 1652,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "358"
										},
										{
											"begin": 1578,
											"end": 1610,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1619,
											"end": 1652,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "351"
										},
										{
											"begin": 1619,
											"end": 1652,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 1619,
											"end": 1652,
											"name": "tag",
											"source": 14,
											"value": "358"
										},
										{
											"begin": 1619,
											"end": 1652,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1671,
											"end": 1678,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1661,
											"end": 1678,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 1661,
											"end": 1678,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1661,
											"end": 1678,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1373,
											"end": 1684,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 1373,
											"end": 1684,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1373,
											"end": 1684,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 1373,
											"end": 1684,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1373,
											"end": 1684,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1373,
											"end": 1684,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 1689,
											"end": 2155,
											"name": "tag",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 1689,
											"end": 2155,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1766,
											"end": 1772,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1774,
											"end": 1780,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1782,
											"end": 1788,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1835,
											"end": 1837,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 1823,
											"end": 1832,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 1814,
											"end": 1821,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 1810,
											"end": 1833,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 1806,
											"end": 1838,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 1803,
											"end": 1805,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1803,
											"end": 1805,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "360"
										},
										{
											"begin": 1803,
											"end": 1805,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1856,
											"end": 1862,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1848,
											"end": 1854,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1841,
											"end": 1863,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 1803,
											"end": 1805,
											"name": "tag",
											"source": 14,
											"value": "360"
										},
										{
											"begin": 1803,
											"end": 1805,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1900,
											"end": 1909,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 1887,
											"end": 1910,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 1919,
											"end": 1950,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "361"
										},
										{
											"begin": 1944,
											"end": 1949,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1919,
											"end": 1950,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "351"
										},
										{
											"begin": 1919,
											"end": 1950,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 1919,
											"end": 1950,
											"name": "tag",
											"source": 14,
											"value": "361"
										},
										{
											"begin": 1919,
											"end": 1950,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1969,
											"end": 1974,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2026,
											"end": 2028,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 2011,
											"end": 2029,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 2011,
											"end": 2029,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1998,
											"end": 2030,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 2039,
											"end": 2072,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "362"
										},
										{
											"begin": 1998,
											"end": 2030,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 2039,
											"end": 2072,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "351"
										},
										{
											"begin": 2039,
											"end": 2072,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 2039,
											"end": 2072,
											"name": "tag",
											"source": 14,
											"value": "362"
										},
										{
											"begin": 2039,
											"end": 2072,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1793,
											"end": 2155,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 1793,
											"end": 2155,
											"name": "SWAP6",
											"source": 14
										},
										{
											"begin": 2091,
											"end": 2098,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 2091,
											"end": 2098,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2145,
											"end": 2147,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 2130,
											"end": 2148,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 2130,
											"end": 2148,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 2130,
											"end": 2148,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 2130,
											"end": 2148,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2117,
											"end": 2149,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 2117,
											"end": 2149,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1793,
											"end": 2155,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 2160,
											"end": 2485,
											"name": "tag",
											"source": 14,
											"value": "34"
										},
										{
											"begin": 2160,
											"end": 2485,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2228,
											"end": 2234,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2236,
											"end": 2242,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 2289,
											"end": 2291,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 2277,
											"end": 2286,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 2268,
											"end": 2275,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 2264,
											"end": 2287,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 2260,
											"end": 2292,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 2257,
											"end": 2259,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 2257,
											"end": 2259,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "364"
										},
										{
											"begin": 2257,
											"end": 2259,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 2310,
											"end": 2316,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 2302,
											"end": 2308,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2295,
											"end": 2317,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 2257,
											"end": 2259,
											"name": "tag",
											"source": 14,
											"value": "364"
										},
										{
											"begin": 2257,
											"end": 2259,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2354,
											"end": 2363,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2341,
											"end": 2364,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 2373,
											"end": 2404,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "365"
										},
										{
											"begin": 2398,
											"end": 2403,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 2373,
											"end": 2404,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "351"
										},
										{
											"begin": 2373,
											"end": 2404,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 2373,
											"end": 2404,
											"name": "tag",
											"source": 14,
											"value": "365"
										},
										{
											"begin": 2373,
											"end": 2404,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2423,
											"end": 2428,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 2475,
											"end": 2477,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 2460,
											"end": 2478,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 2460,
											"end": 2478,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 2460,
											"end": 2478,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 2460,
											"end": 2478,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2447,
											"end": 2479,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 2447,
											"end": 2479,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2247,
											"end": 2485,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 2490,
											"end": 3063,
											"name": "tag",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 2490,
											"end": 3063,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2578,
											"end": 2584,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2586,
											"end": 2592,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 2639,
											"end": 2641,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 2627,
											"end": 2636,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 2618,
											"end": 2625,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 2614,
											"end": 2637,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 2610,
											"end": 2642,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 2607,
											"end": 2609,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 2607,
											"end": 2609,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "367"
										},
										{
											"begin": 2607,
											"end": 2609,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 2660,
											"end": 2666,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 2652,
											"end": 2658,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2645,
											"end": 2667,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 2607,
											"end": 2609,
											"name": "tag",
											"source": 14,
											"value": "367"
										},
										{
											"begin": 2607,
											"end": 2609,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2705,
											"end": 2714,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2692,
											"end": 2715,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 2734,
											"end": 2752,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2775,
											"end": 2777,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 2767,
											"end": 2773,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2764,
											"end": 2778,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 2761,
											"end": 2763,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 2761,
											"end": 2763,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "368"
										},
										{
											"begin": 2761,
											"end": 2763,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 2796,
											"end": 2802,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 2788,
											"end": 2794,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 2781,
											"end": 2803,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 2761,
											"end": 2763,
											"name": "tag",
											"source": 14,
											"value": "368"
										},
										{
											"begin": 2761,
											"end": 2763,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2824,
											"end": 2874,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "369"
										},
										{
											"begin": 2866,
											"end": 2873,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 2857,
											"end": 2863,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 2846,
											"end": 2855,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 2842,
											"end": 2864,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2824,
											"end": 2874,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "339"
										},
										{
											"begin": 2824,
											"end": 2874,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 2824,
											"end": 2874,
											"name": "tag",
											"source": 14,
											"value": "369"
										},
										{
											"begin": 2824,
											"end": 2874,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2814,
											"end": 2874,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 2814,
											"end": 2874,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2927,
											"end": 2929,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 2916,
											"end": 2925,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 2912,
											"end": 2930,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2899,
											"end": 2931,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 2883,
											"end": 2931,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 2883,
											"end": 2931,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2956,
											"end": 2958,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 2946,
											"end": 2954,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2943,
											"end": 2959,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 2940,
											"end": 2942,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 2940,
											"end": 2942,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "370"
										},
										{
											"begin": 2940,
											"end": 2942,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 2977,
											"end": 2983,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2969,
											"end": 2975,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 2962,
											"end": 2984,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 2940,
											"end": 2942,
											"name": "tag",
											"source": 14,
											"value": "370"
										},
										{
											"begin": 2940,
											"end": 2942,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2940,
											"end": 2942,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3005,
											"end": 3057,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "371"
										},
										{
											"begin": 3049,
											"end": 3056,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 3038,
											"end": 3046,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3027,
											"end": 3036,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 3023,
											"end": 3047,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3005,
											"end": 3057,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "339"
										},
										{
											"begin": 3005,
											"end": 3057,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 3005,
											"end": 3057,
											"name": "tag",
											"source": 14,
											"value": "371"
										},
										{
											"begin": 3005,
											"end": 3057,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2995,
											"end": 3057,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 2995,
											"end": 3057,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2995,
											"end": 3057,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2597,
											"end": 3063,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 2597,
											"end": 3063,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2597,
											"end": 3063,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 2597,
											"end": 3063,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 2597,
											"end": 3063,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2597,
											"end": 3063,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 3068,
											"end": 3258,
											"name": "tag",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 3068,
											"end": 3258,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3127,
											"end": 3133,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3180,
											"end": 3182,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 3168,
											"end": 3177,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3159,
											"end": 3166,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 3155,
											"end": 3178,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 3151,
											"end": 3183,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 3148,
											"end": 3150,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 3148,
											"end": 3150,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "373"
										},
										{
											"begin": 3148,
											"end": 3150,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 3201,
											"end": 3207,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3193,
											"end": 3199,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3186,
											"end": 3208,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 3148,
											"end": 3150,
											"name": "tag",
											"source": 14,
											"value": "373"
										},
										{
											"begin": 3148,
											"end": 3150,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3229,
											"end": 3252,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 3229,
											"end": 3252,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 3138,
											"end": 3258,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3138,
											"end": 3258,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 4212,
											"end": 4815,
											"name": "tag",
											"source": 14,
											"value": "31"
										},
										{
											"begin": 4212,
											"end": 4815,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4324,
											"end": 4328,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 4353,
											"end": 4355,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4382,
											"end": 4384,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 4371,
											"end": 4380,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 4364,
											"end": 4385,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4414,
											"end": 4420,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 4408,
											"end": 4421,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 4457,
											"end": 4463,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 4452,
											"end": 4454,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4441,
											"end": 4450,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 4437,
											"end": 4455,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4430,
											"end": 4464,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4482,
											"end": 4486,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4495,
											"end": 4635,
											"name": "tag",
											"source": 14,
											"value": "379"
										},
										{
											"begin": 4495,
											"end": 4635,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4509,
											"end": 4515,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4506,
											"end": 4507,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4503,
											"end": 4516,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 4495,
											"end": 4635,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 4495,
											"end": 4635,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "381"
										},
										{
											"begin": 4495,
											"end": 4635,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 4604,
											"end": 4618,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 4604,
											"end": 4618,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4604,
											"end": 4618,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4600,
											"end": 4623,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 4600,
											"end": 4623,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4594,
											"end": 4624,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 4570,
											"end": 4587,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 4570,
											"end": 4587,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4570,
											"end": 4587,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4589,
											"end": 4591,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 4566,
											"end": 4592,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4559,
											"end": 4625,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4524,
											"end": 4534,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4524,
											"end": 4534,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4495,
											"end": 4635,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "379"
										},
										{
											"begin": 4495,
											"end": 4635,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 4495,
											"end": 4635,
											"name": "tag",
											"source": 14,
											"value": "381"
										},
										{
											"begin": 4495,
											"end": 4635,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4653,
											"end": 4659,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4650,
											"end": 4651,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4647,
											"end": 4660,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 4644,
											"end": 4646,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 4644,
											"end": 4646,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "382"
										},
										{
											"begin": 4644,
											"end": 4646,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 4723,
											"end": 4727,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 4718,
											"end": 4720,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 4709,
											"end": 4715,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 4698,
											"end": 4707,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 4694,
											"end": 4716,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4690,
											"end": 4721,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4683,
											"end": 4728,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4644,
											"end": 4646,
											"name": "tag",
											"source": 14,
											"value": "382"
										},
										{
											"begin": 4644,
											"end": 4646,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4799,
											"end": 4801,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 4778,
											"end": 4793,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4774,
											"end": 4803,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 4759,
											"end": 4804,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 4759,
											"end": 4804,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4759,
											"end": 4804,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 4759,
											"end": 4804,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4806,
											"end": 4808,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 4755,
											"end": 4809,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4755,
											"end": 4809,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 4333,
											"end": 4815,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4333,
											"end": 4815,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 7480,
											"end": 7890,
											"name": "tag",
											"source": 14,
											"value": "284"
										},
										{
											"begin": 7480,
											"end": 7890,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7682,
											"end": 7684,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 7664,
											"end": 7685,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 7664,
											"end": 7685,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7664,
											"end": 7685,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7721,
											"end": 7723,
											"name": "PUSH",
											"source": 14,
											"value": "2E"
										},
										{
											"begin": 7701,
											"end": 7719,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 7701,
											"end": 7719,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7701,
											"end": 7719,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7694,
											"end": 7724,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7760,
											"end": 7794,
											"name": "PUSH",
											"source": 14,
											"value": "496E697469616C697A61626C653A20636F6E747261637420697320616C726561"
										},
										{
											"begin": 7755,
											"end": 7757,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 7740,
											"end": 7758,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7740,
											"end": 7758,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7733,
											"end": 7795,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "191E481A5B9A5D1A585B1A5E9959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "92"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7826,
											"end": 7828,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 7811,
											"end": 7829,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7811,
											"end": 7829,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7804,
											"end": 7848,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7880,
											"end": 7883,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 7865,
											"end": 7884,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7865,
											"end": 7884,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 7654,
											"end": 7890,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 7895,
											"end": 8251,
											"name": "tag",
											"source": 14,
											"value": "165"
										},
										{
											"begin": 7895,
											"end": 8251,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 8097,
											"end": 8099,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 8079,
											"end": 8100,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 8079,
											"end": 8100,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8079,
											"end": 8100,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8116,
											"end": 8134,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 8116,
											"end": 8134,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 8116,
											"end": 8134,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8109,
											"end": 8139,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8175,
											"end": 8209,
											"name": "PUSH",
											"source": 14,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 8170,
											"end": 8172,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 8155,
											"end": 8173,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8155,
											"end": 8173,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8148,
											"end": 8210,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8242,
											"end": 8244,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 8227,
											"end": 8245,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8227,
											"end": 8245,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 8069,
											"end": 8251,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 9067,
											"end": 9474,
											"name": "tag",
											"source": 14,
											"value": "291"
										},
										{
											"begin": 9067,
											"end": 9474,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 9269,
											"end": 9271,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 9251,
											"end": 9272,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 9251,
											"end": 9272,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 9251,
											"end": 9272,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9308,
											"end": 9310,
											"name": "PUSH",
											"source": 14,
											"value": "2B"
										},
										{
											"begin": 9288,
											"end": 9306,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 9288,
											"end": 9306,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 9288,
											"end": 9306,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9281,
											"end": 9311,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9347,
											"end": 9381,
											"name": "PUSH",
											"source": 14,
											"value": "496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069"
										},
										{
											"begin": 9342,
											"end": 9344,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 9327,
											"end": 9345,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 9327,
											"end": 9345,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9320,
											"end": 9382,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6E697469616C697A696E67"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9413,
											"end": 9415,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 9398,
											"end": 9416,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 9398,
											"end": 9416,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9391,
											"end": 9432,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9464,
											"end": 9467,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 9449,
											"end": 9468,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9449,
											"end": 9468,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 9241,
											"end": 9474,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 10959,
											"end": 11087,
											"name": "tag",
											"source": 14,
											"value": "137"
										},
										{
											"begin": 10959,
											"end": 11087,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 10999,
											"end": 11002,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 11030,
											"end": 11031,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 11026,
											"end": 11032,
											"name": "NOT",
											"source": 14
										},
										{
											"begin": 11023,
											"end": 11024,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 11020,
											"end": 11033,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 11017,
											"end": 11019,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 11017,
											"end": 11019,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "402"
										},
										{
											"begin": 11017,
											"end": 11019,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 11036,
											"end": 11054,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "402"
										},
										{
											"begin": 11036,
											"end": 11054,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "403"
										},
										{
											"begin": 11036,
											"end": 11054,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 11036,
											"end": 11054,
											"name": "tag",
											"source": 14,
											"value": "402"
										},
										{
											"begin": 11036,
											"end": 11054,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11072,
											"end": 11081,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 11072,
											"end": 11081,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11007,
											"end": 11087,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 11092,
											"end": 11217,
											"name": "tag",
											"source": 14,
											"value": "178"
										},
										{
											"begin": 11092,
											"end": 11217,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11132,
											"end": 11136,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 11160,
											"end": 11161,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 11157,
											"end": 11158,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 11154,
											"end": 11162,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 11151,
											"end": 11153,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 11151,
											"end": 11153,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "406"
										},
										{
											"begin": 11151,
											"end": 11153,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 11165,
											"end": 11183,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "406"
										},
										{
											"begin": 11165,
											"end": 11183,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "403"
										},
										{
											"begin": 11165,
											"end": 11183,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 11165,
											"end": 11183,
											"name": "tag",
											"source": 14,
											"value": "406"
										},
										{
											"begin": 11165,
											"end": 11183,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11202,
											"end": 11211,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 11202,
											"end": 11211,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11141,
											"end": 11217,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 11222,
											"end": 11602,
											"name": "tag",
											"source": 14,
											"value": "114"
										},
										{
											"begin": 11222,
											"end": 11602,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11301,
											"end": 11302,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 11297,
											"end": 11309,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 11297,
											"end": 11309,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 11297,
											"end": 11309,
											"name": "SHR",
											"source": 14
										},
										{
											"begin": 11297,
											"end": 11309,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11344,
											"end": 11356,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 11344,
											"end": 11356,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 11344,
											"end": 11356,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 11365,
											"end": 11367,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "408"
										},
										{
											"begin": 11365,
											"end": 11367,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 11419,
											"end": 11423,
											"name": "PUSH",
											"source": 14,
											"value": "7F"
										},
										{
											"begin": 11411,
											"end": 11417,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 11407,
											"end": 11424,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 11397,
											"end": 11424,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 11397,
											"end": 11424,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 11365,
											"end": 11367,
											"name": "tag",
											"source": 14,
											"value": "408"
										},
										{
											"begin": 11365,
											"end": 11367,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11472,
											"end": 11474,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 11464,
											"end": 11470,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 11461,
											"end": 11475,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 11441,
											"end": 11459,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 11438,
											"end": 11476,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 11435,
											"end": 11437,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 11435,
											"end": 11437,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "409"
										},
										{
											"begin": 11435,
											"end": 11437,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 11518,
											"end": 11528,
											"name": "PUSH",
											"source": 14,
											"value": "4E487B71"
										},
										{
											"begin": 11513,
											"end": 11516,
											"name": "PUSH",
											"source": 14,
											"value": "E0"
										},
										{
											"begin": 11509,
											"end": 11529,
											"name": "SHL",
											"source": 14
										},
										{
											"begin": 11506,
											"end": 11507,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 11499,
											"end": 11530,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 11553,
											"end": 11557,
											"name": "PUSH",
											"source": 14,
											"value": "22"
										},
										{
											"begin": 11550,
											"end": 11551,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 11543,
											"end": 11558,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 11581,
											"end": 11585,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 11578,
											"end": 11579,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 11571,
											"end": 11586,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 11435,
											"end": 11437,
											"name": "tag",
											"source": 14,
											"value": "409"
										},
										{
											"begin": 11435,
											"end": 11437,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11435,
											"end": 11437,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 11277,
											"end": 11602,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 11277,
											"end": 11602,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 11277,
											"end": 11602,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 11277,
											"end": 11602,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 11607,
											"end": 11734,
											"name": "tag",
											"source": 14,
											"value": "403"
										},
										{
											"begin": 11607,
											"end": 11734,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11668,
											"end": 11678,
											"name": "PUSH",
											"source": 14,
											"value": "4E487B71"
										},
										{
											"begin": 11663,
											"end": 11666,
											"name": "PUSH",
											"source": 14,
											"value": "E0"
										},
										{
											"begin": 11659,
											"end": 11679,
											"name": "SHL",
											"source": 14
										},
										{
											"begin": 11656,
											"end": 11657,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 11649,
											"end": 11680,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 11699,
											"end": 11703,
											"name": "PUSH",
											"source": 14,
											"value": "11"
										},
										{
											"begin": 11696,
											"end": 11697,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 11689,
											"end": 11704,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 11723,
											"end": 11727,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 11720,
											"end": 11721,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 11713,
											"end": 11728,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 11739,
											"end": 11866,
											"name": "tag",
											"source": 14,
											"value": "344"
										},
										{
											"begin": 11739,
											"end": 11866,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11800,
											"end": 11810,
											"name": "PUSH",
											"source": 14,
											"value": "4E487B71"
										},
										{
											"begin": 11795,
											"end": 11798,
											"name": "PUSH",
											"source": 14,
											"value": "E0"
										},
										{
											"begin": 11791,
											"end": 11811,
											"name": "SHL",
											"source": 14
										},
										{
											"begin": 11788,
											"end": 11789,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 11781,
											"end": 11812,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 11831,
											"end": 11835,
											"name": "PUSH",
											"source": 14,
											"value": "41"
										},
										{
											"begin": 11828,
											"end": 11829,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 11821,
											"end": 11836,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 11855,
											"end": 11859,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 11852,
											"end": 11853,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 11845,
											"end": 11860,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 11871,
											"end": 12002,
											"name": "tag",
											"source": 14,
											"value": "351"
										},
										{
											"begin": 11871,
											"end": 12002,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11946,
											"end": 11977,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 11946,
											"end": 11977,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 11936,
											"end": 11978,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 11936,
											"end": 11978,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 11926,
											"end": 11928,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "235"
										},
										{
											"begin": 11926,
											"end": 11928,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 11992,
											"end": 11993,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 11989,
											"end": 11990,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 11982,
											"end": 11994,
											"name": "REVERT",
											"source": 14
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"claimDairy(uint256)": "59176c8d",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"getLastClaimed(uint256)": "d1a20509",
							"increaseAllowance(address,uint256)": "39509351",
							"initialize(string,string)": "4cd88b76",
							"mint(address,uint256)": "40c10f19",
							"name()": "06fdde03",
							"owner()": "8da5cb5b",
							"paused()": "5c975abb",
							"renounceOwnership()": "715018a6",
							"setCooldown(uint256)": "4fc3f41a",
							"setMoolaNFTAddress(address)": "be023d84",
							"setWhitelist(address)": "854cff2f",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"dailyDairyClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimDairy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getLastClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cooldown\",\"type\":\"uint256\"}],\"name\":\"setCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_moola\",\"type\":\"address\"}],\"name\":\"setMoolaNFTAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"mint(address,uint256)\":{\"params\":{\"amount\":\"??\",\"to\":\"??\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"decimals()\":{\"notice\":\":\"},\"mint(address,uint256)\":{\"notice\":\":\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tokens/Moola.sol\":\"Moola\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://98c7bba29bcab7240cdaada7dd7cbe3529fec83314801270c46239e72a9e84d7\",\"dweb:/ipfs/QmfHCc1KMygjXchXVwafWTkFjhbb2SQ3Cu5GzRTdV4CCCh\"]},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6ec10894beb0f7537fba35e501fd1c5d35440e8c8f5ced1b8e57722a1d0879a8\",\"dweb:/ipfs/Qmbc3bNmtDewTGSmrPD93Ubp8saAz8xCxsgTjSmpNTqukz\"]},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a8e235e33979e564ee560e5e7c42f3d4c309698eae7b7035aaf65b0ce6253f9\",\"dweb:/ipfs/QmQKdNPLcgR6LLtS9vDRXy8jeD7gCZDTfctXiTwu6HN7M1\"]},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://607818f1b44548c2d8268176f73cdb290e1faed971b1061930d92698366e2a11\",\"dweb:/ipfs/QmQibMe3r5no95b6q7isGT5R75V8xSofWEDLXzp95b7LgZ\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"keccak256\":\"0xb71b875e7f1b8ad082eb6ff83bca4bfa7d050476cc98fd39295826b654edfb46\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bcec0617473fa22a0866d7daf25bf4d664a62902e49c4a158aef54c1e4348e8a\",\"dweb:/ipfs/QmPQetTKnLJBAQQrLKUWGVZwfp3VGmBhnqqJvmJTycM1jR\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75b47c3aeca7b66ea6752f8be020ec5c1c502de6ec9065272dae23d3a52196e2\",\"dweb:/ipfs/QmUebPMHv16tYKFh5BmBQkMfRFb5b8UZ2RgVwdjxCeufVF\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4c9c634f99dd02d73ce7498b03a6305e251c05eeebb71457306561c1fab0fa7d\",\"dweb:/ipfs/QmbYRBbZHy8YoaQKXdPryiL3CSS7uUaRfRYi1TUj9cTqJQ\"]},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"keccak256\":\"0x5d3b80a09c746aed89446a14d0e8f5ba5212520360d00a495a2156a7a51497e5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dfaceeb9548fa36e2af1e69cbc2bd5a8ba2b06ec62accba64fc123e1e0f120a1\",\"dweb:/ipfs/QmcF1kFRotifj9QBqhqNATaRQhQ6aoDAhSEEoKMc9VdKu3\"]},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"keccak256\":\"0xf1870306db8391db9cf14b41be0da76857a88df0e5c623d2b2338fb30a3bd5ff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://466149e3f8e96b81781b18dbb7b00a20d7172ddee599ef9d51b64c7e78ddfb1d\",\"dweb:/ipfs/QmTvLPy7ZF2Vm7JLSrknWm1Z2fyVaNhoXY2RFcRkmSKFAe\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://37e4df53c8d2e3c1062c1c7b2c17366db7de03bfd2559d340ca95c588aa49c2f\",\"dweb:/ipfs/QmQ9vsG3o4wED3FRogiSUhdzJvZSjjYFtydzXvFEJtgZk4\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://92ad7e572cf44e6b4b37631b44b62f9eb9fb1cf14d9ce51c1504d5dc7ccaf758\",\"dweb:/ipfs/QmcnbqX85tsWnUXPmtuPLE4SczME2sJaTfmqEFkuAJvWhy\"]},\"contracts/interfaces/INFTCore.sol\":{\"keccak256\":\"0x0ef6126f8c0f3b340093f924e4f7ade840eabf31be7db7cdaf430ca30111e02b\",\"license\":\"Unlicense\",\"urls\":[\"bzz-raw://d321227e4dc3dd9ecc1b32573a30cef0a5b521c495da400fcd8a55c4cfff1d37\",\"dweb:/ipfs/QmY4354GiPQdoDPectoFDdKxGE5iSsqoHbywzb3S1N38mE\"]},\"contracts/tokens/Moola.sol\":{\"keccak256\":\"0xf6a9d5db4d1fa245280493814b99b59eabb7b936d81df9d88b415df58211a65b\",\"license\":\"Unlicense\",\"urls\":[\"bzz-raw://cc1bf18f41f1e32988b82fda95ba4fdcf2683277f294ed321862021d1b5fa56d\",\"dweb:/ipfs/QmfSRRhQXtJwSYsaMquh6fDo73JYx2Ed2BBuewyTi8hpwf\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 130,
								"contract": "contracts/tokens/Moola.sol:Moola",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 133,
								"contract": "contracts/tokens/Moola.sol:Moola",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 1580,
								"contract": "contracts/tokens/Moola.sol:Moola",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 454,
								"contract": "contracts/tokens/Moola.sol:Moola",
								"label": "_balances",
								"offset": 0,
								"slot": "51",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 460,
								"contract": "contracts/tokens/Moola.sol:Moola",
								"label": "_allowances",
								"offset": 0,
								"slot": "52",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 462,
								"contract": "contracts/tokens/Moola.sol:Moola",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "53",
								"type": "t_uint256"
							},
							{
								"astId": 464,
								"contract": "contracts/tokens/Moola.sol:Moola",
								"label": "_name",
								"offset": 0,
								"slot": "54",
								"type": "t_string_storage"
							},
							{
								"astId": 466,
								"contract": "contracts/tokens/Moola.sol:Moola",
								"label": "_symbol",
								"offset": 0,
								"slot": "55",
								"type": "t_string_storage"
							},
							{
								"astId": 1045,
								"contract": "contracts/tokens/Moola.sol:Moola",
								"label": "__gap",
								"offset": 0,
								"slot": "56",
								"type": "t_array(t_uint256)45_storage"
							},
							{
								"astId": 10,
								"contract": "contracts/tokens/Moola.sol:Moola",
								"label": "_owner",
								"offset": 0,
								"slot": "101",
								"type": "t_address"
							},
							{
								"astId": 122,
								"contract": "contracts/tokens/Moola.sol:Moola",
								"label": "__gap",
								"offset": 0,
								"slot": "102",
								"type": "t_array(t_uint256)49_storage"
							},
							{
								"astId": 286,
								"contract": "contracts/tokens/Moola.sol:Moola",
								"label": "_paused",
								"offset": 0,
								"slot": "151",
								"type": "t_bool"
							},
							{
								"astId": 375,
								"contract": "contracts/tokens/Moola.sol:Moola",
								"label": "__gap",
								"offset": 0,
								"slot": "152",
								"type": "t_array(t_uint256)49_storage"
							},
							{
								"astId": 1651,
								"contract": "contracts/tokens/Moola.sol:Moola",
								"label": "dailyAllowance",
								"offset": 0,
								"slot": "201",
								"type": "t_uint256"
							},
							{
								"astId": 1653,
								"contract": "contracts/tokens/Moola.sol:Moola",
								"label": "cooldown",
								"offset": 0,
								"slot": "202",
								"type": "t_uint256"
							},
							{
								"astId": 1656,
								"contract": "contracts/tokens/Moola.sol:Moola",
								"label": "moolaNFT",
								"offset": 0,
								"slot": "203",
								"type": "t_contract(IERC721EnumerableUpgradeable)1296"
							},
							{
								"astId": 1660,
								"contract": "contracts/tokens/Moola.sol:Moola",
								"label": "whitelist",
								"offset": 0,
								"slot": "204",
								"type": "t_mapping(t_address,t_bool)"
							},
							{
								"astId": 1664,
								"contract": "contracts/tokens/Moola.sol:Moola",
								"label": "nftLastClaimed",
								"offset": 0,
								"slot": "205",
								"type": "t_mapping(t_uint256,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)45_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[45]",
								"numberOfBytes": "1440"
							},
							"t_array(t_uint256)49_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[49]",
								"numberOfBytes": "1568"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_contract(IERC721EnumerableUpgradeable)1296": {
								"encoding": "inplace",
								"label": "contract IERC721EnumerableUpgradeable",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_mapping(t_uint256,t_uint256)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"decimals()": {
								"notice": ":"
							},
							"mint(address,uint256)": {
								"notice": ":"
							}
						},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1539
						],
						"ContextUpgradeable": [
							1581
						],
						"Initializable": [
							265
						],
						"OwnableUpgradeable": [
							123
						]
					},
					"id": 124,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "87:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
							"file": "../utils/ContextUpgradeable.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 124,
							"sourceUnit": 1582,
							"src": "112:41:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 124,
							"sourceUnit": 266,
							"src": "154:42:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 5,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 265,
										"src": "733:13:0"
									},
									"id": 6,
									"nodeType": "InheritanceSpecifier",
									"src": "733:13:0"
								},
								{
									"baseName": {
										"id": 7,
										"name": "ContextUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1581,
										"src": "748:18:0"
									},
									"id": 8,
									"nodeType": "InheritanceSpecifier",
									"src": "748:18:0"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 4,
								"nodeType": "StructuredDocumentation",
								"src": "198:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 123,
							"linearizedBaseContracts": [
								123,
								1581,
								265
							],
							"name": "OwnableUpgradeable",
							"nameLocation": "711:18:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 10,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "789:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 123,
									"src": "773:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 9,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "773:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 16,
									"name": "OwnershipTransferred",
									"nameLocation": "808:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 12,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "845:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 16,
												"src": "829:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 11,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "829:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 14,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "876:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 16,
												"src": "860:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "860:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "828:57:0"
									},
									"src": "802:84:0"
								},
								{
									"body": {
										"id": 25,
										"nodeType": "Block",
										"src": "1040:43:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 22,
														"name": "__Ownable_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 37,
														"src": "1050:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 23,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1050:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 24,
												"nodeType": "ExpressionStatement",
												"src": "1050:26:0"
											}
										]
									},
									"documentation": {
										"id": 17,
										"nodeType": "StructuredDocumentation",
										"src": "892:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 26,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 20,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 19,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 208,
												"src": "1023:16:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1023:16:0"
										}
									],
									"name": "__Ownable_init",
									"nameLocation": "997:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 18,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1011:2:0"
									},
									"returnParameters": {
										"id": 21,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1040:0:0"
									},
									"scope": 123,
									"src": "988:95:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 36,
										"nodeType": "Block",
										"src": "1151:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 32,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1566,
																"src": "1180:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 33,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1180:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 31,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 117,
														"src": "1161:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 34,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1161:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 35,
												"nodeType": "ExpressionStatement",
												"src": "1161:32:0"
											}
										]
									},
									"id": 37,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 29,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 28,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 208,
												"src": "1134:16:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1134:16:0"
										}
									],
									"name": "__Ownable_init_unchained",
									"nameLocation": "1098:24:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 27,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1122:2:0"
									},
									"returnParameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1151:0:0"
									},
									"scope": 123,
									"src": "1089:111:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 45,
										"nodeType": "Block",
										"src": "1331:30:0",
										"statements": [
											{
												"expression": {
													"id": 43,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 10,
													"src": "1348:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 42,
												"id": 44,
												"nodeType": "Return",
												"src": "1341:13:0"
											}
										]
									},
									"documentation": {
										"id": 38,
										"nodeType": "StructuredDocumentation",
										"src": "1206:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 46,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1285:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 39,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1290:2:0"
									},
									"returnParameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 41,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 46,
												"src": "1322:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 40,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1322:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1321:9:0"
									},
									"scope": 123,
									"src": "1276:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 59,
										"nodeType": "Block",
										"src": "1470:96:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 54,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 50,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 46,
																	"src": "1488:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 51,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1488:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 52,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1566,
																	"src": "1499:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 53,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1499:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1488:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 55,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1513:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 49,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1480:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 56,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1480:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 57,
												"nodeType": "ExpressionStatement",
												"src": "1480:68:0"
											},
											{
												"id": 58,
												"nodeType": "PlaceholderStatement",
												"src": "1558:1:0"
											}
										]
									},
									"documentation": {
										"id": 47,
										"nodeType": "StructuredDocumentation",
										"src": "1367:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 60,
									"name": "onlyOwner",
									"nameLocation": "1458:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 48,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1467:2:0"
									},
									"src": "1449:117:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 73,
										"nodeType": "Block",
										"src": "1962:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 69,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1999:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 68,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1991:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 67,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1991:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 70,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1991:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 66,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 117,
														"src": "1972:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 71,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1972:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 72,
												"nodeType": "ExpressionStatement",
												"src": "1972:30:0"
											}
										]
									},
									"documentation": {
										"id": 61,
										"nodeType": "StructuredDocumentation",
										"src": "1572:331:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 74,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 64,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 63,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 60,
												"src": "1952:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1952:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "1917:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 62,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1934:2:0"
									},
									"returnParameters": {
										"id": 65,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1962:0:0"
									},
									"scope": 123,
									"src": "1908:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 96,
										"nodeType": "Block",
										"src": "2228:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 88,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 83,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 77,
																"src": "2246:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 86,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2266:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 85,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2258:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 84,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2258:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 87,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2258:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2246:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 89,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2270:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 82,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2238:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 90,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2238:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 91,
												"nodeType": "ExpressionStatement",
												"src": "2238:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 93,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 77,
															"src": "2340:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 92,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 117,
														"src": "2321:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 94,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2321:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 95,
												"nodeType": "ExpressionStatement",
												"src": "2321:28:0"
											}
										]
									},
									"documentation": {
										"id": 75,
										"nodeType": "StructuredDocumentation",
										"src": "2015:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 97,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 80,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 79,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 60,
												"src": "2218:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2218:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2167:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 78,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 77,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2193:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 97,
												"src": "2185:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 76,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2185:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2184:18:0"
									},
									"returnParameters": {
										"id": 81,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2228:0:0"
									},
									"scope": 123,
									"src": "2158:198:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 116,
										"nodeType": "Block",
										"src": "2573:124:0",
										"statements": [
											{
												"assignments": [
													104
												],
												"declarations": [
													{
														"constant": false,
														"id": 104,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2591:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 116,
														"src": "2583:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 103,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2583:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 106,
												"initialValue": {
													"id": 105,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 10,
													"src": "2602:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2583:25:0"
											},
											{
												"expression": {
													"id": 109,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 107,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 10,
														"src": "2618:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 108,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 100,
														"src": "2627:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2618:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 110,
												"nodeType": "ExpressionStatement",
												"src": "2618:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 112,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 104,
															"src": "2671:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 113,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 100,
															"src": "2681:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 111,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 16,
														"src": "2650:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 114,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2650:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 115,
												"nodeType": "EmitStatement",
												"src": "2645:45:0"
											}
										]
									},
									"documentation": {
										"id": 98,
										"nodeType": "StructuredDocumentation",
										"src": "2362:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 117,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2519:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 101,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 100,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2546:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 117,
												"src": "2538:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 99,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2538:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2537:18:0"
									},
									"returnParameters": {
										"id": 102,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2573:0:0"
									},
									"scope": 123,
									"src": "2510:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 118,
										"nodeType": "StructuredDocumentation",
										"src": "2703:254:0",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 122,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "2982:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 123,
									"src": "2962:25:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$49_storage",
										"typeString": "uint256[49]"
									},
									"typeName": {
										"baseType": {
											"id": 119,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "2962:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 121,
										"length": {
											"hexValue": "3439",
											"id": 120,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "2970:2:0",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_49_by_1",
												"typeString": "int_const 49"
											},
											"value": "49"
										},
										"nodeType": "ArrayTypeName",
										"src": "2962:11:0",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$49_storage_ptr",
											"typeString": "uint256[49]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 124,
							"src": "693:2297:0",
							"usedErrors": []
						}
					],
					"src": "87:2904:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1539
						],
						"Initializable": [
							265
						]
					},
					"id": 266,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 125,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".2"
							],
							"nodeType": "PragmaDirective",
							"src": "113:23:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",
							"file": "../../utils/AddressUpgradeable.sol",
							"id": 126,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 266,
							"sourceUnit": 1540,
							"src": "138:44:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 127,
								"nodeType": "StructuredDocumentation",
								"src": "184:2198:1",
								"text": " @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="
							},
							"fullyImplemented": true,
							"id": 265,
							"linearizedBaseContracts": [
								265
							],
							"name": "Initializable",
							"nameLocation": "2401:13:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"documentation": {
										"id": 128,
										"nodeType": "StructuredDocumentation",
										"src": "2421:109:1",
										"text": " @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"
									},
									"id": 130,
									"mutability": "mutable",
									"name": "_initialized",
									"nameLocation": "2549:12:1",
									"nodeType": "VariableDeclaration",
									"scope": 265,
									"src": "2535:26:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 129,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "2535:5:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"documentation": {
										"id": 131,
										"nodeType": "StructuredDocumentation",
										"src": "2568:91:1",
										"text": " @dev Indicates that the contract is in the process of being initialized."
									},
									"id": 133,
									"mutability": "mutable",
									"name": "_initializing",
									"nameLocation": "2677:13:1",
									"nodeType": "VariableDeclaration",
									"scope": 265,
									"src": "2664:26:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 132,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "2664:4:1",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 134,
										"nodeType": "StructuredDocumentation",
										"src": "2697:90:1",
										"text": " @dev Triggered when the contract has been initialized or reinitialized."
									},
									"id": 138,
									"name": "Initialized",
									"nameLocation": "2798:11:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 137,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 136,
												"indexed": false,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "2816:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "2810:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 135,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2810:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2809:15:1"
									},
									"src": "2792:33:1"
								},
								{
									"body": {
										"id": 166,
										"nodeType": "Block",
										"src": "3101:257:1",
										"statements": [
											{
												"assignments": [
													142
												],
												"declarations": [
													{
														"constant": false,
														"id": 142,
														"mutability": "mutable",
														"name": "isTopLevelCall",
														"nameLocation": "3116:14:1",
														"nodeType": "VariableDeclaration",
														"scope": 166,
														"src": "3111:19:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 141,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3111:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 146,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "31",
															"id": 144,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3156:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 143,
														"name": "_setInitializedVersion",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 264,
														"src": "3133:22:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint8_$returns$_t_bool_$",
															"typeString": "function (uint8) returns (bool)"
														}
													},
													"id": 145,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3133:25:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3111:47:1"
											},
											{
												"condition": {
													"id": 147,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 142,
													"src": "3172:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 153,
												"nodeType": "IfStatement",
												"src": "3168:65:1",
												"trueBody": {
													"id": 152,
													"nodeType": "Block",
													"src": "3188:45:1",
													"statements": [
														{
															"expression": {
																"id": 150,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 148,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 133,
																	"src": "3202:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 149,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3218:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "3202:20:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 151,
															"nodeType": "ExpressionStatement",
															"src": "3202:20:1"
														}
													]
												}
											},
											{
												"id": 154,
												"nodeType": "PlaceholderStatement",
												"src": "3242:1:1"
											},
											{
												"condition": {
													"id": 155,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 142,
													"src": "3257:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 165,
												"nodeType": "IfStatement",
												"src": "3253:99:1",
												"trueBody": {
													"id": 164,
													"nodeType": "Block",
													"src": "3273:79:1",
													"statements": [
														{
															"expression": {
																"id": 158,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 156,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 133,
																	"src": "3287:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 157,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3303:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "3287:21:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 159,
															"nodeType": "ExpressionStatement",
															"src": "3287:21:1"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"hexValue": "31",
																		"id": 161,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3339:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		}
																	],
																	"id": 160,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 138,
																	"src": "3327:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint8_$returns$__$",
																		"typeString": "function (uint8)"
																	}
																},
																"id": 162,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3327:14:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 163,
															"nodeType": "EmitStatement",
															"src": "3322:19:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 139,
										"nodeType": "StructuredDocumentation",
										"src": "2831:242:1",
										"text": " @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`."
									},
									"id": 167,
									"name": "initializer",
									"nameLocation": "3087:11:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 140,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3098:2:1"
									},
									"src": "3078:280:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 197,
										"nodeType": "Block",
										"src": "4173:269:1",
										"statements": [
											{
												"assignments": [
													173
												],
												"declarations": [
													{
														"constant": false,
														"id": 173,
														"mutability": "mutable",
														"name": "isTopLevelCall",
														"nameLocation": "4188:14:1",
														"nodeType": "VariableDeclaration",
														"scope": 197,
														"src": "4183:19:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 172,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4183:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 177,
												"initialValue": {
													"arguments": [
														{
															"id": 175,
															"name": "version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 170,
															"src": "4228:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 174,
														"name": "_setInitializedVersion",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 264,
														"src": "4205:22:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint8_$returns$_t_bool_$",
															"typeString": "function (uint8) returns (bool)"
														}
													},
													"id": 176,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4205:31:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4183:53:1"
											},
											{
												"condition": {
													"id": 178,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 173,
													"src": "4250:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 184,
												"nodeType": "IfStatement",
												"src": "4246:65:1",
												"trueBody": {
													"id": 183,
													"nodeType": "Block",
													"src": "4266:45:1",
													"statements": [
														{
															"expression": {
																"id": 181,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 179,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 133,
																	"src": "4280:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 180,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4296:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "4280:20:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 182,
															"nodeType": "ExpressionStatement",
															"src": "4280:20:1"
														}
													]
												}
											},
											{
												"id": 185,
												"nodeType": "PlaceholderStatement",
												"src": "4320:1:1"
											},
											{
												"condition": {
													"id": 186,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 173,
													"src": "4335:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 196,
												"nodeType": "IfStatement",
												"src": "4331:105:1",
												"trueBody": {
													"id": 195,
													"nodeType": "Block",
													"src": "4351:85:1",
													"statements": [
														{
															"expression": {
																"id": 189,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 187,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 133,
																	"src": "4365:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 188,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4381:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "4365:21:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 190,
															"nodeType": "ExpressionStatement",
															"src": "4365:21:1"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 192,
																		"name": "version",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 170,
																		"src": "4417:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	],
																	"id": 191,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 138,
																	"src": "4405:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint8_$returns$__$",
																		"typeString": "function (uint8)"
																	}
																},
																"id": 193,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4405:20:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 194,
															"nodeType": "EmitStatement",
															"src": "4400:25:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 168,
										"nodeType": "StructuredDocumentation",
										"src": "3364:766:1",
										"text": " @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n initialization step. This is essential to configure modules that are added through upgrades and that require\n initialization.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator."
									},
									"id": 198,
									"name": "reinitializer",
									"nameLocation": "4144:13:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 171,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 170,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "4164:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 198,
												"src": "4158:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 169,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4158:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4157:15:1"
									},
									"src": "4135:307:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 207,
										"nodeType": "Block",
										"src": "4680:97:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 202,
															"name": "_initializing",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 133,
															"src": "4698:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67",
															"id": 203,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4713:45:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b",
																"typeString": "literal_string \"Initializable: contract is not initializing\""
															},
															"value": "Initializable: contract is not initializing"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b",
																"typeString": "literal_string \"Initializable: contract is not initializing\""
															}
														],
														"id": 201,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4690:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 204,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4690:69:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 205,
												"nodeType": "ExpressionStatement",
												"src": "4690:69:1"
											},
											{
												"id": 206,
												"nodeType": "PlaceholderStatement",
												"src": "4769:1:1"
											}
										]
									},
									"documentation": {
										"id": 199,
										"nodeType": "StructuredDocumentation",
										"src": "4448:199:1",
										"text": " @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."
									},
									"id": 208,
									"name": "onlyInitializing",
									"nameLocation": "4661:16:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 200,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4677:2:1"
									},
									"src": "4652:125:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 220,
										"nodeType": "Block",
										"src": "5225:56:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 215,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5263:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint8_$",
																			"typeString": "type(uint8)"
																		},
																		"typeName": {
																			"id": 214,
																			"name": "uint8",
																			"nodeType": "ElementaryTypeName",
																			"src": "5263:5:1",
																			"typeDescriptions": {}
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_type$_t_uint8_$",
																			"typeString": "type(uint8)"
																		}
																	],
																	"id": 213,
																	"name": "type",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967269,
																	"src": "5258:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 216,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5258:11:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_meta_type_t_uint8",
																	"typeString": "type(uint8)"
																}
															},
															"id": 217,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "max",
															"nodeType": "MemberAccess",
															"src": "5258:15:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 212,
														"name": "_setInitializedVersion",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 264,
														"src": "5235:22:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint8_$returns$_t_bool_$",
															"typeString": "function (uint8) returns (bool)"
														}
													},
													"id": 218,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5235:39:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 219,
												"nodeType": "ExpressionStatement",
												"src": "5235:39:1"
											}
										]
									},
									"documentation": {
										"id": 209,
										"nodeType": "StructuredDocumentation",
										"src": "4783:388:1",
										"text": " @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies."
									},
									"id": 221,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_disableInitializers",
									"nameLocation": "5185:20:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 210,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5205:2:1"
									},
									"returnParameters": {
										"id": 211,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5225:0:1"
									},
									"scope": 265,
									"src": "5176:105:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 263,
										"nodeType": "Block",
										"src": "5357:738:1",
										"statements": [
											{
												"condition": {
													"id": 228,
													"name": "_initializing",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 133,
													"src": "5684:13:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 261,
													"nodeType": "Block",
													"src": "5922:167:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		},
																		"id": 251,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 249,
																			"name": "_initialized",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 130,
																			"src": "5944:12:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<",
																		"rightExpression": {
																			"id": 250,
																			"name": "version",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 223,
																			"src": "5959:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		},
																		"src": "5944:22:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
																		"id": 252,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5968:48:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																			"typeString": "literal_string \"Initializable: contract is already initialized\""
																		},
																		"value": "Initializable: contract is already initialized"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																			"typeString": "literal_string \"Initializable: contract is already initialized\""
																		}
																	],
																	"id": 248,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "5936:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 253,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5936:81:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 254,
															"nodeType": "ExpressionStatement",
															"src": "5936:81:1"
														},
														{
															"expression": {
																"id": 257,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 255,
																	"name": "_initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 130,
																	"src": "6031:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 256,
																	"name": "version",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 223,
																	"src": "6046:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "6031:22:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 258,
															"nodeType": "ExpressionStatement",
															"src": "6031:22:1"
														},
														{
															"expression": {
																"hexValue": "74727565",
																"id": 259,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6074:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"functionReturnParameters": 227,
															"id": 260,
															"nodeType": "Return",
															"src": "6067:11:1"
														}
													]
												},
												"id": 262,
												"nodeType": "IfStatement",
												"src": "5680:409:1",
												"trueBody": {
													"id": 247,
													"nodeType": "Block",
													"src": "5699:217:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 241,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			},
																			"id": 232,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 230,
																				"name": "version",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 223,
																				"src": "5738:7:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 231,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5749:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "5738:12:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&&",
																		"rightExpression": {
																			"id": 240,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "!",
																			"prefix": true,
																			"src": "5754:45:1",
																			"subExpression": {
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"id": 237,
																								"name": "this",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 4294967268,
																								"src": "5793:4:1",
																								"typeDescriptions": {
																									"typeIdentifier": "t_contract$_Initializable_$265",
																									"typeString": "contract Initializable"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_contract$_Initializable_$265",
																									"typeString": "contract Initializable"
																								}
																							],
																							"id": 236,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "5785:7:1",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_address_$",
																								"typeString": "type(address)"
																							},
																							"typeName": {
																								"id": 235,
																								"name": "address",
																								"nodeType": "ElementaryTypeName",
																								"src": "5785:7:1",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 238,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "5785:13:1",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					],
																					"expression": {
																						"id": 233,
																						"name": "AddressUpgradeable",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1539,
																						"src": "5755:18:1",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_contract$_AddressUpgradeable_$1539_$",
																							"typeString": "type(library AddressUpgradeable)"
																						}
																					},
																					"id": 234,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "isContract",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1314,
																					"src": "5755:29:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																						"typeString": "function (address) view returns (bool)"
																					}
																				},
																				"id": 239,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "5755:44:1",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "5738:61:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
																		"id": 242,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5817:48:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																			"typeString": "literal_string \"Initializable: contract is already initialized\""
																		},
																		"value": "Initializable: contract is already initialized"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																			"typeString": "literal_string \"Initializable: contract is already initialized\""
																		}
																	],
																	"id": 229,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "5713:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 243,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5713:166:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 244,
															"nodeType": "ExpressionStatement",
															"src": "5713:166:1"
														},
														{
															"expression": {
																"hexValue": "66616c7365",
																"id": 245,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5900:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"functionReturnParameters": 227,
															"id": 246,
															"nodeType": "Return",
															"src": "5893:12:1"
														}
													]
												}
											}
										]
									},
									"id": 264,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setInitializedVersion",
									"nameLocation": "5296:22:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 224,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 223,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "5325:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 264,
												"src": "5319:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 222,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5319:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5318:15:1"
									},
									"returnParameters": {
										"id": 227,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 226,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 264,
												"src": "5351:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 225,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5351:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5350:6:1"
									},
									"scope": 265,
									"src": "5287:808:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 266,
							"src": "2383:3714:1",
							"usedErrors": []
						}
					],
					"src": "113:5985:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1539
						],
						"ContextUpgradeable": [
							1581
						],
						"Initializable": [
							265
						],
						"PausableUpgradeable": [
							376
						]
					},
					"id": 377,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 267,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "90:23:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
							"file": "../utils/ContextUpgradeable.sol",
							"id": 268,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 377,
							"sourceUnit": 1582,
							"src": "115:41:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 269,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 377,
							"sourceUnit": 266,
							"src": "157:42:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 271,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 265,
										"src": "682:13:2"
									},
									"id": 272,
									"nodeType": "InheritanceSpecifier",
									"src": "682:13:2"
								},
								{
									"baseName": {
										"id": 273,
										"name": "ContextUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1581,
										"src": "697:18:2"
									},
									"id": 274,
									"nodeType": "InheritanceSpecifier",
									"src": "697:18:2"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 270,
								"nodeType": "StructuredDocumentation",
								"src": "201:439:2",
								"text": " @dev Contract module which allows children to implement an emergency stop\n mechanism that can be triggered by an authorized account.\n This module is used through inheritance. It will make available the\n modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n the functions of your contract. Note that they will not be pausable by\n simply including this module, only once the modifiers are put in place."
							},
							"fullyImplemented": true,
							"id": 376,
							"linearizedBaseContracts": [
								376,
								1581,
								265
							],
							"name": "PausableUpgradeable",
							"nameLocation": "659:19:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 275,
										"nodeType": "StructuredDocumentation",
										"src": "722:73:2",
										"text": " @dev Emitted when the pause is triggered by `account`."
									},
									"id": 279,
									"name": "Paused",
									"nameLocation": "806:6:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 278,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 277,
												"indexed": false,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "821:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "813:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 276,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "813:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "812:17:2"
									},
									"src": "800:30:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 280,
										"nodeType": "StructuredDocumentation",
										"src": "836:70:2",
										"text": " @dev Emitted when the pause is lifted by `account`."
									},
									"id": 284,
									"name": "Unpaused",
									"nameLocation": "917:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 283,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 282,
												"indexed": false,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "934:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 284,
												"src": "926:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 281,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "926:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "925:17:2"
									},
									"src": "911:32:2"
								},
								{
									"constant": false,
									"id": 286,
									"mutability": "mutable",
									"name": "_paused",
									"nameLocation": "962:7:2",
									"nodeType": "VariableDeclaration",
									"scope": 376,
									"src": "949:20:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 285,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "949:4:2",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 295,
										"nodeType": "Block",
										"src": "1101:44:2",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 292,
														"name": "__Pausable_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 306,
														"src": "1111:25:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 293,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1111:27:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 294,
												"nodeType": "ExpressionStatement",
												"src": "1111:27:2"
											}
										]
									},
									"documentation": {
										"id": 287,
										"nodeType": "StructuredDocumentation",
										"src": "976:67:2",
										"text": " @dev Initializes the contract in unpaused state."
									},
									"id": 296,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 290,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 289,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 208,
												"src": "1084:16:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "1084:16:2"
										}
									],
									"name": "__Pausable_init",
									"nameLocation": "1057:15:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 288,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1072:2:2"
									},
									"returnParameters": {
										"id": 291,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1101:0:2"
									},
									"scope": 376,
									"src": "1048:97:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 305,
										"nodeType": "Block",
										"src": "1214:32:2",
										"statements": [
											{
												"expression": {
													"id": 303,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 301,
														"name": "_paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 286,
														"src": "1224:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 302,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1234:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "1224:15:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 304,
												"nodeType": "ExpressionStatement",
												"src": "1224:15:2"
											}
										]
									},
									"id": 306,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 299,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 298,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 208,
												"src": "1197:16:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "1197:16:2"
										}
									],
									"name": "__Pausable_init_unchained",
									"nameLocation": "1160:25:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 297,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1185:2:2"
									},
									"returnParameters": {
										"id": 300,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1214:0:2"
									},
									"scope": 376,
									"src": "1151:95:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 314,
										"nodeType": "Block",
										"src": "1394:31:2",
										"statements": [
											{
												"expression": {
													"id": 312,
													"name": "_paused",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 286,
													"src": "1411:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 311,
												"id": 313,
												"nodeType": "Return",
												"src": "1404:14:2"
											}
										]
									},
									"documentation": {
										"id": 307,
										"nodeType": "StructuredDocumentation",
										"src": "1252:84:2",
										"text": " @dev Returns true if the contract is paused, and false otherwise."
									},
									"functionSelector": "5c975abb",
									"id": 315,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "paused",
									"nameLocation": "1350:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 308,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1356:2:2"
									},
									"returnParameters": {
										"id": 311,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 310,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 315,
												"src": "1388:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 309,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1388:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1387:6:2"
									},
									"scope": 376,
									"src": "1341:84:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 326,
										"nodeType": "Block",
										"src": "1636:66:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 321,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "1654:9:2",
															"subExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 319,
																	"name": "paused",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 315,
																	"src": "1655:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																		"typeString": "function () view returns (bool)"
																	}
																},
																"id": 320,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1655:8:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5061757361626c653a20706175736564",
															"id": 322,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1665:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a",
																"typeString": "literal_string \"Pausable: paused\""
															},
															"value": "Pausable: paused"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a",
																"typeString": "literal_string \"Pausable: paused\""
															}
														],
														"id": 318,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1646:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 323,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1646:38:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 324,
												"nodeType": "ExpressionStatement",
												"src": "1646:38:2"
											},
											{
												"id": 325,
												"nodeType": "PlaceholderStatement",
												"src": "1694:1:2"
											}
										]
									},
									"documentation": {
										"id": 316,
										"nodeType": "StructuredDocumentation",
										"src": "1431:175:2",
										"text": " @dev Modifier to make a function callable only when the contract is not paused.\n Requirements:\n - The contract must not be paused."
									},
									"id": 327,
									"name": "whenNotPaused",
									"nameLocation": "1620:13:2",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 317,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1633:2:2"
									},
									"src": "1611:91:2",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 337,
										"nodeType": "Block",
										"src": "1902:69:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 331,
																"name": "paused",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 315,
																"src": "1920:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																	"typeString": "function () view returns (bool)"
																}
															},
															"id": 332,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1920:8:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5061757361626c653a206e6f7420706175736564",
															"id": 333,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1930:22:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a",
																"typeString": "literal_string \"Pausable: not paused\""
															},
															"value": "Pausable: not paused"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a",
																"typeString": "literal_string \"Pausable: not paused\""
															}
														],
														"id": 330,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1912:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 334,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1912:41:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 335,
												"nodeType": "ExpressionStatement",
												"src": "1912:41:2"
											},
											{
												"id": 336,
												"nodeType": "PlaceholderStatement",
												"src": "1963:1:2"
											}
										]
									},
									"documentation": {
										"id": 328,
										"nodeType": "StructuredDocumentation",
										"src": "1708:167:2",
										"text": " @dev Modifier to make a function callable only when the contract is paused.\n Requirements:\n - The contract must be paused."
									},
									"id": 338,
									"name": "whenPaused",
									"nameLocation": "1889:10:2",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 329,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1899:2:2"
									},
									"src": "1880:91:2",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 353,
										"nodeType": "Block",
										"src": "2155:66:2",
										"statements": [
											{
												"expression": {
													"id": 346,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 344,
														"name": "_paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 286,
														"src": "2165:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 345,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2175:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "2165:14:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 347,
												"nodeType": "ExpressionStatement",
												"src": "2165:14:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 349,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1566,
																"src": "2201:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 350,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2201:12:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 348,
														"name": "Paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 279,
														"src": "2194:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 351,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2194:20:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 352,
												"nodeType": "EmitStatement",
												"src": "2189:25:2"
											}
										]
									},
									"documentation": {
										"id": 339,
										"nodeType": "StructuredDocumentation",
										"src": "1977:124:2",
										"text": " @dev Triggers stopped state.\n Requirements:\n - The contract must not be paused."
									},
									"id": 354,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 342,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 341,
												"name": "whenNotPaused",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 327,
												"src": "2141:13:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "2141:13:2"
										}
									],
									"name": "_pause",
									"nameLocation": "2115:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 340,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2121:2:2"
									},
									"returnParameters": {
										"id": 343,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2155:0:2"
									},
									"scope": 376,
									"src": "2106:115:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 369,
										"nodeType": "Block",
										"src": "2401:69:2",
										"statements": [
											{
												"expression": {
													"id": 362,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 360,
														"name": "_paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 286,
														"src": "2411:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 361,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2421:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "2411:15:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 363,
												"nodeType": "ExpressionStatement",
												"src": "2411:15:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 365,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1566,
																"src": "2450:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 366,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2450:12:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 364,
														"name": "Unpaused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 284,
														"src": "2441:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 367,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2441:22:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 368,
												"nodeType": "EmitStatement",
												"src": "2436:27:2"
											}
										]
									},
									"documentation": {
										"id": 355,
										"nodeType": "StructuredDocumentation",
										"src": "2227:121:2",
										"text": " @dev Returns to normal state.\n Requirements:\n - The contract must be paused."
									},
									"id": 370,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 358,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 357,
												"name": "whenPaused",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 338,
												"src": "2390:10:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "2390:10:2"
										}
									],
									"name": "_unpause",
									"nameLocation": "2362:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 356,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2370:2:2"
									},
									"returnParameters": {
										"id": 359,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2401:0:2"
									},
									"scope": 376,
									"src": "2353:117:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 371,
										"nodeType": "StructuredDocumentation",
										"src": "2476:254:2",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 375,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "2755:5:2",
									"nodeType": "VariableDeclaration",
									"scope": 376,
									"src": "2735:25:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$49_storage",
										"typeString": "uint256[49]"
									},
									"typeName": {
										"baseType": {
											"id": 372,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "2735:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 374,
										"length": {
											"hexValue": "3439",
											"id": 373,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "2743:2:2",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_49_by_1",
												"typeString": "int_const 49"
											},
											"value": "49"
										},
										"nodeType": "ArrayTypeName",
										"src": "2735:11:2",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$49_storage_ptr",
											"typeString": "uint256[49]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 377,
							"src": "641:2122:2",
							"usedErrors": []
						}
					],
					"src": "90:2674:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1539
						],
						"Initializable": [
							265
						],
						"ReentrancyGuardUpgradeable": [
							435
						]
					},
					"id": 436,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 378,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "97:23:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 379,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 436,
							"sourceUnit": 266,
							"src": "121:42:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 381,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 265,
										"src": "964:13:3"
									},
									"id": 382,
									"nodeType": "InheritanceSpecifier",
									"src": "964:13:3"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 380,
								"nodeType": "StructuredDocumentation",
								"src": "165:750:3",
								"text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
							},
							"fullyImplemented": true,
							"id": 435,
							"linearizedBaseContracts": [
								435,
								265
							],
							"name": "ReentrancyGuardUpgradeable",
							"nameLocation": "934:26:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 385,
									"mutability": "constant",
									"name": "_NOT_ENTERED",
									"nameLocation": "1757:12:3",
									"nodeType": "VariableDeclaration",
									"scope": 435,
									"src": "1732:41:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 383,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1732:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 384,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1772:1:3",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 388,
									"mutability": "constant",
									"name": "_ENTERED",
									"nameLocation": "1804:8:3",
									"nodeType": "VariableDeclaration",
									"scope": 435,
									"src": "1779:37:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 386,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1779:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 387,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1815:1:3",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 390,
									"mutability": "mutable",
									"name": "_status",
									"nameLocation": "1839:7:3",
									"nodeType": "VariableDeclaration",
									"scope": 435,
									"src": "1823:23:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 389,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1823:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 398,
										"nodeType": "Block",
										"src": "1913:51:3",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 395,
														"name": "__ReentrancyGuard_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 409,
														"src": "1923:32:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 396,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1923:34:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 397,
												"nodeType": "ExpressionStatement",
												"src": "1923:34:3"
											}
										]
									},
									"id": 399,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 393,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 392,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 208,
												"src": "1896:16:3"
											},
											"nodeType": "ModifierInvocation",
											"src": "1896:16:3"
										}
									],
									"name": "__ReentrancyGuard_init",
									"nameLocation": "1862:22:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 391,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1884:2:3"
									},
									"returnParameters": {
										"id": 394,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1913:0:3"
									},
									"scope": 435,
									"src": "1853:111:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 408,
										"nodeType": "Block",
										"src": "2040:39:3",
										"statements": [
											{
												"expression": {
													"id": 406,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 404,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 390,
														"src": "2050:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 405,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 385,
														"src": "2060:12:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2050:22:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 407,
												"nodeType": "ExpressionStatement",
												"src": "2050:22:3"
											}
										]
									},
									"id": 409,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 402,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 401,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 208,
												"src": "2023:16:3"
											},
											"nodeType": "ModifierInvocation",
											"src": "2023:16:3"
										}
									],
									"name": "__ReentrancyGuard_init_unchained",
									"nameLocation": "1979:32:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 400,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2011:2:3"
									},
									"returnParameters": {
										"id": 403,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2040:0:3"
									},
									"scope": 435,
									"src": "1970:109:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 428,
										"nodeType": "Block",
										"src": "2480:421:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 415,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 413,
																"name": "_status",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 390,
																"src": "2569:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 414,
																"name": "_ENTERED",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 388,
																"src": "2580:8:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2569:19:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
															"id": 416,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2590:33:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															},
															"value": "ReentrancyGuard: reentrant call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															}
														],
														"id": 412,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2561:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 417,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2561:63:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 418,
												"nodeType": "ExpressionStatement",
												"src": "2561:63:3"
											},
											{
												"expression": {
													"id": 421,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 419,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 390,
														"src": "2699:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 420,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 388,
														"src": "2709:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2699:18:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 422,
												"nodeType": "ExpressionStatement",
												"src": "2699:18:3"
											},
											{
												"id": 423,
												"nodeType": "PlaceholderStatement",
												"src": "2728:1:3"
											},
											{
												"expression": {
													"id": 426,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 424,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 390,
														"src": "2872:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 425,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 385,
														"src": "2882:12:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2872:22:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 427,
												"nodeType": "ExpressionStatement",
												"src": "2872:22:3"
											}
										]
									},
									"documentation": {
										"id": 410,
										"nodeType": "StructuredDocumentation",
										"src": "2085:366:3",
										"text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
									},
									"id": 429,
									"name": "nonReentrant",
									"nameLocation": "2465:12:3",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 411,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2477:2:3"
									},
									"src": "2456:445:3",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 430,
										"nodeType": "StructuredDocumentation",
										"src": "2907:254:3",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 434,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "3186:5:3",
									"nodeType": "VariableDeclaration",
									"scope": 435,
									"src": "3166:25:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$49_storage",
										"typeString": "uint256[49]"
									},
									"typeName": {
										"baseType": {
											"id": 431,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "3166:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 433,
										"length": {
											"hexValue": "3439",
											"id": 432,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "3174:2:3",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_49_by_1",
												"typeString": "int_const 49"
											},
											"value": "49"
										},
										"nodeType": "ArrayTypeName",
										"src": "3166:11:3",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$49_storage_ptr",
											"typeString": "uint256[49]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 436,
							"src": "916:2278:3",
							"usedErrors": []
						}
					],
					"src": "97:3098:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1539
						],
						"ContextUpgradeable": [
							1581
						],
						"ERC20Upgradeable": [
							1046
						],
						"IERC20MetadataUpgradeable": [
							1149
						],
						"IERC20Upgradeable": [
							1124
						],
						"Initializable": [
							265
						]
					},
					"id": 1047,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 437,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "105:23:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol",
							"file": "./IERC20Upgradeable.sol",
							"id": 438,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1047,
							"sourceUnit": 1125,
							"src": "130:33:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol",
							"file": "./extensions/IERC20MetadataUpgradeable.sol",
							"id": 439,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1047,
							"sourceUnit": 1150,
							"src": "164:52:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
							"file": "../../utils/ContextUpgradeable.sol",
							"id": 440,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1047,
							"sourceUnit": 1582,
							"src": "217:44:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../../proxy/utils/Initializable.sol",
							"id": 441,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1047,
							"sourceUnit": 266,
							"src": "262:45:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 443,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 265,
										"src": "1511:13:4"
									},
									"id": 444,
									"nodeType": "InheritanceSpecifier",
									"src": "1511:13:4"
								},
								{
									"baseName": {
										"id": 445,
										"name": "ContextUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1581,
										"src": "1526:18:4"
									},
									"id": 446,
									"nodeType": "InheritanceSpecifier",
									"src": "1526:18:4"
								},
								{
									"baseName": {
										"id": 447,
										"name": "IERC20Upgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1124,
										"src": "1546:17:4"
									},
									"id": 448,
									"nodeType": "InheritanceSpecifier",
									"src": "1546:17:4"
								},
								{
									"baseName": {
										"id": 449,
										"name": "IERC20MetadataUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1149,
										"src": "1565:25:4"
									},
									"id": 450,
									"nodeType": "InheritanceSpecifier",
									"src": "1565:25:4"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 442,
								"nodeType": "StructuredDocumentation",
								"src": "309:1172:4",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."
							},
							"fullyImplemented": true,
							"id": 1046,
							"linearizedBaseContracts": [
								1046,
								1149,
								1124,
								1581,
								265
							],
							"name": "ERC20Upgradeable",
							"nameLocation": "1491:16:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 454,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1633:9:4",
									"nodeType": "VariableDeclaration",
									"scope": 1046,
									"src": "1597:45:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 453,
										"keyType": {
											"id": 451,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1605:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1597:27:4",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 452,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1616:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 460,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1705:11:4",
									"nodeType": "VariableDeclaration",
									"scope": 1046,
									"src": "1649:67:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 459,
										"keyType": {
											"id": 455,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1657:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1649:47:4",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueType": {
											"id": 458,
											"keyType": {
												"id": 456,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1676:7:4",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1668:27:4",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueType": {
												"id": 457,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1687:7:4",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 462,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1739:12:4",
									"nodeType": "VariableDeclaration",
									"scope": 1046,
									"src": "1723:28:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 461,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1723:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 464,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1773:5:4",
									"nodeType": "VariableDeclaration",
									"scope": 1046,
									"src": "1758:20:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 463,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1758:6:4",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 466,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1799:7:4",
									"nodeType": "VariableDeclaration",
									"scope": 1046,
									"src": "1784:22:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 465,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1784:6:4",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 481,
										"nodeType": "Block",
										"src": "2208:55:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 477,
															"name": "name_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 469,
															"src": "2241:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"id": 478,
															"name": "symbol_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 471,
															"src": "2248:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 476,
														"name": "__ERC20_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 500,
														"src": "2218:22:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (string memory,string memory)"
														}
													},
													"id": 479,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2218:38:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 480,
												"nodeType": "ExpressionStatement",
												"src": "2218:38:4"
											}
										]
									},
									"documentation": {
										"id": 467,
										"nodeType": "StructuredDocumentation",
										"src": "1813:298:4",
										"text": " @dev Sets the values for {name} and {symbol}.\n The default value of {decimals} is 18. To select a different value for\n {decimals} you should overload it.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 482,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 474,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 473,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 208,
												"src": "2191:16:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "2191:16:4"
										}
									],
									"name": "__ERC20_init",
									"nameLocation": "2125:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 472,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 469,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "2152:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 482,
												"src": "2138:19:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 468,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2138:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 471,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "2173:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 482,
												"src": "2159:21:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 470,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2159:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2137:44:4"
									},
									"returnParameters": {
										"id": 475,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2208:0:4"
									},
									"scope": 1046,
									"src": "2116:147:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 499,
										"nodeType": "Block",
										"src": "2371:57:4",
										"statements": [
											{
												"expression": {
													"id": 493,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 491,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 464,
														"src": "2381:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 492,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 484,
														"src": "2389:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2381:13:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 494,
												"nodeType": "ExpressionStatement",
												"src": "2381:13:4"
											},
											{
												"expression": {
													"id": 497,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 495,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 466,
														"src": "2404:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 496,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 486,
														"src": "2414:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2404:17:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 498,
												"nodeType": "ExpressionStatement",
												"src": "2404:17:4"
											}
										]
									},
									"id": 500,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 489,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 488,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 208,
												"src": "2354:16:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "2354:16:4"
										}
									],
									"name": "__ERC20_init_unchained",
									"nameLocation": "2278:22:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 487,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 484,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "2315:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 500,
												"src": "2301:19:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 483,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2301:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 486,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "2336:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 500,
												"src": "2322:21:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 485,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2322:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2300:44:4"
									},
									"returnParameters": {
										"id": 490,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2371:0:4"
									},
									"scope": 1046,
									"src": "2269:159:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1136
									],
									"body": {
										"id": 509,
										"nodeType": "Block",
										"src": "2562:29:4",
										"statements": [
											{
												"expression": {
													"id": 507,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 464,
													"src": "2579:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 506,
												"id": 508,
												"nodeType": "Return",
												"src": "2572:12:4"
											}
										]
									},
									"documentation": {
										"id": 501,
										"nodeType": "StructuredDocumentation",
										"src": "2434:54:4",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 510,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2502:4:4",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 503,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2529:8:4"
									},
									"parameters": {
										"id": 502,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2506:2:4"
									},
									"returnParameters": {
										"id": 506,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 505,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 510,
												"src": "2547:13:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 504,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2547:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2546:15:4"
									},
									"scope": 1046,
									"src": "2493:98:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1142
									],
									"body": {
										"id": 519,
										"nodeType": "Block",
										"src": "2775:31:4",
										"statements": [
											{
												"expression": {
													"id": 517,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 466,
													"src": "2792:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 516,
												"id": 518,
												"nodeType": "Return",
												"src": "2785:14:4"
											}
										]
									},
									"documentation": {
										"id": 511,
										"nodeType": "StructuredDocumentation",
										"src": "2597:102:4",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 520,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "2713:6:4",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 513,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2742:8:4"
									},
									"parameters": {
										"id": 512,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2719:2:4"
									},
									"returnParameters": {
										"id": 516,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 515,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 520,
												"src": "2760:13:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 514,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2760:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2759:15:4"
									},
									"scope": 1046,
									"src": "2704:102:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1148
									],
									"body": {
										"id": 529,
										"nodeType": "Block",
										"src": "3495:26:4",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 527,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3512:2:4",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 526,
												"id": 528,
												"nodeType": "Return",
												"src": "3505:9:4"
											}
										]
									},
									"documentation": {
										"id": 521,
										"nodeType": "StructuredDocumentation",
										"src": "2812:613:4",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless this function is\n overridden;\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 530,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "3439:8:4",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 523,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3470:8:4"
									},
									"parameters": {
										"id": 522,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3447:2:4"
									},
									"returnParameters": {
										"id": 526,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 525,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 530,
												"src": "3488:5:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 524,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3488:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3487:7:4"
									},
									"scope": 1046,
									"src": "3430:91:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1073
									],
									"body": {
										"id": 539,
										"nodeType": "Block",
										"src": "3651:36:4",
										"statements": [
											{
												"expression": {
													"id": 537,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 462,
													"src": "3668:12:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 536,
												"id": 538,
												"nodeType": "Return",
												"src": "3661:19:4"
											}
										]
									},
									"documentation": {
										"id": 531,
										"nodeType": "StructuredDocumentation",
										"src": "3527:49:4",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 540,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "3590:11:4",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 533,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3624:8:4"
									},
									"parameters": {
										"id": 532,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3601:2:4"
									},
									"returnParameters": {
										"id": 536,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 535,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 540,
												"src": "3642:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 534,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3642:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3641:9:4"
									},
									"scope": 1046,
									"src": "3581:106:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1081
									],
									"body": {
										"id": 553,
										"nodeType": "Block",
										"src": "3828:42:4",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 549,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 454,
														"src": "3845:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 551,
													"indexExpression": {
														"id": 550,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 543,
														"src": "3855:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3845:18:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 548,
												"id": 552,
												"nodeType": "Return",
												"src": "3838:25:4"
											}
										]
									},
									"documentation": {
										"id": 541,
										"nodeType": "StructuredDocumentation",
										"src": "3693:47:4",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 554,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3754:9:4",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 545,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3801:8:4"
									},
									"parameters": {
										"id": 544,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 543,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3772:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 554,
												"src": "3764:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 542,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3764:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3763:17:4"
									},
									"returnParameters": {
										"id": 548,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 547,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 554,
												"src": "3819:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 546,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3819:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3818:9:4"
									},
									"scope": 1046,
									"src": "3745:125:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1091
									],
									"body": {
										"id": 578,
										"nodeType": "Block",
										"src": "4151:104:4",
										"statements": [
											{
												"assignments": [
													566
												],
												"declarations": [
													{
														"constant": false,
														"id": 566,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4169:5:4",
														"nodeType": "VariableDeclaration",
														"scope": 578,
														"src": "4161:13:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 565,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4161:7:4",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 569,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 567,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1566,
														"src": "4177:10:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 568,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4177:12:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4161:28:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 571,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 566,
															"src": "4209:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 572,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 557,
															"src": "4216:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 573,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 559,
															"src": "4220:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 570,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 802,
														"src": "4199:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 574,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4199:28:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 575,
												"nodeType": "ExpressionStatement",
												"src": "4199:28:4"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 576,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4244:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 564,
												"id": 577,
												"nodeType": "Return",
												"src": "4237:11:4"
											}
										]
									},
									"documentation": {
										"id": 555,
										"nodeType": "StructuredDocumentation",
										"src": "3876:185:4",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."
									},
									"functionSelector": "a9059cbb",
									"id": 579,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "4075:8:4",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 561,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4127:8:4"
									},
									"parameters": {
										"id": 560,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 557,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4092:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 579,
												"src": "4084:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 556,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4084:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 559,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4104:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 579,
												"src": "4096:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 558,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4096:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4083:28:4"
									},
									"returnParameters": {
										"id": 564,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 563,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 579,
												"src": "4145:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 562,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4145:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4144:6:4"
									},
									"scope": 1046,
									"src": "4066:189:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1101
									],
									"body": {
										"id": 596,
										"nodeType": "Block",
										"src": "4411:51:4",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 590,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 460,
															"src": "4428:11:4",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 592,
														"indexExpression": {
															"id": 591,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 582,
															"src": "4440:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4428:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 594,
													"indexExpression": {
														"id": 593,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 584,
														"src": "4447:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4428:27:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 589,
												"id": 595,
												"nodeType": "Return",
												"src": "4421:34:4"
											}
										]
									},
									"documentation": {
										"id": 580,
										"nodeType": "StructuredDocumentation",
										"src": "4261:47:4",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 597,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "4322:9:4",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 586,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4384:8:4"
									},
									"parameters": {
										"id": 585,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 582,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4340:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 597,
												"src": "4332:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 581,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4332:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 584,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4355:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 597,
												"src": "4347:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 583,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4347:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4331:32:4"
									},
									"returnParameters": {
										"id": 589,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 588,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 597,
												"src": "4402:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 587,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4402:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4401:9:4"
									},
									"scope": 1046,
									"src": "4313:149:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1111
									],
									"body": {
										"id": 621,
										"nodeType": "Block",
										"src": "4859:108:4",
										"statements": [
											{
												"assignments": [
													609
												],
												"declarations": [
													{
														"constant": false,
														"id": 609,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4877:5:4",
														"nodeType": "VariableDeclaration",
														"scope": 621,
														"src": "4869:13:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 608,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4869:7:4",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 612,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 610,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1566,
														"src": "4885:10:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 611,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4885:12:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4869:28:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 614,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 609,
															"src": "4916:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 615,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 600,
															"src": "4923:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 616,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 602,
															"src": "4932:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 613,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 975,
														"src": "4907:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 617,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4907:32:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 618,
												"nodeType": "ExpressionStatement",
												"src": "4907:32:4"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 619,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4956:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 607,
												"id": 620,
												"nodeType": "Return",
												"src": "4949:11:4"
											}
										]
									},
									"documentation": {
										"id": 598,
										"nodeType": "StructuredDocumentation",
										"src": "4468:297:4",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 622,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4779:7:4",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 604,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4835:8:4"
									},
									"parameters": {
										"id": 603,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 600,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4795:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "4787:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 599,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4787:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 602,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4812:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "4804:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 601,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4804:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4786:33:4"
									},
									"returnParameters": {
										"id": 607,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 606,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "4853:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 605,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4853:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4852:6:4"
									},
									"scope": 1046,
									"src": "4770:197:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1123
									],
									"body": {
										"id": 654,
										"nodeType": "Block",
										"src": "5662:153:4",
										"statements": [
											{
												"assignments": [
													636
												],
												"declarations": [
													{
														"constant": false,
														"id": 636,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "5680:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 654,
														"src": "5672:15:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 635,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5672:7:4",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 639,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 637,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1566,
														"src": "5690:10:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 638,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5690:12:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5672:30:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 641,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 625,
															"src": "5728:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 642,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 636,
															"src": "5734:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 643,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 629,
															"src": "5743:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 640,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1018,
														"src": "5712:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 644,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5712:38:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 645,
												"nodeType": "ExpressionStatement",
												"src": "5712:38:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 647,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 625,
															"src": "5770:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 648,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 627,
															"src": "5776:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 649,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 629,
															"src": "5780:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 646,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 802,
														"src": "5760:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 650,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5760:27:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 651,
												"nodeType": "ExpressionStatement",
												"src": "5760:27:4"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 652,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5804:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 634,
												"id": 653,
												"nodeType": "Return",
												"src": "5797:11:4"
											}
										]
									},
									"documentation": {
										"id": 623,
										"nodeType": "StructuredDocumentation",
										"src": "4973:551:4",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."
									},
									"functionSelector": "23b872dd",
									"id": 655,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "5538:12:4",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 631,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5638:8:4"
									},
									"parameters": {
										"id": 630,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 625,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5568:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 655,
												"src": "5560:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 624,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5560:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 627,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5590:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 655,
												"src": "5582:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 626,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5582:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 629,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5610:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 655,
												"src": "5602:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 628,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5602:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5550:72:4"
									},
									"returnParameters": {
										"id": 634,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 633,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 655,
												"src": "5656:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 632,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5656:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5655:6:4"
									},
									"scope": 1046,
									"src": "5529:286:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 683,
										"nodeType": "Block",
										"src": "6304:140:4",
										"statements": [
											{
												"assignments": [
													666
												],
												"declarations": [
													{
														"constant": false,
														"id": 666,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "6322:5:4",
														"nodeType": "VariableDeclaration",
														"scope": 683,
														"src": "6314:13:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 665,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6314:7:4",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 669,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 667,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1566,
														"src": "6330:10:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 668,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6330:12:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6314:28:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 671,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 666,
															"src": "6361:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 672,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 658,
															"src": "6368:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 678,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 674,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 666,
																		"src": "6387:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 675,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 658,
																		"src": "6394:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 673,
																	"name": "allowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 597,
																	"src": "6377:9:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address,address) view returns (uint256)"
																	}
																},
																"id": 676,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6377:25:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 677,
																"name": "addedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 660,
																"src": "6405:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6377:38:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 670,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 975,
														"src": "6352:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 679,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6352:64:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 680,
												"nodeType": "ExpressionStatement",
												"src": "6352:64:4"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 681,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6433:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 664,
												"id": 682,
												"nodeType": "Return",
												"src": "6426:11:4"
											}
										]
									},
									"documentation": {
										"id": 656,
										"nodeType": "StructuredDocumentation",
										"src": "5821:384:4",
										"text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "39509351",
									"id": 684,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increaseAllowance",
									"nameLocation": "6219:17:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 661,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 658,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "6245:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 684,
												"src": "6237:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 657,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6237:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 660,
												"mutability": "mutable",
												"name": "addedValue",
												"nameLocation": "6262:10:4",
												"nodeType": "VariableDeclaration",
												"scope": 684,
												"src": "6254:18:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 659,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6254:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6236:37:4"
									},
									"returnParameters": {
										"id": 664,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 663,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 684,
												"src": "6298:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 662,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6298:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6297:6:4"
									},
									"scope": 1046,
									"src": "6210:234:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 724,
										"nodeType": "Block",
										"src": "7030:328:4",
										"statements": [
											{
												"assignments": [
													695
												],
												"declarations": [
													{
														"constant": false,
														"id": 695,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "7048:5:4",
														"nodeType": "VariableDeclaration",
														"scope": 724,
														"src": "7040:13:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 694,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "7040:7:4",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 698,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 696,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1566,
														"src": "7056:10:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 697,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7056:12:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7040:28:4"
											},
											{
												"assignments": [
													700
												],
												"declarations": [
													{
														"constant": false,
														"id": 700,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "7086:16:4",
														"nodeType": "VariableDeclaration",
														"scope": 724,
														"src": "7078:24:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 699,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7078:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 705,
												"initialValue": {
													"arguments": [
														{
															"id": 702,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 695,
															"src": "7115:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 703,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 687,
															"src": "7122:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 701,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 597,
														"src": "7105:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 704,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7105:25:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7078:52:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 709,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 707,
																"name": "currentAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 700,
																"src": "7148:16:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 708,
																"name": "subtractedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 689,
																"src": "7168:15:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7148:35:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
															"id": 710,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7185:39:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															},
															"value": "ERC20: decreased allowance below zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															}
														],
														"id": 706,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7140:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 711,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7140:85:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 712,
												"nodeType": "ExpressionStatement",
												"src": "7140:85:4"
											},
											{
												"id": 721,
												"nodeType": "UncheckedBlock",
												"src": "7235:95:4",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 714,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 695,
																	"src": "7268:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 715,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 687,
																	"src": "7275:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 718,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 716,
																		"name": "currentAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 700,
																		"src": "7284:16:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 717,
																		"name": "subtractedValue",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 689,
																		"src": "7303:15:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7284:34:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 713,
																"name": "_approve",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 975,
																"src": "7259:8:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																	"typeString": "function (address,address,uint256)"
																}
															},
															"id": 719,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7259:60:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 720,
														"nodeType": "ExpressionStatement",
														"src": "7259:60:4"
													}
												]
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 722,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "7347:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 693,
												"id": 723,
												"nodeType": "Return",
												"src": "7340:11:4"
											}
										]
									},
									"documentation": {
										"id": 685,
										"nodeType": "StructuredDocumentation",
										"src": "6450:476:4",
										"text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
									},
									"functionSelector": "a457c2d7",
									"id": 725,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseAllowance",
									"nameLocation": "6940:17:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 690,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 687,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "6966:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 725,
												"src": "6958:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 686,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6958:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 689,
												"mutability": "mutable",
												"name": "subtractedValue",
												"nameLocation": "6983:15:4",
												"nodeType": "VariableDeclaration",
												"scope": 725,
												"src": "6975:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 688,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6975:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6957:42:4"
									},
									"returnParameters": {
										"id": 693,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 692,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 725,
												"src": "7024:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 691,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7024:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7023:6:4"
									},
									"scope": 1046,
									"src": "6931:427:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 801,
										"nodeType": "Block",
										"src": "7929:543:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 741,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 736,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 728,
																"src": "7947:4:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 739,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7963:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 738,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7955:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 737,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7955:7:4",
																		"typeDescriptions": {}
																	}
																},
																"id": 740,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7955:10:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7947:18:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
															"id": 742,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7967:39:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															},
															"value": "ERC20: transfer from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															}
														],
														"id": 735,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7939:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 743,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7939:68:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 744,
												"nodeType": "ExpressionStatement",
												"src": "7939:68:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 751,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 746,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 730,
																"src": "8025:2:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 749,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8039:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 748,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8031:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 747,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "8031:7:4",
																		"typeDescriptions": {}
																	}
																},
																"id": 750,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8031:10:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "8025:16:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
															"id": 752,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8043:37:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															},
															"value": "ERC20: transfer to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															}
														],
														"id": 745,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8017:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 753,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8017:64:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 754,
												"nodeType": "ExpressionStatement",
												"src": "8017:64:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 756,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 728,
															"src": "8113:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 757,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 730,
															"src": "8119:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 758,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 732,
															"src": "8123:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 755,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1029,
														"src": "8092:20:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 759,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8092:38:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 760,
												"nodeType": "ExpressionStatement",
												"src": "8092:38:4"
											},
											{
												"assignments": [
													762
												],
												"declarations": [
													{
														"constant": false,
														"id": 762,
														"mutability": "mutable",
														"name": "fromBalance",
														"nameLocation": "8149:11:4",
														"nodeType": "VariableDeclaration",
														"scope": 801,
														"src": "8141:19:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 761,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8141:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 766,
												"initialValue": {
													"baseExpression": {
														"id": 763,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 454,
														"src": "8163:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 765,
													"indexExpression": {
														"id": 764,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 728,
														"src": "8173:4:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "8163:15:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8141:37:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 770,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 768,
																"name": "fromBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 762,
																"src": "8196:11:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 769,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 732,
																"src": "8211:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8196:21:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
															"id": 771,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8219:40:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															},
															"value": "ERC20: transfer amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															}
														],
														"id": 767,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8188:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 772,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8188:72:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 773,
												"nodeType": "ExpressionStatement",
												"src": "8188:72:4"
											},
											{
												"id": 782,
												"nodeType": "UncheckedBlock",
												"src": "8270:73:4",
												"statements": [
													{
														"expression": {
															"id": 780,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 774,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 454,
																	"src": "8294:9:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 776,
																"indexExpression": {
																	"id": 775,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 728,
																	"src": "8304:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "8294:15:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 779,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 777,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 762,
																	"src": "8312:11:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 778,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 732,
																	"src": "8326:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "8312:20:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8294:38:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 781,
														"nodeType": "ExpressionStatement",
														"src": "8294:38:4"
													}
												]
											},
											{
												"expression": {
													"id": 787,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 783,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 454,
															"src": "8352:9:4",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 785,
														"indexExpression": {
															"id": 784,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 730,
															"src": "8362:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8352:13:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 786,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 732,
														"src": "8369:6:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8352:23:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 788,
												"nodeType": "ExpressionStatement",
												"src": "8352:23:4"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 790,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 728,
															"src": "8400:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 791,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 730,
															"src": "8406:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 792,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 732,
															"src": "8410:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 789,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1058,
														"src": "8391:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 793,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8391:26:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 794,
												"nodeType": "EmitStatement",
												"src": "8386:31:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 796,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 728,
															"src": "8448:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 797,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 730,
															"src": "8454:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 798,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 732,
															"src": "8458:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 795,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1040,
														"src": "8428:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 799,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8428:37:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 800,
												"nodeType": "ExpressionStatement",
												"src": "8428:37:4"
											}
										]
									},
									"documentation": {
										"id": 726,
										"nodeType": "StructuredDocumentation",
										"src": "7364:452:4",
										"text": " @dev Moves `amount` of tokens from `sender` to `recipient`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."
									},
									"id": 802,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "7830:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 733,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 728,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "7857:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 802,
												"src": "7849:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 727,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7849:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 730,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "7879:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 802,
												"src": "7871:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 729,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7871:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 732,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "7899:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 802,
												"src": "7891:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 731,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7891:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7839:72:4"
									},
									"returnParameters": {
										"id": 734,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7929:0:4"
									},
									"scope": 1046,
									"src": "7821:651:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 857,
										"nodeType": "Block",
										"src": "8813:324:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 816,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 811,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 805,
																"src": "8831:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 814,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8850:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 813,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8842:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 812,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "8842:7:4",
																		"typeDescriptions": {}
																	}
																},
																"id": 815,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8842:10:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "8831:21:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
															"id": 817,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8854:33:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															},
															"value": "ERC20: mint to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															}
														],
														"id": 810,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8823:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 818,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8823:65:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 819,
												"nodeType": "ExpressionStatement",
												"src": "8823:65:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 823,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8928:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 822,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8920:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 821,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8920:7:4",
																	"typeDescriptions": {}
																}
															},
															"id": 824,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8920:10:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 825,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 805,
															"src": "8932:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 826,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 807,
															"src": "8941:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 820,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1029,
														"src": "8899:20:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 827,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8899:49:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 828,
												"nodeType": "ExpressionStatement",
												"src": "8899:49:4"
											},
											{
												"expression": {
													"id": 831,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 829,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 462,
														"src": "8959:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 830,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 807,
														"src": "8975:6:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8959:22:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 832,
												"nodeType": "ExpressionStatement",
												"src": "8959:22:4"
											},
											{
												"expression": {
													"id": 837,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 833,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 454,
															"src": "8991:9:4",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 835,
														"indexExpression": {
															"id": 834,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 805,
															"src": "9001:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8991:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 836,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 807,
														"src": "9013:6:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8991:28:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 838,
												"nodeType": "ExpressionStatement",
												"src": "8991:28:4"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 842,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9051:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 841,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9043:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 840,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9043:7:4",
																	"typeDescriptions": {}
																}
															},
															"id": 843,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9043:10:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 844,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 805,
															"src": "9055:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 845,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 807,
															"src": "9064:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 839,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1058,
														"src": "9034:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 846,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9034:37:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 847,
												"nodeType": "EmitStatement",
												"src": "9029:42:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 851,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9110:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 850,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9102:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 849,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9102:7:4",
																	"typeDescriptions": {}
																}
															},
															"id": 852,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9102:10:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 853,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 805,
															"src": "9114:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 854,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 807,
															"src": "9123:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 848,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1040,
														"src": "9082:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 855,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9082:48:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 856,
												"nodeType": "ExpressionStatement",
												"src": "9082:48:4"
											}
										]
									},
									"documentation": {
										"id": 803,
										"nodeType": "StructuredDocumentation",
										"src": "8478:265:4",
										"text": "@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."
									},
									"id": 858,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "8757:5:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 808,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 805,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8771:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 858,
												"src": "8763:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 804,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8763:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 807,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "8788:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 858,
												"src": "8780:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 806,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8780:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8762:33:4"
									},
									"returnParameters": {
										"id": 809,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8813:0:4"
									},
									"scope": 1046,
									"src": "8748:389:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 929,
										"nodeType": "Block",
										"src": "9522:511:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 872,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 867,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 861,
																"src": "9540:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 870,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9559:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 869,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9551:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 868,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "9551:7:4",
																		"typeDescriptions": {}
																	}
																},
																"id": 871,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9551:10:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "9540:21:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e2066726f6d20746865207a65726f2061646472657373",
															"id": 873,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9563:35:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															},
															"value": "ERC20: burn from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															}
														],
														"id": 866,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9532:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 874,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9532:67:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 875,
												"nodeType": "ExpressionStatement",
												"src": "9532:67:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 877,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 861,
															"src": "9631:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 880,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9648:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 879,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9640:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 878,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9640:7:4",
																	"typeDescriptions": {}
																}
															},
															"id": 881,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9640:10:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 882,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 863,
															"src": "9652:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 876,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1029,
														"src": "9610:20:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 883,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9610:49:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 884,
												"nodeType": "ExpressionStatement",
												"src": "9610:49:4"
											},
											{
												"assignments": [
													886
												],
												"declarations": [
													{
														"constant": false,
														"id": 886,
														"mutability": "mutable",
														"name": "accountBalance",
														"nameLocation": "9678:14:4",
														"nodeType": "VariableDeclaration",
														"scope": 929,
														"src": "9670:22:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 885,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9670:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 890,
												"initialValue": {
													"baseExpression": {
														"id": 887,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 454,
														"src": "9695:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 889,
													"indexExpression": {
														"id": 888,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 861,
														"src": "9705:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "9695:18:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9670:43:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 894,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 892,
																"name": "accountBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 886,
																"src": "9731:14:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 893,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 863,
																"src": "9749:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9731:24:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365",
															"id": 895,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9757:36:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															},
															"value": "ERC20: burn amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															}
														],
														"id": 891,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9723:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 896,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9723:71:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 897,
												"nodeType": "ExpressionStatement",
												"src": "9723:71:4"
											},
											{
												"id": 906,
												"nodeType": "UncheckedBlock",
												"src": "9804:79:4",
												"statements": [
													{
														"expression": {
															"id": 904,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 898,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 454,
																	"src": "9828:9:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 900,
																"indexExpression": {
																	"id": 899,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 861,
																	"src": "9838:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "9828:18:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 903,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 901,
																	"name": "accountBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 886,
																	"src": "9849:14:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 902,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 863,
																	"src": "9866:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "9849:23:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9828:44:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 905,
														"nodeType": "ExpressionStatement",
														"src": "9828:44:4"
													}
												]
											},
											{
												"expression": {
													"id": 909,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 907,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 462,
														"src": "9892:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"id": 908,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 863,
														"src": "9908:6:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9892:22:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 910,
												"nodeType": "ExpressionStatement",
												"src": "9892:22:4"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 912,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 861,
															"src": "9939:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 915,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9956:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 914,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9948:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 913,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9948:7:4",
																	"typeDescriptions": {}
																}
															},
															"id": 916,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9948:10:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 917,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 863,
															"src": "9960:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 911,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1058,
														"src": "9930:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 918,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9930:37:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 919,
												"nodeType": "EmitStatement",
												"src": "9925:42:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 921,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 861,
															"src": "9998:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 924,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10015:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 923,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10007:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 922,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "10007:7:4",
																	"typeDescriptions": {}
																}
															},
															"id": 925,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10007:10:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 926,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 863,
															"src": "10019:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 920,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1040,
														"src": "9978:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 927,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9978:48:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 928,
												"nodeType": "ExpressionStatement",
												"src": "9978:48:4"
											}
										]
									},
									"documentation": {
										"id": 859,
										"nodeType": "StructuredDocumentation",
										"src": "9143:309:4",
										"text": " @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."
									},
									"id": 930,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "9466:5:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 864,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 861,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "9480:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 930,
												"src": "9472:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 860,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9472:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 863,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "9497:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 930,
												"src": "9489:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 862,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9489:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9471:33:4"
									},
									"returnParameters": {
										"id": 865,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9522:0:4"
									},
									"scope": 1046,
									"src": "9457:576:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 974,
										"nodeType": "Block",
										"src": "10569:257:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 946,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 941,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 933,
																"src": "10587:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 944,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10604:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 943,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10596:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 942,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10596:7:4",
																		"typeDescriptions": {}
																	}
																},
																"id": 945,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10596:10:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10587:19:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
															"id": 947,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10608:38:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															},
															"value": "ERC20: approve from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															}
														],
														"id": 940,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10579:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 948,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10579:68:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 949,
												"nodeType": "ExpressionStatement",
												"src": "10579:68:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 956,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 951,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 935,
																"src": "10665:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 954,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10684:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 953,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10676:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 952,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10676:7:4",
																		"typeDescriptions": {}
																	}
																},
																"id": 955,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10676:10:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10665:21:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
															"id": 957,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10688:36:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															},
															"value": "ERC20: approve to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															}
														],
														"id": 950,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10657:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 958,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10657:68:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 959,
												"nodeType": "ExpressionStatement",
												"src": "10657:68:4"
											},
											{
												"expression": {
													"id": 966,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 960,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 460,
																"src": "10736:11:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 963,
															"indexExpression": {
																"id": 961,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 933,
																"src": "10748:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10736:18:4",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 964,
														"indexExpression": {
															"id": 962,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 935,
															"src": "10755:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10736:27:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 965,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 937,
														"src": "10766:6:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10736:36:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 967,
												"nodeType": "ExpressionStatement",
												"src": "10736:36:4"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 969,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 933,
															"src": "10796:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 970,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 935,
															"src": "10803:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 971,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 937,
															"src": "10812:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 968,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1067,
														"src": "10787:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 972,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10787:32:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 973,
												"nodeType": "EmitStatement",
												"src": "10782:37:4"
											}
										]
									},
									"documentation": {
										"id": 931,
										"nodeType": "StructuredDocumentation",
										"src": "10039:412:4",
										"text": " @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."
									},
									"id": 975,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "10465:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 938,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 933,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10491:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 975,
												"src": "10483:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 932,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10483:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 935,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10514:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 975,
												"src": "10506:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 934,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10506:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 937,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "10539:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 975,
												"src": "10531:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 936,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10531:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10473:78:4"
									},
									"returnParameters": {
										"id": 939,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10569:0:4"
									},
									"scope": 1046,
									"src": "10456:370:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1017,
										"nodeType": "Block",
										"src": "11227:321:4",
										"statements": [
											{
												"assignments": [
													986
												],
												"declarations": [
													{
														"constant": false,
														"id": 986,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "11245:16:4",
														"nodeType": "VariableDeclaration",
														"scope": 1017,
														"src": "11237:24:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 985,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11237:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 991,
												"initialValue": {
													"arguments": [
														{
															"id": 988,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 978,
															"src": "11274:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 989,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 980,
															"src": "11281:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 987,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 597,
														"src": "11264:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 990,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11264:25:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11237:52:4"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 998,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 992,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 986,
														"src": "11303:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 995,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "11328:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 994,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "11328:7:4",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 993,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "11323:4:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 996,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11323:13:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 997,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "11323:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11303:37:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1016,
												"nodeType": "IfStatement",
												"src": "11299:243:4",
												"trueBody": {
													"id": 1015,
													"nodeType": "Block",
													"src": "11342:200:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1002,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1000,
																			"name": "currentAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 986,
																			"src": "11364:16:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"id": 1001,
																			"name": "amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 982,
																			"src": "11384:6:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "11364:26:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"id": 1003,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11392:31:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		},
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		}
																	],
																	"id": 999,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "11356:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1004,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11356:68:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1005,
															"nodeType": "ExpressionStatement",
															"src": "11356:68:4"
														},
														{
															"id": 1014,
															"nodeType": "UncheckedBlock",
															"src": "11438:94:4",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 1007,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 978,
																				"src": "11475:5:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 1008,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 980,
																				"src": "11482:7:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1011,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1009,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 986,
																					"src": "11491:16:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 1010,
																					"name": "amount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 982,
																					"src": "11510:6:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11491:25:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 1006,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 975,
																			"src": "11466:8:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																				"typeString": "function (address,address,uint256)"
																			}
																		},
																		"id": 1012,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11466:51:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 1013,
																	"nodeType": "ExpressionStatement",
																	"src": "11466:51:4"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 976,
										"nodeType": "StructuredDocumentation",
										"src": "10832:270:4",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."
									},
									"id": 1018,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "11116:15:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 983,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 978,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "11149:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1018,
												"src": "11141:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 977,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11141:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 980,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "11172:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1018,
												"src": "11164:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 979,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11164:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 982,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "11197:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1018,
												"src": "11189:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 981,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11189:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11131:78:4"
									},
									"returnParameters": {
										"id": 984,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11227:0:4"
									},
									"scope": 1046,
									"src": "11107:441:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1028,
										"nodeType": "Block",
										"src": "12251:2:4",
										"statements": []
									},
									"documentation": {
										"id": 1019,
										"nodeType": "StructuredDocumentation",
										"src": "11554:573:4",
										"text": " @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 1029,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfer",
									"nameLocation": "12141:20:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1026,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1021,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "12179:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 1029,
												"src": "12171:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1020,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12171:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1023,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12201:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 1029,
												"src": "12193:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1022,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12193:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1025,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "12221:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1029,
												"src": "12213:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1024,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12213:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12161:72:4"
									},
									"returnParameters": {
										"id": 1027,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12251:0:4"
									},
									"scope": 1046,
									"src": "12132:121:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1039,
										"nodeType": "Block",
										"src": "12959:2:4",
										"statements": []
									},
									"documentation": {
										"id": 1030,
										"nodeType": "StructuredDocumentation",
										"src": "12259:577:4",
										"text": " @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 1040,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterTokenTransfer",
									"nameLocation": "12850:19:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1037,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1032,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "12887:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 1040,
												"src": "12879:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1031,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12879:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1034,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12909:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 1040,
												"src": "12901:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1033,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12901:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1036,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "12929:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1040,
												"src": "12921:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1035,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12921:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12869:72:4"
									},
									"returnParameters": {
										"id": 1038,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12959:0:4"
									},
									"scope": 1046,
									"src": "12841:120:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 1041,
										"nodeType": "StructuredDocumentation",
										"src": "12967:254:4",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 1045,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "13246:5:4",
									"nodeType": "VariableDeclaration",
									"scope": 1046,
									"src": "13226:25:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$45_storage",
										"typeString": "uint256[45]"
									},
									"typeName": {
										"baseType": {
											"id": 1042,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "13226:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 1044,
										"length": {
											"hexValue": "3435",
											"id": 1043,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "13234:2:4",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_45_by_1",
												"typeString": "int_const 45"
											},
											"value": "45"
										},
										"nodeType": "ArrayTypeName",
										"src": "13226:11:4",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$45_storage_ptr",
											"typeString": "uint256[45]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 1047,
							"src": "1482:11772:4",
							"usedErrors": []
						}
					],
					"src": "105:13150:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol",
					"exportedSymbols": {
						"IERC20Upgradeable": [
							1124
						]
					},
					"id": 1125,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1048,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1049,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:5",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 1124,
							"linearizedBaseContracts": [
								1124
							],
							"name": "IERC20Upgradeable",
							"nameLocation": "212:17:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 1050,
										"nodeType": "StructuredDocumentation",
										"src": "236:158:5",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 1058,
									"name": "Transfer",
									"nameLocation": "405:8:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1057,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1052,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "430:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1058,
												"src": "414:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1051,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "414:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1054,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "452:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 1058,
												"src": "436:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1053,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "436:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1056,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "464:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1058,
												"src": "456:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1055,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "456:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "413:57:5"
									},
									"src": "399:72:5"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1059,
										"nodeType": "StructuredDocumentation",
										"src": "477:148:5",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 1067,
									"name": "Approval",
									"nameLocation": "636:8:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1066,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1061,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "661:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1067,
												"src": "645:21:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1060,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "645:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1063,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "684:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1067,
												"src": "668:23:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1062,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "668:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1065,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "701:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1067,
												"src": "693:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1064,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "644:63:5"
									},
									"src": "630:78:5"
								},
								{
									"documentation": {
										"id": 1068,
										"nodeType": "StructuredDocumentation",
										"src": "714:66:5",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 1073,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "794:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1069,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "805:2:5"
									},
									"returnParameters": {
										"id": 1072,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1071,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1073,
												"src": "831:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1070,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "831:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "830:9:5"
									},
									"scope": 1124,
									"src": "785:55:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1074,
										"nodeType": "StructuredDocumentation",
										"src": "846:72:5",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 1081,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "932:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1077,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1076,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "950:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1081,
												"src": "942:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1075,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "942:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "941:17:5"
									},
									"returnParameters": {
										"id": 1080,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1079,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1081,
												"src": "982:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1078,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "982:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "981:9:5"
									},
									"scope": 1124,
									"src": "923:68:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1082,
										"nodeType": "StructuredDocumentation",
										"src": "997:202:5",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 1091,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1213:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1087,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1084,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1230:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 1091,
												"src": "1222:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1083,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1222:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1086,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1242:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1091,
												"src": "1234:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1085,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1234:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1221:28:5"
									},
									"returnParameters": {
										"id": 1090,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1089,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1091,
												"src": "1268:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1088,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1268:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1267:6:5"
									},
									"scope": 1124,
									"src": "1204:70:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1092,
										"nodeType": "StructuredDocumentation",
										"src": "1280:264:5",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 1101,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1558:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1097,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1094,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1576:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1101,
												"src": "1568:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1093,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1568:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1096,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1591:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1101,
												"src": "1583:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1095,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1583:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1567:32:5"
									},
									"returnParameters": {
										"id": 1100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1099,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1101,
												"src": "1623:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1098,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1623:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1622:9:5"
									},
									"scope": 1124,
									"src": "1549:83:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1102,
										"nodeType": "StructuredDocumentation",
										"src": "1638:642:5",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 1111,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2294:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1107,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1104,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2310:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1111,
												"src": "2302:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1103,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2302:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1106,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2327:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1111,
												"src": "2319:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1105,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2319:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2301:33:5"
									},
									"returnParameters": {
										"id": 1110,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1109,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1111,
												"src": "2353:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1108,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2353:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2352:6:5"
									},
									"scope": 1124,
									"src": "2285:74:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1112,
										"nodeType": "StructuredDocumentation",
										"src": "2365:287:5",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 1123,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2666:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1119,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1114,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2696:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1123,
												"src": "2688:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1113,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2688:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1116,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2718:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 1123,
												"src": "2710:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1115,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2710:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1118,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2738:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1123,
												"src": "2730:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1117,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2730:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2678:72:5"
									},
									"returnParameters": {
										"id": 1122,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1121,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1123,
												"src": "2769:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1120,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2769:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2768:6:5"
									},
									"scope": 1124,
									"src": "2657:118:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1125,
							"src": "202:2575:5",
							"usedErrors": []
						}
					],
					"src": "106:2672:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol",
					"exportedSymbols": {
						"IERC20MetadataUpgradeable": [
							1149
						],
						"IERC20Upgradeable": [
							1124
						]
					},
					"id": 1150,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1126,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "110:23:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol",
							"file": "../IERC20Upgradeable.sol",
							"id": 1127,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1150,
							"sourceUnit": 1125,
							"src": "135:34:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1129,
										"name": "IERC20Upgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1124,
										"src": "327:17:6"
									},
									"id": 1130,
									"nodeType": "InheritanceSpecifier",
									"src": "327:17:6"
								}
							],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1128,
								"nodeType": "StructuredDocumentation",
								"src": "171:116:6",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"
							},
							"fullyImplemented": false,
							"id": 1149,
							"linearizedBaseContracts": [
								1149,
								1124
							],
							"name": "IERC20MetadataUpgradeable",
							"nameLocation": "298:25:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1131,
										"nodeType": "StructuredDocumentation",
										"src": "351:54:6",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 1136,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "419:4:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1132,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "423:2:6"
									},
									"returnParameters": {
										"id": 1135,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1134,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1136,
												"src": "449:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1133,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "449:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "448:15:6"
									},
									"scope": 1149,
									"src": "410:54:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1137,
										"nodeType": "StructuredDocumentation",
										"src": "470:56:6",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 1142,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "540:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1138,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "546:2:6"
									},
									"returnParameters": {
										"id": 1141,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1140,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1142,
												"src": "572:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1139,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "572:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "571:15:6"
									},
									"scope": 1149,
									"src": "531:56:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1143,
										"nodeType": "StructuredDocumentation",
										"src": "593:65:6",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 1148,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "672:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1144,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "680:2:6"
									},
									"returnParameters": {
										"id": 1147,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1146,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1148,
												"src": "706:5:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1145,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "706:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "705:7:6"
									},
									"scope": 1149,
									"src": "663:50:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1150,
							"src": "288:427:6",
							"usedErrors": []
						}
					],
					"src": "110:606:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol",
					"exportedSymbols": {
						"IERC165Upgradeable": [
							1593
						],
						"IERC721Upgradeable": [
							1265
						]
					},
					"id": 1266,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1151,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:7"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol",
							"file": "../../utils/introspection/IERC165Upgradeable.sol",
							"id": 1152,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1266,
							"sourceUnit": 1594,
							"src": "133:58:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1154,
										"name": "IERC165Upgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1593,
										"src": "293:18:7"
									},
									"id": 1155,
									"nodeType": "InheritanceSpecifier",
									"src": "293:18:7"
								}
							],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1153,
								"nodeType": "StructuredDocumentation",
								"src": "193:67:7",
								"text": " @dev Required interface of an ERC721 compliant contract."
							},
							"fullyImplemented": false,
							"id": 1265,
							"linearizedBaseContracts": [
								1265,
								1593
							],
							"name": "IERC721Upgradeable",
							"nameLocation": "271:18:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 1156,
										"nodeType": "StructuredDocumentation",
										"src": "318:88:7",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"id": 1164,
									"name": "Transfer",
									"nameLocation": "417:8:7",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1163,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1158,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "442:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1164,
												"src": "426:20:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1157,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "426:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1160,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "464:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 1164,
												"src": "448:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1159,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "448:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1162,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "484:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1164,
												"src": "468:23:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1161,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "468:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "425:67:7"
									},
									"src": "411:82:7"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1165,
										"nodeType": "StructuredDocumentation",
										"src": "499:94:7",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"id": 1173,
									"name": "Approval",
									"nameLocation": "604:8:7",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1172,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1167,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "629:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1173,
												"src": "613:21:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1166,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "613:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1169,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "652:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 1173,
												"src": "636:24:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1168,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "636:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1171,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "678:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1173,
												"src": "662:23:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1170,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "662:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "612:74:7"
									},
									"src": "598:89:7"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1174,
										"nodeType": "StructuredDocumentation",
										"src": "693:117:7",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"id": 1182,
									"name": "ApprovalForAll",
									"nameLocation": "821:14:7",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1181,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1176,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "852:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1182,
												"src": "836:21:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1175,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "836:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1178,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "875:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 1182,
												"src": "859:24:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1177,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "859:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1180,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "890:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 1182,
												"src": "885:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1179,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "885:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "835:64:7"
									},
									"src": "815:85:7"
								},
								{
									"documentation": {
										"id": 1183,
										"nodeType": "StructuredDocumentation",
										"src": "906:76:7",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 1190,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "996:9:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1186,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1185,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1014:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1190,
												"src": "1006:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1184,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1006:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1005:15:7"
									},
									"returnParameters": {
										"id": 1189,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1188,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "1052:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1190,
												"src": "1044:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1187,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1044:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1043:17:7"
									},
									"scope": 1265,
									"src": "987:74:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1191,
										"nodeType": "StructuredDocumentation",
										"src": "1067:131:7",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 1198,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "1212:7:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1194,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1193,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1228:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1198,
												"src": "1220:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1192,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1220:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1219:17:7"
									},
									"returnParameters": {
										"id": 1197,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1196,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1268:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1198,
												"src": "1260:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1195,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1260:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1259:15:7"
									},
									"scope": 1265,
									"src": "1203:72:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1199,
										"nodeType": "StructuredDocumentation",
										"src": "1281:556:7",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "b88d4fde",
									"id": 1210,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1851:16:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1208,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1201,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1885:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1210,
												"src": "1877:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1200,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1877:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1203,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1907:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 1210,
												"src": "1899:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1202,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1899:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1205,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1927:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1210,
												"src": "1919:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1204,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1919:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1207,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1959:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1210,
												"src": "1944:19:7",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1206,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1944:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1867:102:7"
									},
									"returnParameters": {
										"id": 1209,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1978:0:7"
									},
									"scope": 1265,
									"src": "1842:137:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1211,
										"nodeType": "StructuredDocumentation",
										"src": "1985:690:7",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "42842e0e",
									"id": 1220,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "2689:16:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1218,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1213,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2723:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1220,
												"src": "2715:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1212,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2715:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1215,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2745:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 1220,
												"src": "2737:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1214,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2737:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1217,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2765:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1220,
												"src": "2757:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1216,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2757:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2705:73:7"
									},
									"returnParameters": {
										"id": 1219,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2787:0:7"
									},
									"scope": 1265,
									"src": "2680:108:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1221,
										"nodeType": "StructuredDocumentation",
										"src": "2794:504:7",
										"text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 1230,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "3312:12:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1228,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1223,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "3342:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1230,
												"src": "3334:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1222,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3334:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1225,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3364:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 1230,
												"src": "3356:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1224,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3356:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1227,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3384:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1230,
												"src": "3376:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1226,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3376:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3324:73:7"
									},
									"returnParameters": {
										"id": 1229,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3406:0:7"
									},
									"scope": 1265,
									"src": "3303:104:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1231,
										"nodeType": "StructuredDocumentation",
										"src": "3413:452:7",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 1238,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "3879:7:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1236,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1233,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3895:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 1238,
												"src": "3887:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1232,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3887:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1235,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3907:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1238,
												"src": "3899:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1234,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3899:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3886:29:7"
									},
									"returnParameters": {
										"id": 1237,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3924:0:7"
									},
									"scope": 1265,
									"src": "3870:55:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1239,
										"nodeType": "StructuredDocumentation",
										"src": "3931:309:7",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 1246,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "4254:17:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1244,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1241,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4280:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 1246,
												"src": "4272:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1240,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4272:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1243,
												"mutability": "mutable",
												"name": "_approved",
												"nameLocation": "4295:9:7",
												"nodeType": "VariableDeclaration",
												"scope": 1246,
												"src": "4290:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1242,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4290:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4271:34:7"
									},
									"returnParameters": {
										"id": 1245,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4314:0:7"
									},
									"scope": 1265,
									"src": "4245:70:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1247,
										"nodeType": "StructuredDocumentation",
										"src": "4321:139:7",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 1254,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "4474:11:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1250,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1249,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4494:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1254,
												"src": "4486:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1248,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4486:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4485:17:7"
									},
									"returnParameters": {
										"id": 1253,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1252,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4534:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 1254,
												"src": "4526:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1251,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4526:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4525:18:7"
									},
									"scope": 1265,
									"src": "4465:79:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1255,
										"nodeType": "StructuredDocumentation",
										"src": "4550:138:7",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 1264,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "4702:16:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1260,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1257,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4727:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1264,
												"src": "4719:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1256,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4719:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1259,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4742:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 1264,
												"src": "4734:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1258,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4734:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4718:33:7"
									},
									"returnParameters": {
										"id": 1263,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1262,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1264,
												"src": "4775:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1261,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4775:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4774:6:7"
									},
									"scope": 1265,
									"src": "4693:88:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1266,
							"src": "261:4522:7",
							"usedErrors": []
						}
					],
					"src": "108:4676:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol",
					"exportedSymbols": {
						"IERC165Upgradeable": [
							1593
						],
						"IERC721EnumerableUpgradeable": [
							1296
						],
						"IERC721Upgradeable": [
							1265
						]
					},
					"id": 1297,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1267,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "129:23:8"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol",
							"file": "../IERC721Upgradeable.sol",
							"id": 1268,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1297,
							"sourceUnit": 1266,
							"src": "154:35:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1270,
										"name": "IERC721Upgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1265,
										"src": "370:18:8"
									},
									"id": 1271,
									"nodeType": "InheritanceSpecifier",
									"src": "370:18:8"
								}
							],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1269,
								"nodeType": "StructuredDocumentation",
								"src": "191:136:8",
								"text": " @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
							},
							"fullyImplemented": false,
							"id": 1296,
							"linearizedBaseContracts": [
								1296,
								1265,
								1593
							],
							"name": "IERC721EnumerableUpgradeable",
							"nameLocation": "338:28:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1272,
										"nodeType": "StructuredDocumentation",
										"src": "395:82:8",
										"text": " @dev Returns the total amount of tokens stored by the contract."
									},
									"functionSelector": "18160ddd",
									"id": 1277,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "491:11:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1273,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "502:2:8"
									},
									"returnParameters": {
										"id": 1276,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1275,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1277,
												"src": "528:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1274,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "528:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "527:9:8"
									},
									"scope": 1296,
									"src": "482:55:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1278,
										"nodeType": "StructuredDocumentation",
										"src": "543:171:8",
										"text": " @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
									},
									"functionSelector": "2f745c59",
									"id": 1287,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenOfOwnerByIndex",
									"nameLocation": "728:19:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1283,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1280,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "756:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1287,
												"src": "748:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1279,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "748:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1282,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "771:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1287,
												"src": "763:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1281,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "763:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "747:30:8"
									},
									"returnParameters": {
										"id": 1286,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1285,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1287,
												"src": "801:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1284,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "801:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "800:9:8"
									},
									"scope": 1296,
									"src": "719:91:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1288,
										"nodeType": "StructuredDocumentation",
										"src": "816:164:8",
										"text": " @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n Use along with {totalSupply} to enumerate all tokens."
									},
									"functionSelector": "4f6ccce7",
									"id": 1295,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenByIndex",
									"nameLocation": "994:12:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1291,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1290,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "1015:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1295,
												"src": "1007:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1289,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1007:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1006:15:8"
									},
									"returnParameters": {
										"id": 1294,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1293,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1295,
												"src": "1045:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1292,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1045:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1044:9:8"
									},
									"scope": 1296,
									"src": "985:69:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1297,
							"src": "328:728:8",
							"usedErrors": []
						}
					],
					"src": "129:928:8"
				},
				"id": 8
			},
			"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1539
						]
					},
					"id": 1540,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1298,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1299,
								"nodeType": "StructuredDocumentation",
								"src": "126:67:9",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 1539,
							"linearizedBaseContracts": [
								1539
							],
							"name": "AddressUpgradeable",
							"nameLocation": "202:18:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1313,
										"nodeType": "Block",
										"src": "1252:254:9",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1311,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 1307,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1302,
																"src": "1476:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1308,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1476:12:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1309,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1476:19:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1310,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1498:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1476:23:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1306,
												"id": 1312,
												"nodeType": "Return",
												"src": "1469:30:9"
											}
										]
									},
									"documentation": {
										"id": 1300,
										"nodeType": "StructuredDocumentation",
										"src": "227:954:9",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 1314,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1195:10:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1303,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1302,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1214:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1314,
												"src": "1206:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1301,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1206:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1205:17:9"
									},
									"returnParameters": {
										"id": 1306,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1305,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1314,
												"src": "1246:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1304,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1246:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1245:6:9"
									},
									"scope": 1539,
									"src": "1186:320:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1347,
										"nodeType": "Block",
										"src": "2494:241:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1329,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1325,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2520:4:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$1539",
																				"typeString": "library AddressUpgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$1539",
																				"typeString": "library AddressUpgradeable"
																			}
																		],
																		"id": 1324,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2512:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1323,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2512:7:9",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1326,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2512:13:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 1327,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2512:21:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1328,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1319,
																"src": "2537:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2512:31:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 1330,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2545:31:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 1322,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2504:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1331,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2504:73:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1332,
												"nodeType": "ExpressionStatement",
												"src": "2504:73:9"
											},
											{
												"assignments": [
													1334,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 1334,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2594:7:9",
														"nodeType": "VariableDeclaration",
														"scope": 1347,
														"src": "2589:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1333,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2589:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 1341,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 1339,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2637:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 1335,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1317,
																"src": "2607:9:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 1336,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2607:14:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 1338,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 1337,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1319,
																"src": "2629:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2607:29:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1340,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2607:33:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2588:52:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1343,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1334,
															"src": "2658:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 1344,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2667:60:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 1342,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2650:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1345,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2650:78:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1346,
												"nodeType": "ExpressionStatement",
												"src": "2650:78:9"
											}
										]
									},
									"documentation": {
										"id": 1315,
										"nodeType": "StructuredDocumentation",
										"src": "1512:906:9",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 1348,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2432:9:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1320,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1317,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2458:9:9",
												"nodeType": "VariableDeclaration",
												"scope": 1348,
												"src": "2442:25:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 1316,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2442:15:9",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1319,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2477:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 1348,
												"src": "2469:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1318,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2469:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2441:43:9"
									},
									"returnParameters": {
										"id": 1321,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2494:0:9"
									},
									"scope": 1539,
									"src": "2423:312:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1364,
										"nodeType": "Block",
										"src": "3566:84:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1359,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1351,
															"src": "3596:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1360,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1353,
															"src": "3604:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 1361,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3610:32:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 1358,
														"name": "functionCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1365,
															1385
														],
														"referencedDeclaration": 1385,
														"src": "3583:12:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 1362,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3583:60:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1357,
												"id": 1363,
												"nodeType": "Return",
												"src": "3576:67:9"
											}
										]
									},
									"documentation": {
										"id": 1349,
										"nodeType": "StructuredDocumentation",
										"src": "2741:731:9",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 1365,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3486:12:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1354,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1351,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3507:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 1365,
												"src": "3499:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1350,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3499:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1353,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3528:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1365,
												"src": "3515:17:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1352,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3515:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3498:35:9"
									},
									"returnParameters": {
										"id": 1357,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1356,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1365,
												"src": "3552:12:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1355,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3552:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3551:14:9"
									},
									"scope": 1539,
									"src": "3477:173:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1384,
										"nodeType": "Block",
										"src": "4019:76:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1378,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1368,
															"src": "4058:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1379,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1370,
															"src": "4066:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 1380,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4072:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 1381,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1372,
															"src": "4075:12:9",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1377,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1405,
															1455
														],
														"referencedDeclaration": 1455,
														"src": "4036:21:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 1382,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4036:52:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1376,
												"id": 1383,
												"nodeType": "Return",
												"src": "4029:59:9"
											}
										]
									},
									"documentation": {
										"id": 1366,
										"nodeType": "StructuredDocumentation",
										"src": "3656:211:9",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 1385,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3881:12:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1373,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1368,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3911:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 1385,
												"src": "3903:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1367,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3903:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1370,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3940:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1385,
												"src": "3927:17:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1369,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3927:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1372,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "3968:12:9",
												"nodeType": "VariableDeclaration",
												"scope": 1385,
												"src": "3954:26:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1371,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3954:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3893:93:9"
									},
									"returnParameters": {
										"id": 1376,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1375,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1385,
												"src": "4005:12:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1374,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4005:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4004:14:9"
									},
									"scope": 1539,
									"src": "3872:223:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1404,
										"nodeType": "Block",
										"src": "4600:111:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1398,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1388,
															"src": "4639:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1399,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1390,
															"src": "4647:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1400,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1392,
															"src": "4653:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 1401,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4660:43:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 1397,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1405,
															1455
														],
														"referencedDeclaration": 1455,
														"src": "4617:21:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 1402,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4617:87:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1396,
												"id": 1403,
												"nodeType": "Return",
												"src": "4610:94:9"
											}
										]
									},
									"documentation": {
										"id": 1386,
										"nodeType": "StructuredDocumentation",
										"src": "4101:351:9",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 1405,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4466:21:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1393,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1388,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4505:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 1405,
												"src": "4497:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1387,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4497:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1390,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4534:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1405,
												"src": "4521:17:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1389,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4521:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1392,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4556:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1405,
												"src": "4548:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1391,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4548:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4487:80:9"
									},
									"returnParameters": {
										"id": 1396,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1395,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1405,
												"src": "4586:12:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1394,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4586:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4585:14:9"
									},
									"scope": 1539,
									"src": "4457:254:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1454,
										"nodeType": "Block",
										"src": "5138:320:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1426,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1422,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5164:4:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$1539",
																				"typeString": "library AddressUpgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$1539",
																				"typeString": "library AddressUpgradeable"
																			}
																		],
																		"id": 1421,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5156:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1420,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5156:7:9",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1423,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5156:13:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 1424,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5156:21:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1425,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1412,
																"src": "5181:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5156:30:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 1427,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5188:40:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 1419,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5148:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1428,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5148:81:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1429,
												"nodeType": "ExpressionStatement",
												"src": "5148:81:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1432,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1408,
																	"src": "5258:6:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1431,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1314,
																"src": "5247:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 1433,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5247:18:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 1434,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5267:31:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															},
															"value": "Address: call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															}
														],
														"id": 1430,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5239:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1435,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5239:60:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1436,
												"nodeType": "ExpressionStatement",
												"src": "5239:60:9"
											},
											{
												"assignments": [
													1438,
													1440
												],
												"declarations": [
													{
														"constant": false,
														"id": 1438,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5316:7:9",
														"nodeType": "VariableDeclaration",
														"scope": 1454,
														"src": "5311:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1437,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5311:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1440,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5338:10:9",
														"nodeType": "VariableDeclaration",
														"scope": 1454,
														"src": "5325:23:9",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1439,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5325:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1447,
												"initialValue": {
													"arguments": [
														{
															"id": 1445,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1410,
															"src": "5378:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 1441,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1408,
																"src": "5352:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1442,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5352:11:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 1444,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 1443,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1412,
																"src": "5371:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5352:25:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1446,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5352:31:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5310:73:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1449,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1438,
															"src": "5417:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1450,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1440,
															"src": "5426:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1451,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1414,
															"src": "5438:12:9",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1448,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1538,
														"src": "5400:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 1452,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5400:51:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1418,
												"id": 1453,
												"nodeType": "Return",
												"src": "5393:58:9"
											}
										]
									},
									"documentation": {
										"id": 1406,
										"nodeType": "StructuredDocumentation",
										"src": "4717:237:9",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 1455,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4968:21:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1415,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1408,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5007:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 1455,
												"src": "4999:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1407,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4999:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1410,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5036:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1455,
												"src": "5023:17:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1409,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5023:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1412,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5058:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1455,
												"src": "5050:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1411,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5050:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1414,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5087:12:9",
												"nodeType": "VariableDeclaration",
												"scope": 1455,
												"src": "5073:26:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1413,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5073:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4989:116:9"
									},
									"returnParameters": {
										"id": 1418,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1417,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1455,
												"src": "5124:12:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1416,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5124:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5123:14:9"
									},
									"scope": 1539,
									"src": "4959:499:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1471,
										"nodeType": "Block",
										"src": "5735:97:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1466,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1458,
															"src": "5771:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1467,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1460,
															"src": "5779:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 1468,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5785:39:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 1465,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1472,
															1507
														],
														"referencedDeclaration": 1507,
														"src": "5752:18:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 1469,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5752:73:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1464,
												"id": 1470,
												"nodeType": "Return",
												"src": "5745:80:9"
											}
										]
									},
									"documentation": {
										"id": 1456,
										"nodeType": "StructuredDocumentation",
										"src": "5464:166:9",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 1472,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5644:18:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1461,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1458,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5671:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 1472,
												"src": "5663:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1457,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5663:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1460,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5692:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1472,
												"src": "5679:17:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1459,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5679:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5662:35:9"
									},
									"returnParameters": {
										"id": 1464,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1463,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1472,
												"src": "5721:12:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1462,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5721:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5720:14:9"
									},
									"scope": 1539,
									"src": "5635:197:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1506,
										"nodeType": "Block",
										"src": "6174:228:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1486,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1475,
																	"src": "6203:6:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1485,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1314,
																"src": "6192:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 1487,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6192:18:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 1488,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6212:38:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															},
															"value": "Address: static call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															}
														],
														"id": 1484,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6184:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1489,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6184:67:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1490,
												"nodeType": "ExpressionStatement",
												"src": "6184:67:9"
											},
											{
												"assignments": [
													1492,
													1494
												],
												"declarations": [
													{
														"constant": false,
														"id": 1492,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6268:7:9",
														"nodeType": "VariableDeclaration",
														"scope": 1506,
														"src": "6263:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1491,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6263:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1494,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6290:10:9",
														"nodeType": "VariableDeclaration",
														"scope": 1506,
														"src": "6277:23:9",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1493,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6277:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1499,
												"initialValue": {
													"arguments": [
														{
															"id": 1497,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1477,
															"src": "6322:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1495,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1475,
															"src": "6304:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1496,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6304:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 1498,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6304:23:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6262:65:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1501,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1492,
															"src": "6361:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1502,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1494,
															"src": "6370:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1503,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1479,
															"src": "6382:12:9",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1500,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1538,
														"src": "6344:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 1504,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6344:51:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1483,
												"id": 1505,
												"nodeType": "Return",
												"src": "6337:58:9"
											}
										]
									},
									"documentation": {
										"id": 1473,
										"nodeType": "StructuredDocumentation",
										"src": "5838:173:9",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 1507,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "6025:18:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1480,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1475,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6061:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 1507,
												"src": "6053:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1474,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6053:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1477,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6090:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1507,
												"src": "6077:17:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1476,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6077:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1479,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6118:12:9",
												"nodeType": "VariableDeclaration",
												"scope": 1507,
												"src": "6104:26:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1478,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6104:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6043:93:9"
									},
									"returnParameters": {
										"id": 1483,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1482,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1507,
												"src": "6160:12:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1481,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6160:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6159:14:9"
									},
									"scope": 1539,
									"src": "6016:386:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1537,
										"nodeType": "Block",
										"src": "6782:532:9",
										"statements": [
											{
												"condition": {
													"id": 1519,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1510,
													"src": "6796:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1535,
													"nodeType": "Block",
													"src": "6853:455:9",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1526,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1523,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1512,
																		"src": "6937:10:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1524,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "6937:17:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1525,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6957:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "6937:21:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 1533,
																"nodeType": "Block",
																"src": "7245:53:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 1530,
																					"name": "errorMessage",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1514,
																					"src": "7270:12:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				],
																				"id": 1529,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967277,
																					4294967277
																				],
																				"referencedDeclaration": 4294967277,
																				"src": "7263:6:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 1531,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7263:20:9",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1532,
																		"nodeType": "ExpressionStatement",
																		"src": "7263:20:9"
																	}
																]
															},
															"id": 1534,
															"nodeType": "IfStatement",
															"src": "6933:365:9",
															"trueBody": {
																"id": 1528,
																"nodeType": "Block",
																"src": "6960:279:9",
																"statements": [
																	{
																		"AST": {
																			"nodeType": "YulBlock",
																			"src": "7080:145:9",
																			"statements": [
																				{
																					"nodeType": "YulVariableDeclaration",
																					"src": "7102:40:9",
																					"value": {
																						"arguments": [
																							{
																								"name": "returndata",
																								"nodeType": "YulIdentifier",
																								"src": "7131:10:9"
																							}
																						],
																						"functionName": {
																							"name": "mload",
																							"nodeType": "YulIdentifier",
																							"src": "7125:5:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7125:17:9"
																					},
																					"variables": [
																						{
																							"name": "returndata_size",
																							"nodeType": "YulTypedName",
																							"src": "7106:15:9",
																							"type": ""
																						}
																					]
																				},
																				{
																					"expression": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "7174:2:9",
																										"type": "",
																										"value": "32"
																									},
																									{
																										"name": "returndata",
																										"nodeType": "YulIdentifier",
																										"src": "7178:10:9"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "7170:3:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "7170:19:9"
																							},
																							{
																								"name": "returndata_size",
																								"nodeType": "YulIdentifier",
																								"src": "7191:15:9"
																							}
																						],
																						"functionName": {
																							"name": "revert",
																							"nodeType": "YulIdentifier",
																							"src": "7163:6:9"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7163:44:9"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "7163:44:9"
																				}
																			]
																		},
																		"evmVersion": "istanbul",
																		"externalReferences": [
																			{
																				"declaration": 1512,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "7131:10:9",
																				"valueSize": 1
																			},
																			{
																				"declaration": 1512,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "7178:10:9",
																				"valueSize": 1
																			}
																		],
																		"id": 1527,
																		"nodeType": "InlineAssembly",
																		"src": "7071:154:9"
																	}
																]
															}
														}
													]
												},
												"id": 1536,
												"nodeType": "IfStatement",
												"src": "6792:516:9",
												"trueBody": {
													"id": 1522,
													"nodeType": "Block",
													"src": "6805:42:9",
													"statements": [
														{
															"expression": {
																"id": 1520,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1512,
																"src": "6826:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 1518,
															"id": 1521,
															"nodeType": "Return",
															"src": "6819:17:9"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1508,
										"nodeType": "StructuredDocumentation",
										"src": "6408:209:9",
										"text": " @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason using the provided one.\n _Available since v4.3._"
									},
									"id": 1538,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "6631:16:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1515,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1510,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "6662:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1538,
												"src": "6657:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1509,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6657:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1512,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "6692:10:9",
												"nodeType": "VariableDeclaration",
												"scope": 1538,
												"src": "6679:23:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1511,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6679:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1514,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6726:12:9",
												"nodeType": "VariableDeclaration",
												"scope": 1538,
												"src": "6712:26:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1513,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6712:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6647:97:9"
									},
									"returnParameters": {
										"id": 1518,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1517,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1538,
												"src": "6768:12:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1516,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6768:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6767:14:9"
									},
									"scope": 1539,
									"src": "6622:692:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1540,
							"src": "194:7122:9",
							"usedErrors": []
						}
					],
					"src": "101:7216:9"
				},
				"id": 9
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1539
						],
						"ContextUpgradeable": [
							1581
						],
						"Initializable": [
							265
						]
					},
					"id": 1582,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1541,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:10"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 1542,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1582,
							"sourceUnit": 266,
							"src": "110:42:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1544,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 265,
										"src": "691:13:10"
									},
									"id": 1545,
									"nodeType": "InheritanceSpecifier",
									"src": "691:13:10"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1543,
								"nodeType": "StructuredDocumentation",
								"src": "154:496:10",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 1581,
							"linearizedBaseContracts": [
								1581,
								265
							],
							"name": "ContextUpgradeable",
							"nameLocation": "669:18:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1550,
										"nodeType": "Block",
										"src": "763:7:10",
										"statements": []
									},
									"id": 1551,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1548,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1547,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 208,
												"src": "746:16:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "746:16:10"
										}
									],
									"name": "__Context_init",
									"nameLocation": "720:14:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1546,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "734:2:10"
									},
									"returnParameters": {
										"id": 1549,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "763:0:10"
									},
									"scope": 1581,
									"src": "711:59:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1556,
										"nodeType": "Block",
										"src": "838:7:10",
										"statements": []
									},
									"id": 1557,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1554,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1553,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 208,
												"src": "821:16:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "821:16:10"
										}
									],
									"name": "__Context_init_unchained",
									"nameLocation": "785:24:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1552,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "809:2:10"
									},
									"returnParameters": {
										"id": 1555,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "838:0:10"
									},
									"scope": 1581,
									"src": "776:69:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1565,
										"nodeType": "Block",
										"src": "912:34:10",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1562,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "929:3:10",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1563,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "929:10:10",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1561,
												"id": 1564,
												"nodeType": "Return",
												"src": "922:17:10"
											}
										]
									},
									"id": 1566,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "859:10:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1558,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "869:2:10"
									},
									"returnParameters": {
										"id": 1561,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1560,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1566,
												"src": "903:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1559,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "903:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "902:9:10"
									},
									"scope": 1581,
									"src": "850:96:10",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1574,
										"nodeType": "Block",
										"src": "1019:32:10",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1571,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "1036:3:10",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1572,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "1036:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1570,
												"id": 1573,
												"nodeType": "Return",
												"src": "1029:15:10"
											}
										]
									},
									"id": 1575,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "961:8:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1567,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "969:2:10"
									},
									"returnParameters": {
										"id": 1570,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1569,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1575,
												"src": "1003:14:10",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1568,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1003:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1002:16:10"
									},
									"scope": 1581,
									"src": "952:99:10",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 1576,
										"nodeType": "StructuredDocumentation",
										"src": "1057:254:10",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 1580,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "1336:5:10",
									"nodeType": "VariableDeclaration",
									"scope": 1581,
									"src": "1316:25:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$50_storage",
										"typeString": "uint256[50]"
									},
									"typeName": {
										"baseType": {
											"id": 1577,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1316:7:10",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 1579,
										"length": {
											"hexValue": "3530",
											"id": 1578,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1324:2:10",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_50_by_1",
												"typeString": "int_const 50"
											},
											"value": "50"
										},
										"nodeType": "ArrayTypeName",
										"src": "1316:11:10",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
											"typeString": "uint256[50]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 1582,
							"src": "651:693:10",
							"usedErrors": []
						}
					],
					"src": "86:1259:10"
				},
				"id": 10
			},
			"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol",
					"exportedSymbols": {
						"IERC165Upgradeable": [
							1593
						]
					},
					"id": 1594,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1583,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:11"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1584,
								"nodeType": "StructuredDocumentation",
								"src": "125:279:11",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 1593,
							"linearizedBaseContracts": [
								1593
							],
							"name": "IERC165Upgradeable",
							"nameLocation": "415:18:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1585,
										"nodeType": "StructuredDocumentation",
										"src": "440:340:11",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 1592,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "794:17:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1588,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1587,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "819:11:11",
												"nodeType": "VariableDeclaration",
												"scope": 1592,
												"src": "812:18:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 1586,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "812:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "811:20:11"
									},
									"returnParameters": {
										"id": 1591,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1590,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1592,
												"src": "855:4:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1589,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "855:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "854:6:11"
									},
									"scope": 1593,
									"src": "785:76:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1594,
							"src": "405:458:11",
							"usedErrors": []
						}
					],
					"src": "100:764:11"
				},
				"id": 11
			},
			"contracts/interfaces/INFTCore.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/INFTCore.sol",
					"exportedSymbols": {
						"IERC165Upgradeable": [
							1593
						],
						"IERC721EnumerableUpgradeable": [
							1296
						],
						"IERC721Upgradeable": [
							1265
						],
						"INFTCore": [
							1636
						]
					},
					"id": 1637,
					"license": "Unlicense",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1595,
							"literals": [
								"solidity",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "116:22:12"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol",
							"id": 1596,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1637,
							"sourceUnit": 1297,
							"src": "142:102:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1597,
										"name": "IERC721EnumerableUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1296,
										"src": "280:28:12"
									},
									"id": 1598,
									"nodeType": "InheritanceSpecifier",
									"src": "280:28:12"
								}
							],
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 1636,
							"linearizedBaseContracts": [
								1636,
								1296,
								1265,
								1593
							],
							"name": "INFTCore",
							"nameLocation": "268:8:12",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "eacabe14",
									"id": 1607,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mintNFT",
									"nameLocation": "323:7:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1603,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1600,
												"mutability": "mutable",
												"name": "_recipient",
												"nameLocation": "339:10:12",
												"nodeType": "VariableDeclaration",
												"scope": 1607,
												"src": "331:18:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1599,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "331:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1602,
												"mutability": "mutable",
												"name": "_tokenURI",
												"nameLocation": "365:9:12",
												"nodeType": "VariableDeclaration",
												"scope": 1607,
												"src": "351:23:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1601,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "351:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "330:45:12"
									},
									"returnParameters": {
										"id": 1606,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1605,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1607,
												"src": "404:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1604,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "404:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "403:9:12"
									},
									"scope": 1636,
									"src": "314:99:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "cdb0e89e",
									"id": 1614,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setTokenName",
									"nameLocation": "428:12:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1612,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1609,
												"mutability": "mutable",
												"name": "_tokenId",
												"nameLocation": "449:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 1614,
												"src": "441:16:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1608,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "441:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1611,
												"mutability": "mutable",
												"name": "_tokenName",
												"nameLocation": "473:10:12",
												"nodeType": "VariableDeclaration",
												"scope": 1614,
												"src": "459:24:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1610,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "459:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "440:44:12"
									},
									"returnParameters": {
										"id": 1613,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "493:0:12"
									},
									"scope": 1636,
									"src": "419:75:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "cc724ce9",
									"id": 1621,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setTokenQuote",
									"nameLocation": "509:13:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1619,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1616,
												"mutability": "mutable",
												"name": "_tokenId",
												"nameLocation": "531:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 1621,
												"src": "523:16:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1615,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "523:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1618,
												"mutability": "mutable",
												"name": "_tokenQuote",
												"nameLocation": "555:11:12",
												"nodeType": "VariableDeclaration",
												"scope": 1621,
												"src": "541:25:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1617,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "541:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "522:45:12"
									},
									"returnParameters": {
										"id": 1620,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "576:0:12"
									},
									"scope": 1636,
									"src": "500:77:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "dbe16c07",
									"id": 1628,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getTokenName",
									"nameLocation": "846:12:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1624,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1623,
												"mutability": "mutable",
												"name": "_tokenId",
												"nameLocation": "867:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 1628,
												"src": "859:16:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1622,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "859:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "858:18:12"
									},
									"returnParameters": {
										"id": 1627,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1626,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1628,
												"src": "900:13:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1625,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "900:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "899:15:12"
									},
									"scope": 1636,
									"src": "837:78:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "2a177566",
									"id": 1635,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getTokenQuote",
									"nameLocation": "930:13:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1631,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1630,
												"mutability": "mutable",
												"name": "_tokenId",
												"nameLocation": "952:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 1635,
												"src": "944:16:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1629,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "944:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "943:18:12"
									},
									"returnParameters": {
										"id": 1634,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1633,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1635,
												"src": "1000:13:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1632,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1000:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "999:15:12"
									},
									"scope": 1636,
									"src": "921:94:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1637,
							"src": "258:760:12",
							"usedErrors": []
						}
					],
					"src": "116:904:12"
				},
				"id": 12
			},
			"contracts/tokens/Moola.sol": {
				"ast": {
					"absolutePath": "contracts/tokens/Moola.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1539
						],
						"ContextUpgradeable": [
							1581
						],
						"ERC20Upgradeable": [
							1046
						],
						"IERC165Upgradeable": [
							1593
						],
						"IERC20MetadataUpgradeable": [
							1149
						],
						"IERC20Upgradeable": [
							1124
						],
						"IERC721EnumerableUpgradeable": [
							1296
						],
						"IERC721Upgradeable": [
							1265
						],
						"INFTCore": [
							1636
						],
						"Initializable": [
							265
						],
						"Moola": [
							1846
						],
						"OwnableUpgradeable": [
							123
						],
						"PausableUpgradeable": [
							376
						],
						"ReentrancyGuardUpgradeable": [
							435
						]
					},
					"id": 1847,
					"license": "Unlicense",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1638,
							"literals": [
								"solidity",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "114:22:13"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
							"id": 1639,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1847,
							"sourceUnit": 1047,
							"src": "140:78:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol",
							"id": 1640,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1847,
							"sourceUnit": 436,
							"src": "220:85:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
							"id": 1641,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1847,
							"sourceUnit": 124,
							"src": "307:75:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol",
							"id": 1642,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1847,
							"sourceUnit": 377,
							"src": "384:78:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/INFTCore.sol",
							"file": "../interfaces/INFTCore.sol",
							"id": 1643,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1847,
							"sourceUnit": 1637,
							"src": "464:36:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1644,
										"name": "ERC20Upgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1046,
										"src": "580:16:13"
									},
									"id": 1645,
									"nodeType": "InheritanceSpecifier",
									"src": "580:16:13"
								},
								{
									"baseName": {
										"id": 1646,
										"name": "OwnableUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 123,
										"src": "598:18:13"
									},
									"id": 1647,
									"nodeType": "InheritanceSpecifier",
									"src": "598:18:13"
								},
								{
									"baseName": {
										"id": 1648,
										"name": "PausableUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 376,
										"src": "618:19:13"
									},
									"id": 1649,
									"nodeType": "InheritanceSpecifier",
									"src": "618:19:13"
								}
							],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1846,
							"linearizedBaseContracts": [
								1846,
								376,
								123,
								1046,
								1149,
								1124,
								1581,
								265
							],
							"name": "Moola",
							"nameLocation": "571:5:13",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 1651,
									"mutability": "mutable",
									"name": "dailyAllowance",
									"nameLocation": "660:14:13",
									"nodeType": "VariableDeclaration",
									"scope": 1846,
									"src": "643:31:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1650,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "643:7:13",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 1653,
									"mutability": "mutable",
									"name": "cooldown",
									"nameLocation": "698:8:13",
									"nodeType": "VariableDeclaration",
									"scope": 1846,
									"src": "681:25:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1652,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "681:7:13",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 1656,
									"mutability": "mutable",
									"name": "moolaNFT",
									"nameLocation": "751:8:13",
									"nodeType": "VariableDeclaration",
									"scope": 1846,
									"src": "713:46:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IERC721EnumerableUpgradeable_$1296",
										"typeString": "contract IERC721EnumerableUpgradeable"
									},
									"typeName": {
										"id": 1655,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1654,
											"name": "IERC721EnumerableUpgradeable",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1296,
											"src": "713:28:13"
										},
										"referencedDeclaration": 1296,
										"src": "713:28:13",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC721EnumerableUpgradeable_$1296",
											"typeString": "contract IERC721EnumerableUpgradeable"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 1660,
									"mutability": "mutable",
									"name": "whitelist",
									"nameLocation": "800:9:13",
									"nodeType": "VariableDeclaration",
									"scope": 1846,
									"src": "766:43:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
										"typeString": "mapping(address => bool)"
									},
									"typeName": {
										"id": 1659,
										"keyType": {
											"id": 1657,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "774:7:13",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "766:24:13",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
											"typeString": "mapping(address => bool)"
										},
										"valueType": {
											"id": 1658,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "785:4:13",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 1664,
									"mutability": "mutable",
									"name": "nftLastClaimed",
									"nameLocation": "851:14:13",
									"nodeType": "VariableDeclaration",
									"scope": 1846,
									"src": "814:51:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
										"typeString": "mapping(uint256 => uint256)"
									},
									"typeName": {
										"id": 1663,
										"keyType": {
											"id": 1661,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "822:7:13",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "814:27:13",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
											"typeString": "mapping(uint256 => uint256)"
										},
										"valueType": {
											"id": 1662,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "833:7:13",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1675,
										"nodeType": "Block",
										"src": "897:69:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"baseExpression": {
																"id": 1667,
																"name": "whitelist",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1660,
																"src": "912:9:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																	"typeString": "mapping(address => bool)"
																}
															},
															"id": 1670,
															"indexExpression": {
																"expression": {
																	"id": 1668,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "922:3:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1669,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "922:10:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "912:21:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f6e6c792077686974656c697374",
															"id": 1671,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "935:16:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_e456a8df821d58a81d00df5ff2bc8653f1a52a4771d0bdf36a4aa3f1bac56f7b",
																"typeString": "literal_string \"Only whitelist\""
															},
															"value": "Only whitelist"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_e456a8df821d58a81d00df5ff2bc8653f1a52a4771d0bdf36a4aa3f1bac56f7b",
																"typeString": "literal_string \"Only whitelist\""
															}
														],
														"id": 1666,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "904:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1672,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "904:48:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1673,
												"nodeType": "ExpressionStatement",
												"src": "904:48:13"
											},
											{
												"id": 1674,
												"nodeType": "PlaceholderStatement",
												"src": "959:1:13"
											}
										]
									},
									"id": 1676,
									"name": "onlyWhitelist",
									"nameLocation": "881:13:13",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1665,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "894:2:13"
									},
									"src": "872:94:13",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"anonymous": false,
									"id": 1684,
									"name": "dailyDairyClaimed",
									"nameLocation": "978:17:13",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1683,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1678,
												"indexed": false,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "1004:8:13",
												"nodeType": "VariableDeclaration",
												"scope": 1684,
												"src": "996:16:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1677,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "996:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1680,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1022:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 1684,
												"src": "1014:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1679,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1014:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1682,
												"indexed": false,
												"mutability": "mutable",
												"name": "time",
												"nameLocation": "1038:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 1684,
												"src": "1030:12:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1681,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1030:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "995:48:13"
									},
									"src": "972:72:13"
								},
								{
									"body": {
										"id": 1716,
										"nodeType": "Block",
										"src": "1148:161:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1694,
															"name": "name_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1686,
															"src": "1168:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"id": 1695,
															"name": "symbol_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1688,
															"src": "1175:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1693,
														"name": "__ERC20_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 482,
														"src": "1155:12:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (string memory,string memory)"
														}
													},
													"id": 1696,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1155:28:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1697,
												"nodeType": "ExpressionStatement",
												"src": "1155:28:13"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1698,
														"name": "__Ownable_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 26,
														"src": "1190:14:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 1699,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1190:16:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1700,
												"nodeType": "ExpressionStatement",
												"src": "1190:16:13"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1701,
														"name": "__Pausable_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 296,
														"src": "1213:15:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 1702,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1213:17:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1703,
												"nodeType": "ExpressionStatement",
												"src": "1213:17:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1705,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1245:3:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1706,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1245:10:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_rational_10000000000000000000000000000_by_1",
																"typeString": "int_const 10000000000000000000000000000"
															},
															"id": 1709,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "3130303030303030303030",
																"id": 1707,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1257:11:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000_by_1",
																	"typeString": "int_const 10000000000"
																},
																"value": "10000000000"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"hexValue": "31653138",
																"id": 1708,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1271:4:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000"
																},
																"value": "1e18"
															},
															"src": "1257:18:13",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_10000000000000000000000000000_by_1",
																"typeString": "int_const 10000000000000000000000000000"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_rational_10000000000000000000000000000_by_1",
																"typeString": "int_const 10000000000000000000000000000"
															}
														],
														"id": 1704,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 858,
														"src": "1239:5:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1710,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1239:37:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1711,
												"nodeType": "ExpressionStatement",
												"src": "1239:37:13"
											},
											{
												"expression": {
													"id": 1714,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1712,
														"name": "cooldown",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1653,
														"src": "1283:8:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 1713,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1294:9:13",
														"subdenomination": "minutes",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_60_by_1",
															"typeString": "int_const 60"
														},
														"value": "1"
													},
													"src": "1283:20:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1715,
												"nodeType": "ExpressionStatement",
												"src": "1283:20:13"
											}
										]
									},
									"functionSelector": "4cd88b76",
									"id": 1717,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1691,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1690,
												"name": "initializer",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 167,
												"src": "1133:11:13"
											},
											"nodeType": "ModifierInvocation",
											"src": "1133:11:13"
										}
									],
									"name": "initialize",
									"nameLocation": "1059:10:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1689,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1686,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "1084:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1717,
												"src": "1070:19:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1685,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1070:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1688,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "1105:7:13",
												"nodeType": "VariableDeclaration",
												"scope": 1717,
												"src": "1091:21:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1687,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1091:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1069:44:13"
									},
									"returnParameters": {
										"id": 1692,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1148:0:13"
									},
									"scope": 1846,
									"src": "1050:259:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1730,
										"nodeType": "Block",
										"src": "1376:41:13",
										"statements": [
											{
												"expression": {
													"id": 1728,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1724,
															"name": "whitelist",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1660,
															"src": "1383:9:13",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 1726,
														"indexExpression": {
															"id": 1725,
															"name": "_whitelist",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1719,
															"src": "1393:10:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1383:21:13",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 1727,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1407:4:13",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "1383:28:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1729,
												"nodeType": "ExpressionStatement",
												"src": "1383:28:13"
											}
										]
									},
									"functionSelector": "854cff2f",
									"id": 1731,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1722,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1721,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 60,
												"src": "1366:9:13"
											},
											"nodeType": "ModifierInvocation",
											"src": "1366:9:13"
										}
									],
									"name": "setWhitelist",
									"nameLocation": "1324:12:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1720,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1719,
												"mutability": "mutable",
												"name": "_whitelist",
												"nameLocation": "1345:10:13",
												"nodeType": "VariableDeclaration",
												"scope": 1731,
												"src": "1337:18:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1718,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1337:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1336:20:13"
									},
									"returnParameters": {
										"id": 1723,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1376:0:13"
									},
									"scope": 1846,
									"src": "1315:102:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1742,
										"nodeType": "Block",
										"src": "1482:33:13",
										"statements": [
											{
												"expression": {
													"id": 1740,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1738,
														"name": "cooldown",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1653,
														"src": "1489:8:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1739,
														"name": "_cooldown",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1733,
														"src": "1500:9:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1489:20:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1741,
												"nodeType": "ExpressionStatement",
												"src": "1489:20:13"
											}
										]
									},
									"functionSelector": "4fc3f41a",
									"id": 1743,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1736,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1735,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 60,
												"src": "1472:9:13"
											},
											"nodeType": "ModifierInvocation",
											"src": "1472:9:13"
										}
									],
									"name": "setCooldown",
									"nameLocation": "1432:11:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1734,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1733,
												"mutability": "mutable",
												"name": "_cooldown",
												"nameLocation": "1452:9:13",
												"nodeType": "VariableDeclaration",
												"scope": 1743,
												"src": "1444:17:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1732,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1444:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1443:19:13"
									},
									"returnParameters": {
										"id": 1737,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1482:0:13"
									},
									"scope": 1846,
									"src": "1423:92:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1756,
										"nodeType": "Block",
										"src": "1584:60:13",
										"statements": [
											{
												"expression": {
													"id": 1754,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1750,
														"name": "moolaNFT",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1656,
														"src": "1591:8:13",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC721EnumerableUpgradeable_$1296",
															"typeString": "contract IERC721EnumerableUpgradeable"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1752,
																"name": "_moola",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1745,
																"src": "1631:6:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 1751,
															"name": "IERC721EnumerableUpgradeable",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1296,
															"src": "1602:28:13",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IERC721EnumerableUpgradeable_$1296_$",
																"typeString": "type(contract IERC721EnumerableUpgradeable)"
															}
														},
														"id": 1753,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1602:36:13",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC721EnumerableUpgradeable_$1296",
															"typeString": "contract IERC721EnumerableUpgradeable"
														}
													},
													"src": "1591:47:13",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC721EnumerableUpgradeable_$1296",
														"typeString": "contract IERC721EnumerableUpgradeable"
													}
												},
												"id": 1755,
												"nodeType": "ExpressionStatement",
												"src": "1591:47:13"
											}
										]
									},
									"functionSelector": "be023d84",
									"id": 1757,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1748,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1747,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 60,
												"src": "1574:9:13"
											},
											"nodeType": "ModifierInvocation",
											"src": "1574:9:13"
										}
									],
									"name": "setMoolaNFTAddress",
									"nameLocation": "1530:18:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1746,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1745,
												"mutability": "mutable",
												"name": "_moola",
												"nameLocation": "1557:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 1757,
												"src": "1549:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1744,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1549:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1548:16:13"
									},
									"returnParameters": {
										"id": 1749,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1584:0:13"
									},
									"scope": 1846,
									"src": "1521:123:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										530
									],
									"body": {
										"id": 1766,
										"nodeType": "Block",
										"src": "1774:22:13",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 1764,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1788:2:13",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 1763,
												"id": 1765,
												"nodeType": "Return",
												"src": "1781:9:13"
											}
										]
									},
									"documentation": {
										"id": 1758,
										"nodeType": "StructuredDocumentation",
										"src": "1687:18:13",
										"text": " :"
									},
									"functionSelector": "313ce567",
									"id": 1767,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "1718:8:13",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1760,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1749:8:13"
									},
									"parameters": {
										"id": 1759,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1726:2:13"
									},
									"returnParameters": {
										"id": 1763,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1762,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1767,
												"src": "1767:5:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1761,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1767:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1766:7:13"
									},
									"scope": 1846,
									"src": "1709:87:13",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1782,
										"nodeType": "Block",
										"src": "1991:30:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1778,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1770,
															"src": "2004:2:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1779,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1772,
															"src": "2008:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1777,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 858,
														"src": "1998:5:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1780,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1998:17:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1781,
												"nodeType": "ExpressionStatement",
												"src": "1998:17:13"
											}
										]
									},
									"documentation": {
										"id": 1768,
										"nodeType": "StructuredDocumentation",
										"src": "1862:60:13",
										"text": " :\n @param to ??\n @param amount ??"
									},
									"functionSelector": "40c10f19",
									"id": 1783,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1775,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1774,
												"name": "onlyWhitelist",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1676,
												"src": "1977:13:13"
											},
											"nodeType": "ModifierInvocation",
											"src": "1977:13:13"
										}
									],
									"name": "mint",
									"nameLocation": "1935:4:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1773,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1770,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1948:2:13",
												"nodeType": "VariableDeclaration",
												"scope": 1783,
												"src": "1940:10:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1769,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1940:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1772,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1960:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 1783,
												"src": "1952:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1771,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1952:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1939:28:13"
									},
									"returnParameters": {
										"id": 1776,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1991:0:13"
									},
									"scope": 1846,
									"src": "1926:95:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1832,
										"nodeType": "Block",
										"src": "2074:349:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1795,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 1791,
																		"name": "_tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1785,
																		"src": "2106:8:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1789,
																		"name": "moolaNFT",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1656,
																		"src": "2089:8:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC721EnumerableUpgradeable_$1296",
																			"typeString": "contract IERC721EnumerableUpgradeable"
																		}
																	},
																	"id": 1790,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "ownerOf",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1198,
																	"src": "2089:16:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_address_$",
																		"typeString": "function (uint256) view external returns (address)"
																	}
																},
																"id": 1792,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2089:26:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 1793,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2119:3:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1794,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "2119:10:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2089:40:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "554e415554484f52495a4544",
															"id": 1796,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2131:14:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_269df367cd41cace5897a935d0e0858fe4543b5619d45e09af6b124c1bb3d528",
																"typeString": "literal_string \"UNAUTHORIZED\""
															},
															"value": "UNAUTHORIZED"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_269df367cd41cace5897a935d0e0858fe4543b5619d45e09af6b124c1bb3d528",
																"typeString": "literal_string \"UNAUTHORIZED\""
															}
														],
														"id": 1788,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2081:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1797,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2081:65:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1798,
												"nodeType": "ExpressionStatement",
												"src": "2081:65:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1807,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1805,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1800,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "2169:5:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 1801,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "timestamp",
																	"nodeType": "MemberAccess",
																	"src": "2169:15:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"baseExpression": {
																		"id": 1802,
																		"name": "nftLastClaimed",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1664,
																		"src": "2187:14:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																			"typeString": "mapping(uint256 => uint256)"
																		}
																	},
																	"id": 1804,
																	"indexExpression": {
																		"id": 1803,
																		"name": "_tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1785,
																		"src": "2202:8:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "2187:24:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2169:42:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"hexValue": "31",
																"id": 1806,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2215:6:13",
																"subdenomination": "days",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_86400_by_1",
																	"typeString": "int_const 86400"
																},
																"value": "1"
															},
															"src": "2169:52:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f4e20434f4f4c444f574e",
															"id": 1808,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2230:13:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_2a9a2fe545ab352608f300dd47f33eca8d45397574065019063dfce7b636146e",
																"typeString": "literal_string \"ON COOLDOWN\""
															},
															"value": "ON COOLDOWN"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_2a9a2fe545ab352608f300dd47f33eca8d45397574065019063dfce7b636146e",
																"typeString": "literal_string \"ON COOLDOWN\""
															}
														],
														"id": 1799,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2153:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1809,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2153:97:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1810,
												"nodeType": "ExpressionStatement",
												"src": "2153:97:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1812,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2265:3:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1813,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2265:10:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1814,
															"name": "dailyAllowance",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1651,
															"src": "2277:14:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1811,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 858,
														"src": "2259:5:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1815,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2259:33:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1816,
												"nodeType": "ExpressionStatement",
												"src": "2259:33:13"
											},
											{
												"expression": {
													"id": 1822,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1817,
															"name": "nftLastClaimed",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1664,
															"src": "2299:14:13",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																"typeString": "mapping(uint256 => uint256)"
															}
														},
														"id": 1819,
														"indexExpression": {
															"id": 1818,
															"name": "_tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1785,
															"src": "2314:8:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2299:24:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 1820,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "2326:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1821,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "2326:15:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2299:42:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1823,
												"nodeType": "ExpressionStatement",
												"src": "2299:42:13"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 1825,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2373:3:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1826,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2373:10:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1827,
															"name": "dailyAllowance",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1651,
															"src": "2385:14:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 1828,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "2401:5:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 1829,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "timestamp",
															"nodeType": "MemberAccess",
															"src": "2401:15:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1824,
														"name": "dailyDairyClaimed",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1684,
														"src": "2355:17:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256)"
														}
													},
													"id": 1830,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2355:62:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1831,
												"nodeType": "EmitStatement",
												"src": "2350:67:13"
											}
										]
									},
									"functionSelector": "59176c8d",
									"id": 1833,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "claimDairy",
									"nameLocation": "2036:10:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1786,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1785,
												"mutability": "mutable",
												"name": "_tokenId",
												"nameLocation": "2055:8:13",
												"nodeType": "VariableDeclaration",
												"scope": 1833,
												"src": "2047:16:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1784,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2047:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2046:18:13"
									},
									"returnParameters": {
										"id": 1787,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2074:0:13"
									},
									"scope": 1846,
									"src": "2027:396:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1844,
										"nodeType": "Block",
										"src": "2503:44:13",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 1840,
														"name": "nftLastClaimed",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1664,
														"src": "2517:14:13",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
															"typeString": "mapping(uint256 => uint256)"
														}
													},
													"id": 1842,
													"indexExpression": {
														"id": 1841,
														"name": "_tokenId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1835,
														"src": "2532:8:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "2517:24:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1839,
												"id": 1843,
												"nodeType": "Return",
												"src": "2510:31:13"
											}
										]
									},
									"functionSelector": "d1a20509",
									"id": 1845,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getLastClaimed",
									"nameLocation": "2438:14:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1836,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1835,
												"mutability": "mutable",
												"name": "_tokenId",
												"nameLocation": "2461:8:13",
												"nodeType": "VariableDeclaration",
												"scope": 1845,
												"src": "2453:16:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1834,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2453:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2452:18:13"
									},
									"returnParameters": {
										"id": 1839,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1838,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1845,
												"src": "2494:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1837,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2494:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2493:9:13"
									},
									"scope": 1846,
									"src": "2429:118:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1847,
							"src": "562:1988:13",
							"usedErrors": []
						}
					],
					"src": "114:2438:13"
				},
				"id": 13
			}
		}
	}
}